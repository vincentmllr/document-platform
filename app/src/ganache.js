const Web3 = require('web3');
var web3;
var bytecode = "60806040526000600460006101000a81548160ff0219169083151502179055503480156200002c57600080fd5b5060405162000b3938038062000b39833981810160405281019062000052919062000247565b84600090805190602001906200006a92919062000102565b5083600190805190602001906200008392919062000102565b5082600290805190602001906200009c92919062000102565b508160039080519060200190620000b592919062000102565b5080600460016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505050506200051d565b828054620001109062000414565b90600052602060002090601f01602090048101928262000134576000855562000180565b82601f106200014f57805160ff191683800117855562000180565b8280016001018555821562000180579182015b828111156200017f57825182559160200191906001019062000162565b5b5090506200018f919062000193565b5090565b5b80821115620001ae57600081600090555060010162000194565b5090565b6000620001c9620001c38462000374565b6200034b565b905082815260208101848484011115620001e857620001e7620004e3565b5b620001f5848285620003de565b509392505050565b6000815190506200020e8162000503565b92915050565b600082601f8301126200022c576200022b620004de565b5b81516200023e848260208601620001b2565b91505092915050565b600080600080600060a08688031215620002665762000265620004ed565b5b600086015167ffffffffffffffff811115620002875762000286620004e8565b5b620002958882890162000214565b955050602086015167ffffffffffffffff811115620002b957620002b8620004e8565b5b620002c78882890162000214565b945050604086015167ffffffffffffffff811115620002eb57620002ea620004e8565b5b620002f98882890162000214565b935050606086015167ffffffffffffffff8111156200031d576200031c620004e8565b5b6200032b8882890162000214565b92505060806200033e88828901620001fd565b9150509295509295909350565b6000620003576200036a565b90506200036582826200044a565b919050565b6000604051905090565b600067ffffffffffffffff821115620003925762000391620004af565b5b6200039d82620004f2565b9050602081019050919050565b6000620003b782620003be565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b83811015620003fe578082015181840152602081019050620003e1565b838111156200040e576000848401525b50505050565b600060028204905060018216806200042d57607f821691505b6020821081141562000444576200044362000480565b5b50919050565b6200045582620004f2565b810181811067ffffffffffffffff82111715620004775762000476620004af565b5b80604052505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080fd5b600080fd5b600080fd5b600080fd5b6000601f19601f8301169050919050565b6200050e81620003aa565b81146200051a57600080fd5b50565b61060c806200052d6000396000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c80634a79d50c1161005b5780634a79d50c146100dc578063a6c3e6b9146100fa578063d6784bdb14610118578063e364cffc146101365761007d565b8063360d1215146100825780633dc06356146100a05780634207c49d146100be575b600080fd5b61008a610140565b604051610097919061047f565b60405180910390f35b6100a8610166565b6040516100b591906104b5565b60405180910390f35b6100c66101f4565b6040516100d3919061049a565b60405180910390f35b6100e4610207565b6040516100f191906104b5565b60405180910390f35b610102610295565b60405161010f91906104b5565b60405180910390f35b610120610323565b60405161012d91906104b5565b60405180910390f35b61013e6103b1565b005b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6002805461017390610564565b80601f016020809104026020016040519081016040528092919081815260200182805461019f90610564565b80156101ec5780601f106101c1576101008083540402835291602001916101ec565b820191906000526020600020905b8154815290600101906020018083116101cf57829003601f168201915b505050505081565b600460009054906101000a900460ff1681565b6000805461021490610564565b80601f016020809104026020016040519081016040528092919081815260200182805461024090610564565b801561028d5780601f106102625761010080835404028352916020019161028d565b820191906000526020600020905b81548152906001019060200180831161027057829003601f168201915b505050505081565b600180546102a290610564565b80601f01602080910402602001604051908101604052809291908181526020018280546102ce90610564565b801561031b5780601f106102f05761010080835404028352916020019161031b565b820191906000526020600020905b8154815290600101906020018083116102fe57829003601f168201915b505050505081565b6003805461033090610564565b80601f016020809104026020016040519081016040528092919081815260200182805461035c90610564565b80156103a95780601f1061037e576101008083540402835291602001916103a9565b820191906000526020600020905b81548152906001019060200180831161038c57829003601f168201915b505050505081565b600460019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff161461040b57600080fd5b6001600460006101000a81548160ff021916908315150217905550565b610431816104f3565b82525050565b61044081610505565b82525050565b6000610451826104d7565b61045b81856104e2565b935061046b818560208601610531565b610474816105c5565b840191505092915050565b60006020820190506104946000830184610428565b92915050565b60006020820190506104af6000830184610437565b92915050565b600060208201905081810360008301526104cf8184610446565b905092915050565b600081519050919050565b600082825260208201905092915050565b60006104fe82610511565b9050919050565b60008115159050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60005b8381101561054f578082015181840152602081019050610534565b8381111561055e576000848401525b50505050565b6000600282049050600182168061057c57607f821691505b602082108114156105905761058f610596565b5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b6000601f19601f830116905091905056fea2646970667358221220ca09afee748aa3919e3262d737f20e32ad1510d285b335ec04a4f0603be42da564736f6c63430008070033";
var abi = [
	{
		"inputs": [
			{
				"internalType": "string",
				"name": "_title",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_author",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_path",
				"type": "string"
			},
			{
				"internalType": "string",
				"name": "_hashcode",
				"type": "string"
			},
			{
				"internalType": "address",
				"name": "_examiner",
				"type": "address"
			}
		],
		"stateMutability": "nonpayable",
		"type": "constructor"
	},
	{
		"inputs": [],
		"name": "author",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "examiner",
		"outputs": [
			{
				"internalType": "address",
				"name": "",
				"type": "address"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "hashcode",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "isSignt",
		"outputs": [
			{
				"internalType": "bool",
				"name": "",
				"type": "bool"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "path",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "signScientificWork",
		"outputs": [],
		"stateMutability": "nonpayable",
		"type": "function"
	},
	{
		"inputs": [],
		"name": "title",
		"outputs": [
			{
				"internalType": "string",
				"name": "",
				"type": "string"
			}
		],
		"stateMutability": "view",
		"type": "function"
	}
];


export async function connectMetaMask(){
   if (window.ethereum) {
      web3 = new Web3(window.ethereum);
      try {
         await window.ethereum.request({method: 'eth_requestAccounts'});
         var accounts = await web3.eth.getAccounts();
         return accounts;
      } catch(e) {
         // User has denied account access to DApp...
      }
   }
}

/*Compile Contract
async function compileContract(filename, contractname){
   const source = fs.readFileSync("/usr/src/app/smart_contracts/"+filename, 'utf8'); //Datei muss im Ordner Smart_contracts liegen
   console.log("compile Contract "+contractname);
   const tempFile = await JSON.parse(solc.compile(JSON.stringify(

    {
        language: 'Solidity',
        sources: {
           [filename]: {
              content: source,
           }
        },
        settings: {
           outputSelection: {
              '*': {
                 '*': ['*'],
              },
           },
        },
     }

   )));
   const contractFile = await tempFile.contracts[filename][contractname];

   return contractFile;
}*/

/*
   -- Deploy Contract --
*/
export const deploy = async (args, account) => {

   console.log("Attempting to deploy Contract");
      
      // Create Contract Instance
      const contract = await new web3.eth.Contract(abi).deploy({
         data: bytecode,
         arguments: args,
      }).send({ gas: 4712388, from: account });
      
      return contract;
};

export async function getAddressOfContracts() {
   var addressList = [];
   var blockNo = await web3.eth.getBlockNumber()
   for (let i = 1; i <= blockNo; i++) {
      var block = await web3.eth.getBlock(i);
      var transaction = await web3.eth.getTransaction(block.transactions);
      var receipt = await web3.eth.getTransactionReceipt(transaction.hash);

      addressList.push(receipt.contractAddress)
      addressList.push(receipt.to)
   }
   addressList = addressList.filter(n => n);
   addressList = addressList.map(address => address.toLowerCase());
   addressList= [...new Set(addressList)];


   return addressList;
}

export async function getPathOfContracts(addressList) {
   var pathList = [];
   for (var i = 0; i < addressList.length; i++) {
      var contract = await new web3.eth.Contract(abi, addressList[i]);
      var path = await contract.methods.path().call();
      pathList.push(path);

   }

   return pathList;
}





