{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['timeout', 'master_timeout', 'ignore_unavailable', 'allow_no_indices', 'expand_wildcards', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'index', 'fielddata', 'fields', 'query', 'request', 'wait_for_active_shards', 'include_type_name', 'local', 'flat_settings', 'include_defaults', 'force', 'wait_if_ongoing', 'flush', 'max_num_segments', 'only_expunge_deletes', 'create', 'cause', 'write_index_only', 'preserve_existing', 'order', 'detailed', 'active_only', 'dry_run', 'verbose', 'status', 'copy_settings', 'completion_fields', 'fielddata_fields', 'groups', 'level', 'types', 'include_segment_file_sizes', 'include_unloaded_segments', 'forbid_closed_indices', 'wait_for_completion', 'only_ancient_segments', 'explain', 'q', 'analyzer', 'analyze_wildcard', 'default_operator', 'df', 'lenient', 'rewrite', 'all_shards'];\nconst snakeCase = {\n  masterTimeout: 'master_timeout',\n  ignoreUnavailable: 'ignore_unavailable',\n  allowNoIndices: 'allow_no_indices',\n  expandWildcards: 'expand_wildcards',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n  waitForActiveShards: 'wait_for_active_shards',\n  includeTypeName: 'include_type_name',\n  flatSettings: 'flat_settings',\n  includeDefaults: 'include_defaults',\n  waitIfOngoing: 'wait_if_ongoing',\n  maxNumSegments: 'max_num_segments',\n  onlyExpungeDeletes: 'only_expunge_deletes',\n  writeIndexOnly: 'write_index_only',\n  preserveExisting: 'preserve_existing',\n  activeOnly: 'active_only',\n  dryRun: 'dry_run',\n  copySettings: 'copy_settings',\n  completionFields: 'completion_fields',\n  fielddataFields: 'fielddata_fields',\n  includeSegmentFileSizes: 'include_segment_file_sizes',\n  includeUnloadedSegments: 'include_unloaded_segments',\n  forbidClosedIndices: 'forbid_closed_indices',\n  waitForCompletion: 'wait_for_completion',\n  onlyAncientSegments: 'only_ancient_segments',\n  analyzeWildcard: 'analyze_wildcard',\n  defaultOperator: 'default_operator',\n  allShards: 'all_shards'\n};\n\nfunction IndicesApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n_c = IndicesApi;\n\nIndicesApi.prototype.addBlock = function indicesAddBlockApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  if (params.block == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: block');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if (params.block != null && params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    block,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + encodeURIComponent(index) + '/' + '_block' + '/' + encodeURIComponent(block); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.analyze = function indicesAnalyzeApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_analyze';\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_analyze';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.clearCache = function indicesClearCacheApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null) {\n    if (method == null) method = 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_cache' + '/' + 'clear';\n  } else {\n    if (method == null) method = 'POST';\n    path = '/' + '_cache' + '/' + 'clear';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.clone = function indicesCloneApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  if (params.target == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: target');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if (params.target != null && params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    target,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + encodeURIComponent(index) + '/' + '_clone' + '/' + encodeURIComponent(target); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.close = function indicesCloseApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + encodeURIComponent(index) + '/' + '_close'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.create = function indicesCreateApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + encodeURIComponent(index); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.createDataStream = function indicesCreateDataStreamApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_data_stream' + '/' + encodeURIComponent(name); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.dataStreamsStats = function indicesDataStreamsStatsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (name != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_data_stream' + '/' + encodeURIComponent(name) + '/' + '_stats';\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_data_stream' + '/' + '_stats';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.delete = function indicesDeleteApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + encodeURIComponent(index); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.deleteAlias = function indicesDeleteAliasApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if (params.name != null && params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null && name != null) {\n    if (method == null) method = 'DELETE';\n    path = '/' + encodeURIComponent(index) + '/' + '_alias' + '/' + encodeURIComponent(name);\n  } else {\n    if (method == null) method = 'DELETE';\n    path = '/' + encodeURIComponent(index) + '/' + '_aliases' + '/' + encodeURIComponent(name);\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.deleteDataStream = function indicesDeleteDataStreamApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_data_stream' + '/' + encodeURIComponent(name); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.deleteIndexTemplate = function indicesDeleteIndexTemplateApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_index_template' + '/' + encodeURIComponent(name); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.deleteTemplate = function indicesDeleteTemplateApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_template' + '/' + encodeURIComponent(name); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.exists = function indicesExistsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'HEAD';\n  path = '/' + encodeURIComponent(index); // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.existsAlias = function indicesExistsAliasApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null && name != null) {\n    if (method == null) method = 'HEAD';\n    path = '/' + encodeURIComponent(index) + '/' + '_alias' + '/' + encodeURIComponent(name);\n  } else {\n    if (method == null) method = 'HEAD';\n    path = '/' + '_alias' + '/' + encodeURIComponent(name);\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.existsIndexTemplate = function indicesExistsIndexTemplateApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'HEAD';\n  path = '/' + '_index_template' + '/' + encodeURIComponent(name); // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.existsTemplate = function indicesExistsTemplateApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'HEAD';\n  path = '/' + '_template' + '/' + encodeURIComponent(name); // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.existsType = function indicesExistsTypeApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  if (params.type == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: type');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if (params.type != null && params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    type,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'HEAD';\n  path = '/' + encodeURIComponent(index) + '/' + '_mapping' + '/' + encodeURIComponent(type); // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.flush = function indicesFlushApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_flush';\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_flush';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.flushSynced = function indicesFlushSyncedApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = body == null ? 'GET' : 'POST';\n  path = '/' + encodeURIComponent(index) + '/' + '_flush' + '/' + 'synced'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.forcemerge = function indicesForcemergeApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null) {\n    if (method == null) method = 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_forcemerge';\n  } else {\n    if (method == null) method = 'POST';\n    path = '/' + '_forcemerge';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.freeze = function indicesFreezeApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + encodeURIComponent(index) + '/' + '_freeze'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.get = function indicesGetApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + encodeURIComponent(index); // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.getAlias = function indicesGetAliasApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    name,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null && name != null) {\n    if (method == null) method = 'GET';\n    path = '/' + encodeURIComponent(index) + '/' + '_alias' + '/' + encodeURIComponent(name);\n  } else if (name != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_alias' + '/' + encodeURIComponent(name);\n  } else if (index != null) {\n    if (method == null) method = 'GET';\n    path = '/' + encodeURIComponent(index) + '/' + '_alias';\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_alias';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.getDataStream = function indicesGetDataStreamApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (name != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_data_stream' + '/' + encodeURIComponent(name);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_data_stream';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.getFieldMapping = function indicesGetFieldMappingApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.fields == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: fields');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    fields,\n    index,\n    type,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null && type != null && fields != null) {\n    if (method == null) method = 'GET';\n    path = '/' + encodeURIComponent(index) + '/' + '_mapping' + '/' + encodeURIComponent(type) + '/' + 'field' + '/' + encodeURIComponent(fields);\n  } else if (index != null && fields != null) {\n    if (method == null) method = 'GET';\n    path = '/' + encodeURIComponent(index) + '/' + '_mapping' + '/' + 'field' + '/' + encodeURIComponent(fields);\n  } else if (type != null && fields != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_mapping' + '/' + encodeURIComponent(type) + '/' + 'field' + '/' + encodeURIComponent(fields);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_mapping' + '/' + 'field' + '/' + encodeURIComponent(fields);\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.getIndexTemplate = function indicesGetIndexTemplateApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (name != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_index_template' + '/' + encodeURIComponent(name);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_index_template';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.getMapping = function indicesGetMappingApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    index,\n    type,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null && type != null) {\n    if (method == null) method = 'GET';\n    path = '/' + encodeURIComponent(index) + '/' + '_mapping' + '/' + encodeURIComponent(type);\n  } else if (index != null) {\n    if (method == null) method = 'GET';\n    path = '/' + encodeURIComponent(index) + '/' + '_mapping';\n  } else if (type != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_mapping' + '/' + encodeURIComponent(type);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_mapping';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.getSettings = function indicesGetSettingsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    index,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null && name != null) {\n    if (method == null) method = 'GET';\n    path = '/' + encodeURIComponent(index) + '/' + '_settings' + '/' + encodeURIComponent(name);\n  } else if (index != null) {\n    if (method == null) method = 'GET';\n    path = '/' + encodeURIComponent(index) + '/' + '_settings';\n  } else if (name != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_settings' + '/' + encodeURIComponent(name);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_settings';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.getTemplate = function indicesGetTemplateApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (name != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_template' + '/' + encodeURIComponent(name);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_template';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.getUpgrade = function indicesGetUpgradeApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + encodeURIComponent(index) + '/' + '_upgrade'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.migrateToDataStream = function indicesMigrateToDataStreamApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_data_stream' + '/' + '_migrate' + '/' + encodeURIComponent(name); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.open = function indicesOpenApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + encodeURIComponent(index) + '/' + '_open'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.promoteDataStream = function indicesPromoteDataStreamApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_data_stream' + '/' + '_promote' + '/' + encodeURIComponent(name); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.putAlias = function indicesPutAliasApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if (params.name != null && params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null && name != null) {\n    if (method == null) method = 'PUT';\n    path = '/' + encodeURIComponent(index) + '/' + '_alias' + '/' + encodeURIComponent(name);\n  } else {\n    if (method == null) method = 'PUT';\n    path = '/' + encodeURIComponent(index) + '/' + '_aliases' + '/' + encodeURIComponent(name);\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.putIndexTemplate = function indicesPutIndexTemplateApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_index_template' + '/' + encodeURIComponent(name); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.putMapping = function indicesPutMappingApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    type,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null && type != null) {\n    if (method == null) method = 'PUT';\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_mapping';\n  } else if (index != null && type != null) {\n    if (method == null) method = 'PUT';\n    path = '/' + encodeURIComponent(index) + '/' + '_mapping' + '/' + encodeURIComponent(type);\n  } else if (index != null && type != null) {\n    if (method == null) method = 'PUT';\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_mappings';\n  } else if (index != null && type != null) {\n    if (method == null) method = 'PUT';\n    path = '/' + encodeURIComponent(index) + '/' + '_mappings' + '/' + encodeURIComponent(type);\n  } else if (index != null) {\n    if (method == null) method = 'PUT';\n    path = '/' + encodeURIComponent(index) + '/' + '_mapping';\n  } else if (type != null) {\n    if (method == null) method = 'PUT';\n    path = '/' + '_mappings' + '/' + encodeURIComponent(type);\n  } else if (index != null) {\n    if (method == null) method = 'PUT';\n    path = '/' + encodeURIComponent(index) + '/' + '_mappings';\n  } else {\n    if (method == null) method = 'PUT';\n    path = '/' + '_mapping' + '/' + encodeURIComponent(type);\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.putSettings = function indicesPutSettingsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null) {\n    if (method == null) method = 'PUT';\n    path = '/' + encodeURIComponent(index) + '/' + '_settings';\n  } else {\n    if (method == null) method = 'PUT';\n    path = '/' + '_settings';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.putTemplate = function indicesPutTemplateApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_template' + '/' + encodeURIComponent(name); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.recovery = function indicesRecoveryApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null) {\n    if (method == null) method = 'GET';\n    path = '/' + encodeURIComponent(index) + '/' + '_recovery';\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_recovery';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.refresh = function indicesRefreshApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_refresh';\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_refresh';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.reloadSearchAnalyzers = function indicesReloadSearchAnalyzersApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = body == null ? 'GET' : 'POST';\n  path = '/' + encodeURIComponent(index) + '/' + '_reload_search_analyzers'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.resolveIndex = function indicesResolveIndexApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_resolve' + '/' + 'index' + '/' + encodeURIComponent(name); // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.rollover = function indicesRolloverApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.alias == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: alias');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if ((params.new_index != null || params.newIndex != null) && params.alias == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: alias');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    alias,\n    newIndex,\n    new_index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (alias != null && (new_index || newIndex) != null) {\n    if (method == null) method = 'POST';\n    path = '/' + encodeURIComponent(alias) + '/' + '_rollover' + '/' + encodeURIComponent(new_index || newIndex);\n  } else {\n    if (method == null) method = 'POST';\n    path = '/' + encodeURIComponent(alias) + '/' + '_rollover';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.segments = function indicesSegmentsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null) {\n    if (method == null) method = 'GET';\n    path = '/' + encodeURIComponent(index) + '/' + '_segments';\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_segments';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.shardStores = function indicesShardStoresApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null) {\n    if (method == null) method = 'GET';\n    path = '/' + encodeURIComponent(index) + '/' + '_shard_stores';\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_shard_stores';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.shrink = function indicesShrinkApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  if (params.target == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: target');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if (params.target != null && params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    target,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + encodeURIComponent(index) + '/' + '_shrink' + '/' + encodeURIComponent(target); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.simulateIndexTemplate = function indicesSimulateIndexTemplateApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_index_template' + '/' + '_simulate_index' + '/' + encodeURIComponent(name); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.simulateTemplate = function indicesSimulateTemplateApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (name != null) {\n    if (method == null) method = 'POST';\n    path = '/' + '_index_template' + '/' + '_simulate' + '/' + encodeURIComponent(name);\n  } else {\n    if (method == null) method = 'POST';\n    path = '/' + '_index_template' + '/' + '_simulate';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.split = function indicesSplitApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  if (params.target == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: target');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if (params.target != null && params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    target,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + encodeURIComponent(index) + '/' + '_split' + '/' + encodeURIComponent(target); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.stats = function indicesStatsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    metric,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null && metric != null) {\n    if (method == null) method = 'GET';\n    path = '/' + encodeURIComponent(index) + '/' + '_stats' + '/' + encodeURIComponent(metric);\n  } else if (metric != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_stats' + '/' + encodeURIComponent(metric);\n  } else if (index != null) {\n    if (method == null) method = 'GET';\n    path = '/' + encodeURIComponent(index) + '/' + '_stats';\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_stats';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.unfreeze = function indicesUnfreezeApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + encodeURIComponent(index) + '/' + '_unfreeze'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.updateAliases = function indicesUpdateAliasesApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_aliases'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.upgrade = function indicesUpgradeApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + encodeURIComponent(index) + '/' + '_upgrade'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIndicesApi.prototype.validateQuery = function indicesValidateQueryApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required url components\n\n  if (params.type != null && params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    type,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null && type != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_validate' + '/' + 'query';\n  } else if (index != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_validate' + '/' + 'query';\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_validate' + '/' + 'query';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nObject.defineProperties(IndicesApi.prototype, {\n  add_block: {\n    get() {\n      return this.addBlock;\n    }\n\n  },\n  clear_cache: {\n    get() {\n      return this.clearCache;\n    }\n\n  },\n  create_data_stream: {\n    get() {\n      return this.createDataStream;\n    }\n\n  },\n  data_streams_stats: {\n    get() {\n      return this.dataStreamsStats;\n    }\n\n  },\n  delete_alias: {\n    get() {\n      return this.deleteAlias;\n    }\n\n  },\n  delete_data_stream: {\n    get() {\n      return this.deleteDataStream;\n    }\n\n  },\n  delete_index_template: {\n    get() {\n      return this.deleteIndexTemplate;\n    }\n\n  },\n  delete_template: {\n    get() {\n      return this.deleteTemplate;\n    }\n\n  },\n  exists_alias: {\n    get() {\n      return this.existsAlias;\n    }\n\n  },\n  exists_index_template: {\n    get() {\n      return this.existsIndexTemplate;\n    }\n\n  },\n  exists_template: {\n    get() {\n      return this.existsTemplate;\n    }\n\n  },\n  exists_type: {\n    get() {\n      return this.existsType;\n    }\n\n  },\n  flush_synced: {\n    get() {\n      return this.flushSynced;\n    }\n\n  },\n  get_alias: {\n    get() {\n      return this.getAlias;\n    }\n\n  },\n  get_data_stream: {\n    get() {\n      return this.getDataStream;\n    }\n\n  },\n  get_field_mapping: {\n    get() {\n      return this.getFieldMapping;\n    }\n\n  },\n  get_index_template: {\n    get() {\n      return this.getIndexTemplate;\n    }\n\n  },\n  get_mapping: {\n    get() {\n      return this.getMapping;\n    }\n\n  },\n  get_settings: {\n    get() {\n      return this.getSettings;\n    }\n\n  },\n  get_template: {\n    get() {\n      return this.getTemplate;\n    }\n\n  },\n  get_upgrade: {\n    get() {\n      return this.getUpgrade;\n    }\n\n  },\n  migrate_to_data_stream: {\n    get() {\n      return this.migrateToDataStream;\n    }\n\n  },\n  promote_data_stream: {\n    get() {\n      return this.promoteDataStream;\n    }\n\n  },\n  put_alias: {\n    get() {\n      return this.putAlias;\n    }\n\n  },\n  put_index_template: {\n    get() {\n      return this.putIndexTemplate;\n    }\n\n  },\n  put_mapping: {\n    get() {\n      return this.putMapping;\n    }\n\n  },\n  put_settings: {\n    get() {\n      return this.putSettings;\n    }\n\n  },\n  put_template: {\n    get() {\n      return this.putTemplate;\n    }\n\n  },\n  reload_search_analyzers: {\n    get() {\n      return this.reloadSearchAnalyzers;\n    }\n\n  },\n  resolve_index: {\n    get() {\n      return this.resolveIndex;\n    }\n\n  },\n  shard_stores: {\n    get() {\n      return this.shardStores;\n    }\n\n  },\n  simulate_index_template: {\n    get() {\n      return this.simulateIndexTemplate;\n    }\n\n  },\n  simulate_template: {\n    get() {\n      return this.simulateTemplate;\n    }\n\n  },\n  update_aliases: {\n    get() {\n      return this.updateAliases;\n    }\n\n  },\n  validate_query: {\n    get() {\n      return this.validateQuery;\n    }\n\n  }\n});\nmodule.exports = IndicesApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"IndicesApi\");","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/indices.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","masterTimeout","ignoreUnavailable","allowNoIndices","expandWildcards","errorTrace","filterPath","waitForActiveShards","includeTypeName","flatSettings","includeDefaults","waitIfOngoing","maxNumSegments","onlyExpungeDeletes","writeIndexOnly","preserveExisting","activeOnly","dryRun","copySettings","completionFields","fielddataFields","includeSegmentFileSizes","includeUnloadedSegments","forbidClosedIndices","waitForCompletion","onlyAncientSegments","analyzeWildcard","defaultOperator","allShards","IndicesApi","transport","ConfigurationError","prototype","addBlock","indicesAddBlockApi","params","options","callback","index","err","block","method","body","querystring","path","encodeURIComponent","request","analyze","indicesAnalyzeApi","clearCache","indicesClearCacheApi","clone","indicesCloneApi","target","close","indicesCloseApi","create","indicesCreateApi","createDataStream","indicesCreateDataStreamApi","name","dataStreamsStats","indicesDataStreamsStatsApi","delete","indicesDeleteApi","deleteAlias","indicesDeleteAliasApi","deleteDataStream","indicesDeleteDataStreamApi","deleteIndexTemplate","indicesDeleteIndexTemplateApi","deleteTemplate","indicesDeleteTemplateApi","exists","indicesExistsApi","existsAlias","indicesExistsAliasApi","existsIndexTemplate","indicesExistsIndexTemplateApi","existsTemplate","indicesExistsTemplateApi","existsType","indicesExistsTypeApi","type","flush","indicesFlushApi","flushSynced","indicesFlushSyncedApi","forcemerge","indicesForcemergeApi","freeze","indicesFreezeApi","get","indicesGetApi","getAlias","indicesGetAliasApi","getDataStream","indicesGetDataStreamApi","getFieldMapping","indicesGetFieldMappingApi","fields","getIndexTemplate","indicesGetIndexTemplateApi","getMapping","indicesGetMappingApi","getSettings","indicesGetSettingsApi","getTemplate","indicesGetTemplateApi","getUpgrade","indicesGetUpgradeApi","migrateToDataStream","indicesMigrateToDataStreamApi","open","indicesOpenApi","promoteDataStream","indicesPromoteDataStreamApi","putAlias","indicesPutAliasApi","putIndexTemplate","indicesPutIndexTemplateApi","putMapping","indicesPutMappingApi","putSettings","indicesPutSettingsApi","putTemplate","indicesPutTemplateApi","recovery","indicesRecoveryApi","refresh","indicesRefreshApi","reloadSearchAnalyzers","indicesReloadSearchAnalyzersApi","resolveIndex","indicesResolveIndexApi","rollover","indicesRolloverApi","alias","new_index","newIndex","segments","indicesSegmentsApi","shardStores","indicesShardStoresApi","shrink","indicesShrinkApi","simulateIndexTemplate","indicesSimulateIndexTemplateApi","simulateTemplate","indicesSimulateTemplateApi","split","indicesSplitApi","stats","indicesStatsApi","metric","unfreeze","indicesUnfreezeApi","updateAliases","indicesUpdateAliasesApi","upgrade","indicesUpgradeApi","validateQuery","indicesValidateQueryApi","Object","defineProperties","add_block","clear_cache","create_data_stream","data_streams_stats","delete_alias","delete_data_stream","delete_index_template","delete_template","exists_alias","exists_index_template","exists_template","exists_type","flush_synced","get_alias","get_data_stream","get_field_mapping","get_index_template","get_mapping","get_settings","get_template","get_upgrade","migrate_to_data_stream","promote_data_stream","put_alias","put_index_template","put_mapping","put_settings","put_template","reload_search_analyzers","resolve_index","shard_stores","simulate_index_template","simulate_template","update_aliases","validate_query","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['timeout', 'master_timeout', 'ignore_unavailable', 'allow_no_indices', 'expand_wildcards', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'index', 'fielddata', 'fields', 'query', 'request', 'wait_for_active_shards', 'include_type_name', 'local', 'flat_settings', 'include_defaults', 'force', 'wait_if_ongoing', 'flush', 'max_num_segments', 'only_expunge_deletes', 'create', 'cause', 'write_index_only', 'preserve_existing', 'order', 'detailed', 'active_only', 'dry_run', 'verbose', 'status', 'copy_settings', 'completion_fields', 'fielddata_fields', 'groups', 'level', 'types', 'include_segment_file_sizes', 'include_unloaded_segments', 'forbid_closed_indices', 'wait_for_completion', 'only_ancient_segments', 'explain', 'q', 'analyzer', 'analyze_wildcard', 'default_operator', 'df', 'lenient', 'rewrite', 'all_shards']\r\nconst snakeCase = { masterTimeout: 'master_timeout', ignoreUnavailable: 'ignore_unavailable', allowNoIndices: 'allow_no_indices', expandWildcards: 'expand_wildcards', errorTrace: 'error_trace', filterPath: 'filter_path', waitForActiveShards: 'wait_for_active_shards', includeTypeName: 'include_type_name', flatSettings: 'flat_settings', includeDefaults: 'include_defaults', waitIfOngoing: 'wait_if_ongoing', maxNumSegments: 'max_num_segments', onlyExpungeDeletes: 'only_expunge_deletes', writeIndexOnly: 'write_index_only', preserveExisting: 'preserve_existing', activeOnly: 'active_only', dryRun: 'dry_run', copySettings: 'copy_settings', completionFields: 'completion_fields', fielddataFields: 'fielddata_fields', includeSegmentFileSizes: 'include_segment_file_sizes', includeUnloadedSegments: 'include_unloaded_segments', forbidClosedIndices: 'forbid_closed_indices', waitForCompletion: 'wait_for_completion', onlyAncientSegments: 'only_ancient_segments', analyzeWildcard: 'analyze_wildcard', defaultOperator: 'default_operator', allShards: 'all_shards' }\r\n\r\nfunction IndicesApi (transport, ConfigurationError) {\r\n  this.transport = transport\r\n  this[kConfigurationError] = ConfigurationError\r\n}\r\n\r\nIndicesApi.prototype.addBlock = function indicesAddBlockApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.block == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: block')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if (params.block != null && (params.index == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, block, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + encodeURIComponent(index) + '/' + '_block' + '/' + encodeURIComponent(block)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.analyze = function indicesAnalyzeApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null) {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_analyze'\r\n  } else {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + '_analyze'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.clearCache = function indicesClearCacheApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null) {\r\n    if (method == null) method = 'POST'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_cache' + '/' + 'clear'\r\n  } else {\r\n    if (method == null) method = 'POST'\r\n    path = '/' + '_cache' + '/' + 'clear'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.clone = function indicesCloneApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.target == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: target')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if (params.target != null && (params.index == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, target, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + encodeURIComponent(index) + '/' + '_clone' + '/' + encodeURIComponent(target)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.close = function indicesCloseApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + encodeURIComponent(index) + '/' + '_close'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.create = function indicesCreateApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + encodeURIComponent(index)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.createDataStream = function indicesCreateDataStreamApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_data_stream' + '/' + encodeURIComponent(name)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.dataStreamsStats = function indicesDataStreamsStatsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((name) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_data_stream' + '/' + encodeURIComponent(name) + '/' + '_stats'\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_data_stream' + '/' + '_stats'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.delete = function indicesDeleteApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + encodeURIComponent(index)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.deleteAlias = function indicesDeleteAliasApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if (params.name != null && (params.index == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null && (name) != null) {\r\n    if (method == null) method = 'DELETE'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_alias' + '/' + encodeURIComponent(name)\r\n  } else {\r\n    if (method == null) method = 'DELETE'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_aliases' + '/' + encodeURIComponent(name)\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.deleteDataStream = function indicesDeleteDataStreamApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_data_stream' + '/' + encodeURIComponent(name)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.deleteIndexTemplate = function indicesDeleteIndexTemplateApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_index_template' + '/' + encodeURIComponent(name)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.deleteTemplate = function indicesDeleteTemplateApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_template' + '/' + encodeURIComponent(name)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.exists = function indicesExistsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'HEAD'\r\n  path = '/' + encodeURIComponent(index)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.existsAlias = function indicesExistsAliasApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null && (name) != null) {\r\n    if (method == null) method = 'HEAD'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_alias' + '/' + encodeURIComponent(name)\r\n  } else {\r\n    if (method == null) method = 'HEAD'\r\n    path = '/' + '_alias' + '/' + encodeURIComponent(name)\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.existsIndexTemplate = function indicesExistsIndexTemplateApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'HEAD'\r\n  path = '/' + '_index_template' + '/' + encodeURIComponent(name)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.existsTemplate = function indicesExistsTemplateApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'HEAD'\r\n  path = '/' + '_template' + '/' + encodeURIComponent(name)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.existsType = function indicesExistsTypeApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.type == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: type')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if (params.type != null && (params.index == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, type, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'HEAD'\r\n  path = '/' + encodeURIComponent(index) + '/' + '_mapping' + '/' + encodeURIComponent(type)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.flush = function indicesFlushApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null) {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_flush'\r\n  } else {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + '_flush'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.flushSynced = function indicesFlushSyncedApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = body == null ? 'GET' : 'POST'\r\n  path = '/' + encodeURIComponent(index) + '/' + '_flush' + '/' + 'synced'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.forcemerge = function indicesForcemergeApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null) {\r\n    if (method == null) method = 'POST'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_forcemerge'\r\n  } else {\r\n    if (method == null) method = 'POST'\r\n    path = '/' + '_forcemerge'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.freeze = function indicesFreezeApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + encodeURIComponent(index) + '/' + '_freeze'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.get = function indicesGetApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + encodeURIComponent(index)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.getAlias = function indicesGetAliasApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, name, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null && (name) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_alias' + '/' + encodeURIComponent(name)\r\n  } else if ((name) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_alias' + '/' + encodeURIComponent(name)\r\n  } else if ((index) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_alias'\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_alias'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.getDataStream = function indicesGetDataStreamApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((name) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_data_stream' + '/' + encodeURIComponent(name)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_data_stream'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.getFieldMapping = function indicesGetFieldMappingApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.fields == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: fields')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, fields, index, type, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null && (type) != null && (fields) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_mapping' + '/' + encodeURIComponent(type) + '/' + 'field' + '/' + encodeURIComponent(fields)\r\n  } else if ((index) != null && (fields) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_mapping' + '/' + 'field' + '/' + encodeURIComponent(fields)\r\n  } else if ((type) != null && (fields) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_mapping' + '/' + encodeURIComponent(type) + '/' + 'field' + '/' + encodeURIComponent(fields)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_mapping' + '/' + 'field' + '/' + encodeURIComponent(fields)\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.getIndexTemplate = function indicesGetIndexTemplateApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((name) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_index_template' + '/' + encodeURIComponent(name)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_index_template'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.getMapping = function indicesGetMappingApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, index, type, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null && (type) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_mapping' + '/' + encodeURIComponent(type)\r\n  } else if ((index) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_mapping'\r\n  } else if ((type) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_mapping' + '/' + encodeURIComponent(type)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_mapping'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.getSettings = function indicesGetSettingsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, index, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null && (name) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_settings' + '/' + encodeURIComponent(name)\r\n  } else if ((index) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_settings'\r\n  } else if ((name) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_settings' + '/' + encodeURIComponent(name)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_settings'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.getTemplate = function indicesGetTemplateApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((name) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_template' + '/' + encodeURIComponent(name)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_template'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.getUpgrade = function indicesGetUpgradeApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + encodeURIComponent(index) + '/' + '_upgrade'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.migrateToDataStream = function indicesMigrateToDataStreamApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_data_stream' + '/' + '_migrate' + '/' + encodeURIComponent(name)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.open = function indicesOpenApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + encodeURIComponent(index) + '/' + '_open'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.promoteDataStream = function indicesPromoteDataStreamApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_data_stream' + '/' + '_promote' + '/' + encodeURIComponent(name)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.putAlias = function indicesPutAliasApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if (params.name != null && (params.index == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null && (name) != null) {\r\n    if (method == null) method = 'PUT'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_alias' + '/' + encodeURIComponent(name)\r\n  } else {\r\n    if (method == null) method = 'PUT'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_aliases' + '/' + encodeURIComponent(name)\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.putIndexTemplate = function indicesPutIndexTemplateApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_index_template' + '/' + encodeURIComponent(name)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.putMapping = function indicesPutMappingApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, type, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null && (type) != null) {\r\n    if (method == null) method = 'PUT'\r\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_mapping'\r\n  } else if ((index) != null && (type) != null) {\r\n    if (method == null) method = 'PUT'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_mapping' + '/' + encodeURIComponent(type)\r\n  } else if ((index) != null && (type) != null) {\r\n    if (method == null) method = 'PUT'\r\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_mappings'\r\n  } else if ((index) != null && (type) != null) {\r\n    if (method == null) method = 'PUT'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_mappings' + '/' + encodeURIComponent(type)\r\n  } else if ((index) != null) {\r\n    if (method == null) method = 'PUT'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_mapping'\r\n  } else if ((type) != null) {\r\n    if (method == null) method = 'PUT'\r\n    path = '/' + '_mappings' + '/' + encodeURIComponent(type)\r\n  } else if ((index) != null) {\r\n    if (method == null) method = 'PUT'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_mappings'\r\n  } else {\r\n    if (method == null) method = 'PUT'\r\n    path = '/' + '_mapping' + '/' + encodeURIComponent(type)\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.putSettings = function indicesPutSettingsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null) {\r\n    if (method == null) method = 'PUT'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_settings'\r\n  } else {\r\n    if (method == null) method = 'PUT'\r\n    path = '/' + '_settings'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.putTemplate = function indicesPutTemplateApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_template' + '/' + encodeURIComponent(name)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.recovery = function indicesRecoveryApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_recovery'\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_recovery'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.refresh = function indicesRefreshApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null) {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_refresh'\r\n  } else {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + '_refresh'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.reloadSearchAnalyzers = function indicesReloadSearchAnalyzersApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = body == null ? 'GET' : 'POST'\r\n  path = '/' + encodeURIComponent(index) + '/' + '_reload_search_analyzers'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.resolveIndex = function indicesResolveIndexApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_resolve' + '/' + 'index' + '/' + encodeURIComponent(name)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.rollover = function indicesRolloverApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.alias == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: alias')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if ((params.new_index != null || params.newIndex != null) && (params.alias == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: alias')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, alias, newIndex, new_index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((alias) != null && (new_index || newIndex) != null) {\r\n    if (method == null) method = 'POST'\r\n    path = '/' + encodeURIComponent(alias) + '/' + '_rollover' + '/' + encodeURIComponent(new_index || newIndex)\r\n  } else {\r\n    if (method == null) method = 'POST'\r\n    path = '/' + encodeURIComponent(alias) + '/' + '_rollover'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.segments = function indicesSegmentsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_segments'\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_segments'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.shardStores = function indicesShardStoresApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_shard_stores'\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_shard_stores'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.shrink = function indicesShrinkApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.target == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: target')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if (params.target != null && (params.index == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, target, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + encodeURIComponent(index) + '/' + '_shrink' + '/' + encodeURIComponent(target)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.simulateIndexTemplate = function indicesSimulateIndexTemplateApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_index_template' + '/' + '_simulate_index' + '/' + encodeURIComponent(name)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.simulateTemplate = function indicesSimulateTemplateApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((name) != null) {\r\n    if (method == null) method = 'POST'\r\n    path = '/' + '_index_template' + '/' + '_simulate' + '/' + encodeURIComponent(name)\r\n  } else {\r\n    if (method == null) method = 'POST'\r\n    path = '/' + '_index_template' + '/' + '_simulate'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.split = function indicesSplitApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.target == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: target')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if (params.target != null && (params.index == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, target, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + encodeURIComponent(index) + '/' + '_split' + '/' + encodeURIComponent(target)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.stats = function indicesStatsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, metric, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null && (metric) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_stats' + '/' + encodeURIComponent(metric)\r\n  } else if ((metric) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_stats' + '/' + encodeURIComponent(metric)\r\n  } else if ((index) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_stats'\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_stats'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.unfreeze = function indicesUnfreezeApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + encodeURIComponent(index) + '/' + '_unfreeze'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.updateAliases = function indicesUpdateAliasesApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_aliases'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.upgrade = function indicesUpgradeApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + encodeURIComponent(index) + '/' + '_upgrade'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIndicesApi.prototype.validateQuery = function indicesValidateQueryApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required url components\r\n  if (params.type != null && (params.index == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, type, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null && (type) != null) {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_validate' + '/' + 'query'\r\n  } else if ((index) != null) {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_validate' + '/' + 'query'\r\n  } else {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + '_validate' + '/' + 'query'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nObject.defineProperties(IndicesApi.prototype, {\r\n  add_block: { get () { return this.addBlock } },\r\n  clear_cache: { get () { return this.clearCache } },\r\n  create_data_stream: { get () { return this.createDataStream } },\r\n  data_streams_stats: { get () { return this.dataStreamsStats } },\r\n  delete_alias: { get () { return this.deleteAlias } },\r\n  delete_data_stream: { get () { return this.deleteDataStream } },\r\n  delete_index_template: { get () { return this.deleteIndexTemplate } },\r\n  delete_template: { get () { return this.deleteTemplate } },\r\n  exists_alias: { get () { return this.existsAlias } },\r\n  exists_index_template: { get () { return this.existsIndexTemplate } },\r\n  exists_template: { get () { return this.existsTemplate } },\r\n  exists_type: { get () { return this.existsType } },\r\n  flush_synced: { get () { return this.flushSynced } },\r\n  get_alias: { get () { return this.getAlias } },\r\n  get_data_stream: { get () { return this.getDataStream } },\r\n  get_field_mapping: { get () { return this.getFieldMapping } },\r\n  get_index_template: { get () { return this.getIndexTemplate } },\r\n  get_mapping: { get () { return this.getMapping } },\r\n  get_settings: { get () { return this.getSettings } },\r\n  get_template: { get () { return this.getTemplate } },\r\n  get_upgrade: { get () { return this.getUpgrade } },\r\n  migrate_to_data_stream: { get () { return this.migrateToDataStream } },\r\n  promote_data_stream: { get () { return this.promoteDataStream } },\r\n  put_alias: { get () { return this.putAlias } },\r\n  put_index_template: { get () { return this.putIndexTemplate } },\r\n  put_mapping: { get () { return this.putMapping } },\r\n  put_settings: { get () { return this.putSettings } },\r\n  put_template: { get () { return this.putTemplate } },\r\n  reload_search_analyzers: { get () { return this.reloadSearchAnalyzers } },\r\n  resolve_index: { get () { return this.resolveIndex } },\r\n  shard_stores: { get () { return this.shardStores } },\r\n  simulate_index_template: { get () { return this.simulateIndexTemplate } },\r\n  simulate_template: { get () { return this.simulateTemplate } },\r\n  update_aliases: { get () { return this.updateAliases } },\r\n  validate_query: { get () { return this.validateQuery } }\r\n})\r\n\r\nmodule.exports = IndicesApi\r\n"]},"metadata":{},"sourceType":"module"}