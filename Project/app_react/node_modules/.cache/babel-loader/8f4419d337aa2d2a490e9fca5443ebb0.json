{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['refresh', 'timeout', 'wait_for_active_shards', 'wait_for_completion', 'requests_per_second', 'scroll', 'slices', 'max_docs', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  waitForActiveShards: 'wait_for_active_shards',\n  waitForCompletion: 'wait_for_completion',\n  requestsPerSecond: 'requests_per_second',\n  maxDocs: 'max_docs',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\nfunction reindexApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_reindex'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n}\n\nmodule.exports = reindexApi;","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/reindex.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","waitForActiveShards","waitForCompletion","requestsPerSecond","maxDocs","errorTrace","filterPath","reindexApi","params","options","callback","body","err","method","querystring","path","request","transport","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;AAEA,MAAM;AAAEA,EAAAA,WAAF;AAAeC,EAAAA,aAAf;AAA8BC,EAAAA,kBAA9B;AAAkDC,EAAAA;AAAlD,IAA0EC,OAAO,CAAC,UAAD,CAAvF;;AACA,MAAMC,mBAAmB,GAAG,CAAC,SAAD,EAAY,SAAZ,EAAuB,wBAAvB,EAAiD,qBAAjD,EAAwE,qBAAxE,EAA+F,QAA/F,EAAyG,QAAzG,EAAmH,UAAnH,EAA+H,QAA/H,EAAyI,OAAzI,EAAkJ,aAAlJ,EAAiK,QAAjK,EAA2K,aAA3K,CAA5B;AACA,MAAMC,SAAS,GAAG;AAAEC,EAAAA,mBAAmB,EAAE,wBAAvB;AAAiDC,EAAAA,iBAAiB,EAAE,qBAApE;AAA2FC,EAAAA,iBAAiB,EAAE,qBAA9G;AAAqIC,EAAAA,OAAO,EAAE,UAA9I;AAA0JC,EAAAA,UAAU,EAAE,aAAtK;AAAqLC,EAAAA,UAAU,EAAE;AAAjM,CAAlB;;AAEA,SAASC,UAAT,CAAqBC,MAArB,EAA6BC,OAA7B,EAAsCC,QAAtC,EAAgD;AAC9C;AAAC,GAACF,MAAD,EAASC,OAAT,EAAkBC,QAAlB,IAA8Bd,kBAAkB,CAACY,MAAD,EAASC,OAAT,EAAkBC,QAAlB,CAAhD,CAD6C,CAG9C;;AACA,MAAIF,MAAM,CAACG,IAAP,IAAe,IAAnB,EAAyB;AACvB,UAAMC,GAAG,GAAG,IAAI,KAAKf,mBAAL,CAAJ,CAA8B,kCAA9B,CAAZ;AACA,WAAOH,WAAW,CAACkB,GAAD,EAAMF,QAAN,CAAlB;AACD;;AAED,MAAI;AAAEG,IAAAA,MAAF;AAAUF,IAAAA,IAAV;AAAgB,OAAGG;AAAnB,MAAmCN,MAAvC;AACAM,EAAAA,WAAW,GAAGnB,aAAa,CAACI,mBAAD,EAAsBC,SAAtB,EAAiCc,WAAjC,CAA3B;AAEA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIF,MAAM,IAAI,IAAd,EAAoBA,MAAM,GAAG,MAAT;AACpBE,EAAAA,IAAI,GAAG,MAAM,UAAb,CAd8C,CAgB9C;;AACA,QAAMC,OAAO,GAAG;AACdH,IAAAA,MADc;AAEdE,IAAAA,IAFc;AAGdJ,IAAAA,IAAI,EAAEA,IAAI,IAAI,EAHA;AAIdG,IAAAA;AAJc,GAAhB;AAOA,SAAO,KAAKG,SAAL,CAAeD,OAAf,CAAuBA,OAAvB,EAAgCP,OAAhC,EAAyCC,QAAzC,CAAP;AACD;;AAEDQ,MAAM,CAACC,OAAP,GAAiBZ,UAAjB","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['refresh', 'timeout', 'wait_for_active_shards', 'wait_for_completion', 'requests_per_second', 'scroll', 'slices', 'max_docs', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\r\nconst snakeCase = { waitForActiveShards: 'wait_for_active_shards', waitForCompletion: 'wait_for_completion', requestsPerSecond: 'requests_per_second', maxDocs: 'max_docs', errorTrace: 'error_trace', filterPath: 'filter_path' }\r\n\r\nfunction reindexApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_reindex'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nmodule.exports = reindexApi\r\n"]},"metadata":{},"sourceType":"module"}