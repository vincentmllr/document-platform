{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['master_timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  masterTimeout: 'master_timeout',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\nfunction getScriptApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_scripts' + '/' + encodeURIComponent(id); // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n}\n\nmodule.exports = getScriptApi;","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/get_script.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","masterTimeout","errorTrace","filterPath","getScriptApi","params","options","callback","id","err","method","body","querystring","path","encodeURIComponent","request","transport","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;AAEA,MAAM;AAAEA,EAAAA,WAAF;AAAeC,EAAAA,aAAf;AAA8BC,EAAAA,kBAA9B;AAAkDC,EAAAA;AAAlD,IAA0EC,OAAO,CAAC,UAAD,CAAvF;;AACA,MAAMC,mBAAmB,GAAG,CAAC,gBAAD,EAAmB,QAAnB,EAA6B,OAA7B,EAAsC,aAAtC,EAAqD,QAArD,EAA+D,aAA/D,CAA5B;AACA,MAAMC,SAAS,GAAG;AAAEC,EAAAA,aAAa,EAAE,gBAAjB;AAAmCC,EAAAA,UAAU,EAAE,aAA/C;AAA8DC,EAAAA,UAAU,EAAE;AAA1E,CAAlB;;AAEA,SAASC,YAAT,CAAuBC,MAAvB,EAA+BC,OAA/B,EAAwCC,QAAxC,EAAkD;AAChD;AAAC,GAACF,MAAD,EAASC,OAAT,EAAkBC,QAAlB,IAA8BX,kBAAkB,CAACS,MAAD,EAASC,OAAT,EAAkBC,QAAlB,CAAhD,CAD+C,CAGhD;;AACA,MAAIF,MAAM,CAACG,EAAP,IAAa,IAAjB,EAAuB;AACrB,UAAMC,GAAG,GAAG,IAAI,KAAKZ,mBAAL,CAAJ,CAA8B,gCAA9B,CAAZ;AACA,WAAOH,WAAW,CAACe,GAAD,EAAMF,QAAN,CAAlB;AACD;;AAED,MAAI;AAAEG,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBH,IAAAA,EAAhB;AAAoB,OAAGI;AAAvB,MAAuCP,MAA3C;AACAO,EAAAA,WAAW,GAAGjB,aAAa,CAACI,mBAAD,EAAsBC,SAAtB,EAAiCY,WAAjC,CAA3B;AAEA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIH,MAAM,IAAI,IAAd,EAAoBA,MAAM,GAAG,KAAT;AACpBG,EAAAA,IAAI,GAAG,MAAM,UAAN,GAAmB,GAAnB,GAAyBC,kBAAkB,CAACN,EAAD,CAAlD,CAdgD,CAgBhD;;AACA,QAAMO,OAAO,GAAG;AACdL,IAAAA,MADc;AAEdG,IAAAA,IAFc;AAGdF,IAAAA,IAAI,EAAE,IAHQ;AAIdC,IAAAA;AAJc,GAAhB;AAOA,SAAO,KAAKI,SAAL,CAAeD,OAAf,CAAuBA,OAAvB,EAAgCT,OAAhC,EAAyCC,QAAzC,CAAP;AACD;;AAEDU,MAAM,CAACC,OAAP,GAAiBd,YAAjB","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['master_timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\r\nconst snakeCase = { masterTimeout: 'master_timeout', errorTrace: 'error_trace', filterPath: 'filter_path' }\r\n\r\nfunction getScriptApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.id == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: id')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_scripts' + '/' + encodeURIComponent(id)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nmodule.exports = getScriptApi\r\n"]},"metadata":{},"sourceType":"module"}