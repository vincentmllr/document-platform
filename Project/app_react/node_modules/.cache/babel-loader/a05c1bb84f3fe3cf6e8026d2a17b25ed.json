{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['analyzer', 'analyze_wildcard', 'default_operator', 'df', 'from', 'ignore_unavailable', 'allow_no_indices', 'conflicts', 'expand_wildcards', 'lenient', 'pipeline', 'preference', 'q', 'routing', 'scroll', 'search_type', 'search_timeout', 'size', 'max_docs', 'sort', '_source', '_source_excludes', '_source_exclude', '_source_includes', '_source_include', 'terminate_after', 'stats', 'version', 'version_type', 'request_cache', 'refresh', 'timeout', 'wait_for_active_shards', 'scroll_size', 'wait_for_completion', 'requests_per_second', 'slices', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  analyzeWildcard: 'analyze_wildcard',\n  defaultOperator: 'default_operator',\n  ignoreUnavailable: 'ignore_unavailable',\n  allowNoIndices: 'allow_no_indices',\n  expandWildcards: 'expand_wildcards',\n  searchType: 'search_type',\n  searchTimeout: 'search_timeout',\n  maxDocs: 'max_docs',\n  _sourceExcludes: '_source_excludes',\n  _sourceExclude: '_source_exclude',\n  _sourceIncludes: '_source_includes',\n  _sourceInclude: '_source_include',\n  terminateAfter: 'terminate_after',\n  versionType: 'version_type',\n  requestCache: 'request_cache',\n  waitForActiveShards: 'wait_for_active_shards',\n  scrollSize: 'scroll_size',\n  waitForCompletion: 'wait_for_completion',\n  requestsPerSecond: 'requests_per_second',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\nfunction updateByQueryApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if (params.type != null && params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    type,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null && type != null) {\n    if (method == null) method = 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_update_by_query';\n  } else {\n    if (method == null) method = 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_update_by_query';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n}\n\nmodule.exports = updateByQueryApi;","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/update_by_query.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","analyzeWildcard","defaultOperator","ignoreUnavailable","allowNoIndices","expandWildcards","searchType","searchTimeout","maxDocs","_sourceExcludes","_sourceExclude","_sourceIncludes","_sourceInclude","terminateAfter","versionType","requestCache","waitForActiveShards","scrollSize","waitForCompletion","requestsPerSecond","errorTrace","filterPath","updateByQueryApi","params","options","callback","index","err","type","method","body","querystring","path","encodeURIComponent","request","transport","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['analyzer', 'analyze_wildcard', 'default_operator', 'df', 'from', 'ignore_unavailable', 'allow_no_indices', 'conflicts', 'expand_wildcards', 'lenient', 'pipeline', 'preference', 'q', 'routing', 'scroll', 'search_type', 'search_timeout', 'size', 'max_docs', 'sort', '_source', '_source_excludes', '_source_exclude', '_source_includes', '_source_include', 'terminate_after', 'stats', 'version', 'version_type', 'request_cache', 'refresh', 'timeout', 'wait_for_active_shards', 'scroll_size', 'wait_for_completion', 'requests_per_second', 'slices', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\r\nconst snakeCase = { analyzeWildcard: 'analyze_wildcard', defaultOperator: 'default_operator', ignoreUnavailable: 'ignore_unavailable', allowNoIndices: 'allow_no_indices', expandWildcards: 'expand_wildcards', searchType: 'search_type', searchTimeout: 'search_timeout', maxDocs: 'max_docs', _sourceExcludes: '_source_excludes', _sourceExclude: '_source_exclude', _sourceIncludes: '_source_includes', _sourceInclude: '_source_include', terminateAfter: 'terminate_after', versionType: 'version_type', requestCache: 'request_cache', waitForActiveShards: 'wait_for_active_shards', scrollSize: 'scroll_size', waitForCompletion: 'wait_for_completion', requestsPerSecond: 'requests_per_second', errorTrace: 'error_trace', filterPath: 'filter_path' }\r\n\r\nfunction updateByQueryApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if (params.type != null && (params.index == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, type, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null && (type) != null) {\r\n    if (method == null) method = 'POST'\r\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_update_by_query'\r\n  } else {\r\n    if (method == null) method = 'POST'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_update_by_query'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nmodule.exports = updateByQueryApi\r\n"]},"metadata":{},"sourceType":"module"}