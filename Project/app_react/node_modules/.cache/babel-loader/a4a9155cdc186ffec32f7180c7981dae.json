{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path', 'format'];\nconst snakeCase = {\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\nfunction SqlApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n_c = SqlApi;\n\nSqlApi.prototype.clearCursor = function sqlClearCursorApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_sql' + '/' + 'close'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSqlApi.prototype.query = function sqlQueryApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = body == null ? 'GET' : 'POST';\n  path = '/' + '_sql'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSqlApi.prototype.translate = function sqlTranslateApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = body == null ? 'GET' : 'POST';\n  path = '/' + '_sql' + '/' + 'translate'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nObject.defineProperties(SqlApi.prototype, {\n  clear_cursor: {\n    get() {\n      return this.clearCursor;\n    }\n\n  }\n});\nmodule.exports = SqlApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"SqlApi\");","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/sql.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","errorTrace","filterPath","SqlApi","transport","ConfigurationError","prototype","clearCursor","sqlClearCursorApi","params","options","callback","body","err","method","querystring","path","request","query","sqlQueryApi","translate","sqlTranslateApi","Object","defineProperties","clear_cursor","get","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path', 'format']\r\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path' }\r\n\r\nfunction SqlApi (transport, ConfigurationError) {\r\n  this.transport = transport\r\n  this[kConfigurationError] = ConfigurationError\r\n}\r\n\r\nSqlApi.prototype.clearCursor = function sqlClearCursorApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_sql' + '/' + 'close'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSqlApi.prototype.query = function sqlQueryApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = body == null ? 'GET' : 'POST'\r\n  path = '/' + '_sql'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSqlApi.prototype.translate = function sqlTranslateApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = body == null ? 'GET' : 'POST'\r\n  path = '/' + '_sql' + '/' + 'translate'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nObject.defineProperties(SqlApi.prototype, {\r\n  clear_cursor: { get () { return this.clearCursor } }\r\n})\r\n\r\nmodule.exports = SqlApi\r\n"]},"metadata":{},"sourceType":"module"}