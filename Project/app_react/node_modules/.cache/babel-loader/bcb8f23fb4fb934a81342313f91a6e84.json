{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n\nclass ElasticsearchClientError extends Error {\n  constructor(message) {\n    super(message);\n    this.name = 'ElasticsearchClientError';\n  }\n\n}\n\nclass TimeoutError extends ElasticsearchClientError {\n  constructor(message, meta) {\n    super(message);\n    Error.captureStackTrace(this, TimeoutError);\n    this.name = 'TimeoutError';\n    this.message = message || 'Timeout Error';\n    this.meta = meta;\n  }\n\n}\n\nclass ConnectionError extends ElasticsearchClientError {\n  constructor(message, meta) {\n    super(message);\n    Error.captureStackTrace(this, ConnectionError);\n    this.name = 'ConnectionError';\n    this.message = message || 'Connection Error';\n    this.meta = meta;\n  }\n\n}\n\nclass NoLivingConnectionsError extends ElasticsearchClientError {\n  constructor(message, meta) {\n    super(message);\n    Error.captureStackTrace(this, NoLivingConnectionsError);\n    this.name = 'NoLivingConnectionsError';\n    this.message = message || 'Given the configuration, the ConnectionPool was not able to find a usable Connection for this request.';\n    this.meta = meta;\n  }\n\n}\n\nclass SerializationError extends ElasticsearchClientError {\n  constructor(message, data) {\n    super(message, data);\n    Error.captureStackTrace(this, SerializationError);\n    this.name = 'SerializationError';\n    this.message = message || 'Serialization Error';\n    this.data = data;\n  }\n\n}\n\nclass DeserializationError extends ElasticsearchClientError {\n  constructor(message, data) {\n    super(message, data);\n    Error.captureStackTrace(this, DeserializationError);\n    this.name = 'DeserializationError';\n    this.message = message || 'Deserialization Error';\n    this.data = data;\n  }\n\n}\n\nclass ConfigurationError extends ElasticsearchClientError {\n  constructor(message) {\n    super(message);\n    Error.captureStackTrace(this, ConfigurationError);\n    this.name = 'ConfigurationError';\n    this.message = message || 'Configuration Error';\n  }\n\n}\n\nclass ResponseError extends ElasticsearchClientError {\n  constructor(meta) {\n    super('Response Error');\n    Error.captureStackTrace(this, ResponseError);\n    this.name = 'ResponseError';\n\n    if (meta.body && meta.body.error && meta.body.error.type) {\n      if (Array.isArray(meta.body.error.root_cause)) {\n        this.message = meta.body.error.type + ': ';\n        this.message += meta.body.error.root_cause.map(entry => `[${entry.type}] Reason: ${entry.reason}`).join('; ');\n      } else {\n        this.message = meta.body.error.type;\n      }\n    } else {\n      this.message = 'Response Error';\n    }\n\n    this.meta = meta;\n  }\n\n  get body() {\n    return this.meta.body;\n  }\n\n  get statusCode() {\n    if (this.meta.body && typeof this.meta.body.status === 'number') {\n      return this.meta.body.status;\n    }\n\n    return this.meta.statusCode;\n  }\n\n  get headers() {\n    return this.meta.headers;\n  }\n\n  toString() {\n    return JSON.stringify(this.meta.body);\n  }\n\n}\n\nclass RequestAbortedError extends ElasticsearchClientError {\n  constructor(message, meta) {\n    super(message);\n    Error.captureStackTrace(this, RequestAbortedError);\n    this.name = 'RequestAbortedError';\n    this.message = message || 'Request aborted';\n    this.meta = meta;\n  }\n\n}\n\nmodule.exports = {\n  ElasticsearchClientError,\n  TimeoutError,\n  ConnectionError,\n  NoLivingConnectionsError,\n  SerializationError,\n  DeserializationError,\n  ConfigurationError,\n  ResponseError,\n  RequestAbortedError\n};","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/lib/errors.js"],"names":["ElasticsearchClientError","Error","constructor","message","name","TimeoutError","meta","captureStackTrace","ConnectionError","NoLivingConnectionsError","SerializationError","data","DeserializationError","ConfigurationError","ResponseError","body","error","type","Array","isArray","root_cause","map","entry","reason","join","statusCode","status","headers","toString","JSON","stringify","RequestAbortedError","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\nclass ElasticsearchClientError extends Error {\r\n  constructor (message) {\r\n    super(message)\r\n    this.name = 'ElasticsearchClientError'\r\n  }\r\n}\r\n\r\nclass TimeoutError extends ElasticsearchClientError {\r\n  constructor (message, meta) {\r\n    super(message)\r\n    Error.captureStackTrace(this, TimeoutError)\r\n    this.name = 'TimeoutError'\r\n    this.message = message || 'Timeout Error'\r\n    this.meta = meta\r\n  }\r\n}\r\n\r\nclass ConnectionError extends ElasticsearchClientError {\r\n  constructor (message, meta) {\r\n    super(message)\r\n    Error.captureStackTrace(this, ConnectionError)\r\n    this.name = 'ConnectionError'\r\n    this.message = message || 'Connection Error'\r\n    this.meta = meta\r\n  }\r\n}\r\n\r\nclass NoLivingConnectionsError extends ElasticsearchClientError {\r\n  constructor (message, meta) {\r\n    super(message)\r\n    Error.captureStackTrace(this, NoLivingConnectionsError)\r\n    this.name = 'NoLivingConnectionsError'\r\n    this.message = message || 'Given the configuration, the ConnectionPool was not able to find a usable Connection for this request.'\r\n    this.meta = meta\r\n  }\r\n}\r\n\r\nclass SerializationError extends ElasticsearchClientError {\r\n  constructor (message, data) {\r\n    super(message, data)\r\n    Error.captureStackTrace(this, SerializationError)\r\n    this.name = 'SerializationError'\r\n    this.message = message || 'Serialization Error'\r\n    this.data = data\r\n  }\r\n}\r\n\r\nclass DeserializationError extends ElasticsearchClientError {\r\n  constructor (message, data) {\r\n    super(message, data)\r\n    Error.captureStackTrace(this, DeserializationError)\r\n    this.name = 'DeserializationError'\r\n    this.message = message || 'Deserialization Error'\r\n    this.data = data\r\n  }\r\n}\r\n\r\nclass ConfigurationError extends ElasticsearchClientError {\r\n  constructor (message) {\r\n    super(message)\r\n    Error.captureStackTrace(this, ConfigurationError)\r\n    this.name = 'ConfigurationError'\r\n    this.message = message || 'Configuration Error'\r\n  }\r\n}\r\n\r\nclass ResponseError extends ElasticsearchClientError {\r\n  constructor (meta) {\r\n    super('Response Error')\r\n    Error.captureStackTrace(this, ResponseError)\r\n    this.name = 'ResponseError'\r\n    if (meta.body && meta.body.error && meta.body.error.type) {\r\n      if (Array.isArray(meta.body.error.root_cause)) {\r\n        this.message = meta.body.error.type + ': '\r\n        this.message += meta.body.error.root_cause.map(entry => `[${entry.type}] Reason: ${entry.reason}`).join('; ')\r\n      } else {\r\n        this.message = meta.body.error.type\r\n      }\r\n    } else {\r\n      this.message = 'Response Error'\r\n    }\r\n    this.meta = meta\r\n  }\r\n\r\n  get body () {\r\n    return this.meta.body\r\n  }\r\n\r\n  get statusCode () {\r\n    if (this.meta.body && typeof this.meta.body.status === 'number') {\r\n      return this.meta.body.status\r\n    }\r\n    return this.meta.statusCode\r\n  }\r\n\r\n  get headers () {\r\n    return this.meta.headers\r\n  }\r\n\r\n  toString () {\r\n    return JSON.stringify(this.meta.body)\r\n  }\r\n}\r\n\r\nclass RequestAbortedError extends ElasticsearchClientError {\r\n  constructor (message, meta) {\r\n    super(message)\r\n    Error.captureStackTrace(this, RequestAbortedError)\r\n    this.name = 'RequestAbortedError'\r\n    this.message = message || 'Request aborted'\r\n    this.meta = meta\r\n  }\r\n}\r\n\r\nmodule.exports = {\r\n  ElasticsearchClientError,\r\n  TimeoutError,\r\n  ConnectionError,\r\n  NoLivingConnectionsError,\r\n  SerializationError,\r\n  DeserializationError,\r\n  ConfigurationError,\r\n  ResponseError,\r\n  RequestAbortedError\r\n}\r\n"]},"metadata":{},"sourceType":"module"}