{"ast":null,"code":"//const fs = require('fs');\n//Const solc = require('solc');\n//const Web3 = require('web3');\nvar web3;\n\nasync function connectMetaMask() {\n  if (window.ethereum) {\n    web3 = new Web3(window.ethereum);\n\n    try {\n      await window.ethereum.request({\n        method: 'eth_requestAccounts'\n      });\n      var accounts = await web3.eth.getAccounts();\n      return accounts;\n    } catch (e) {// User has denied account access to DApp...\n    }\n  }\n}\n/*Compile Contract\r\nasync function compileContract(filename, contractname){\r\n   const source = fs.readFileSync(\"/usr/src/app/smart_contracts/\"+filename, 'utf8'); //Datei muss im Ordner Smart_contracts liegen\r\n   console.log(\"compile Contract \"+contractname);\r\n   const tempFile = await JSON.parse(solc.compile(JSON.stringify(\r\n\r\n    {\r\n        language: 'Solidity',\r\n        sources: {\r\n           [filename]: {\r\n              content: source,\r\n           }\r\n        },\r\n        settings: {\r\n           outputSelection: {\r\n              '*': {\r\n                 '*': ['*'],\r\n              },\r\n           },\r\n        },\r\n     }\r\n\r\n   )));\r\n   const contractFile = await tempFile.contracts[filename][contractname];\r\n\r\n   return contractFile;\r\n}*/\n\n/*\r\n   -- Deploy Contract --\r\n*/\n\n\nconst deploy = async (bytecode, abi, args, account) => {\n  console.log(\"Attempting to deploy Contract\"); // Create Contract Instance\n\n  const contract = await new web3.eth.Contract(abi).deploy({\n    data: bytecode,\n    arguments: args\n  }).send({\n    gas: 4712388,\n    from: account\n  });\n  return contract;\n};\n\nmodule.exports = {\n  connectMetaMask,\n  //compileContract,\n  deploy,\n  web3\n};","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/ganache.js"],"names":["web3","connectMetaMask","window","ethereum","Web3","request","method","accounts","eth","getAccounts","e","deploy","bytecode","abi","args","account","console","log","contract","Contract","data","arguments","send","gas","from","module","exports"],"mappings":"AAAA;AACA;AACA;AACA,IAAIA,IAAJ;;AAEA,eAAeC,eAAf,GAAgC;AAC7B,MAAIC,MAAM,CAACC,QAAX,EAAqB;AAClBH,IAAAA,IAAI,GAAG,IAAII,IAAJ,CAASF,MAAM,CAACC,QAAhB,CAAP;;AACA,QAAI;AACD,YAAMD,MAAM,CAACC,QAAP,CAAgBE,OAAhB,CAAwB;AAACC,QAAAA,MAAM,EAAE;AAAT,OAAxB,CAAN;AACA,UAAIC,QAAQ,GAAG,MAAMP,IAAI,CAACQ,GAAL,CAASC,WAAT,EAArB;AACA,aAAOF,QAAP;AACF,KAJD,CAIE,OAAMG,CAAN,EAAS,CACR;AACF;AACH;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;;AACA,MAAMC,MAAM,GAAG,OAAOC,QAAP,EAAiBC,GAAjB,EAAsBC,IAAtB,EAA4BC,OAA5B,KAAwC;AAEpDC,EAAAA,OAAO,CAACC,GAAR,CAAY,+BAAZ,EAFoD,CAIpD;;AACA,QAAMC,QAAQ,GAAG,MAAM,IAAIlB,IAAI,CAACQ,GAAL,CAASW,QAAb,CAAsBN,GAAtB,EAA2BF,MAA3B,CAAkC;AACtDS,IAAAA,IAAI,EAAER,QADgD;AAEtDS,IAAAA,SAAS,EAAEP;AAF2C,GAAlC,EAGpBQ,IAHoB,CAGf;AAAEC,IAAAA,GAAG,EAAE,OAAP;AAAgBC,IAAAA,IAAI,EAAET;AAAtB,GAHe,CAAvB;AAKA,SAAOG,QAAP;AACF,CAXD;;AAeAO,MAAM,CAACC,OAAP,GAAiB;AACdzB,EAAAA,eADc;AAEd;AACAU,EAAAA,MAHc;AAIdX,EAAAA;AAJc,CAAjB","sourcesContent":["//const fs = require('fs');\r\n//Const solc = require('solc');\r\n//const Web3 = require('web3');\r\nvar web3;\r\n\r\nasync function connectMetaMask(){\r\n   if (window.ethereum) {\r\n      web3 = new Web3(window.ethereum);\r\n      try {\r\n         await window.ethereum.request({method: 'eth_requestAccounts'});\r\n         var accounts = await web3.eth.getAccounts();\r\n         return accounts;\r\n      } catch(e) {\r\n         // User has denied account access to DApp...\r\n      }\r\n   }\r\n}\r\n\r\n/*Compile Contract\r\nasync function compileContract(filename, contractname){\r\n   const source = fs.readFileSync(\"/usr/src/app/smart_contracts/\"+filename, 'utf8'); //Datei muss im Ordner Smart_contracts liegen\r\n   console.log(\"compile Contract \"+contractname);\r\n   const tempFile = await JSON.parse(solc.compile(JSON.stringify(\r\n\r\n    {\r\n        language: 'Solidity',\r\n        sources: {\r\n           [filename]: {\r\n              content: source,\r\n           }\r\n        },\r\n        settings: {\r\n           outputSelection: {\r\n              '*': {\r\n                 '*': ['*'],\r\n              },\r\n           },\r\n        },\r\n     }\r\n\r\n   )));\r\n   const contractFile = await tempFile.contracts[filename][contractname];\r\n\r\n   return contractFile;\r\n}*/\r\n\r\n/*\r\n   -- Deploy Contract --\r\n*/\r\nconst deploy = async (bytecode, abi, args, account) => {\r\n\r\n   console.log(\"Attempting to deploy Contract\");\r\n\r\n   // Create Contract Instance\r\n   const contract = await new web3.eth.Contract(abi).deploy({\r\n      data: bytecode,\r\n      arguments: args,\r\n   }).send({ gas: 4712388, from: account });\r\n   \r\n   return contract;\r\n};\r\n\r\n\r\n\r\nmodule.exports = {\r\n   connectMetaMask, \r\n   //compileContract,\r\n   deploy,\r\n   web3\r\n};\r\n\r\n"]},"metadata":{},"sourceType":"module"}