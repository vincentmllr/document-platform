{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['allow_no_match', 'allow_no_jobs', 'force', 'timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'requests_per_second', 'allow_no_forecasts', 'wait_for_completion', 'lines_to_sample', 'line_merge_size_limit', 'charset', 'format', 'has_header_row', 'column_names', 'delimiter', 'quote', 'should_trim_fields', 'grok_pattern', 'timestamp_field', 'timestamp_format', 'explain', 'calc_interim', 'start', 'end', 'advance_time', 'skip_time', 'duration', 'expires_in', 'max_model_memory', 'expand', 'exclude_interim', 'from', 'size', 'anomaly_score', 'sort', 'desc', 'job_id', 'partition_field_value', 'exclude_generated', 'verbose', 'allow_no_datafeeds', 'influencer_score', 'top_n', 'bucket_span', 'overall_score', 'record_score', 'include', 'include_model_definition', 'decompress_definition', 'tags', 'reset_start', 'reset_end', 'ignore_unavailable', 'allow_no_indices', 'ignore_throttled', 'expand_wildcards', 'reassign', 'delete_intervening_results', 'enabled'];\nconst snakeCase = {\n  allowNoMatch: 'allow_no_match',\n  allowNoJobs: 'allow_no_jobs',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n  requestsPerSecond: 'requests_per_second',\n  allowNoForecasts: 'allow_no_forecasts',\n  waitForCompletion: 'wait_for_completion',\n  linesToSample: 'lines_to_sample',\n  lineMergeSizeLimit: 'line_merge_size_limit',\n  hasHeaderRow: 'has_header_row',\n  columnNames: 'column_names',\n  shouldTrimFields: 'should_trim_fields',\n  grokPattern: 'grok_pattern',\n  timestampField: 'timestamp_field',\n  timestampFormat: 'timestamp_format',\n  calcInterim: 'calc_interim',\n  advanceTime: 'advance_time',\n  skipTime: 'skip_time',\n  expiresIn: 'expires_in',\n  maxModelMemory: 'max_model_memory',\n  excludeInterim: 'exclude_interim',\n  anomalyScore: 'anomaly_score',\n  jobId: 'job_id',\n  partitionFieldValue: 'partition_field_value',\n  excludeGenerated: 'exclude_generated',\n  allowNoDatafeeds: 'allow_no_datafeeds',\n  influencerScore: 'influencer_score',\n  topN: 'top_n',\n  bucketSpan: 'bucket_span',\n  overallScore: 'overall_score',\n  recordScore: 'record_score',\n  includeModelDefinition: 'include_model_definition',\n  decompressDefinition: 'decompress_definition',\n  resetStart: 'reset_start',\n  resetEnd: 'reset_end',\n  ignoreUnavailable: 'ignore_unavailable',\n  allowNoIndices: 'allow_no_indices',\n  ignoreThrottled: 'ignore_throttled',\n  expandWildcards: 'expand_wildcards',\n  deleteInterveningResults: 'delete_intervening_results'\n};\n\nfunction MlApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n_c = MlApi;\n\nMlApi.prototype.closeJob = function mlCloseJobApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    jobId,\n    job_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_close'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.deleteCalendar = function mlDeleteCalendarApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.calendar_id == null && params.calendarId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: calendar_id or calendarId');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    calendarId,\n    calendar_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_ml' + '/' + 'calendars' + '/' + encodeURIComponent(calendar_id || calendarId); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.deleteCalendarEvent = function mlDeleteCalendarEventApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.calendar_id == null && params.calendarId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: calendar_id or calendarId');\n    return handleError(err, callback);\n  }\n\n  if (params.event_id == null && params.eventId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: event_id or eventId');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if ((params.event_id != null || params.eventId != null) && params.calendar_id == null && params.calendarId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: calendar_id');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    calendarId,\n    calendar_id,\n    eventId,\n    event_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_ml' + '/' + 'calendars' + '/' + encodeURIComponent(calendar_id || calendarId) + '/' + 'events' + '/' + encodeURIComponent(event_id || eventId); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.deleteCalendarJob = function mlDeleteCalendarJobApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.calendar_id == null && params.calendarId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: calendar_id or calendarId');\n    return handleError(err, callback);\n  }\n\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if ((params.job_id != null || params.jobId != null) && params.calendar_id == null && params.calendarId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: calendar_id');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    calendarId,\n    calendar_id,\n    jobId,\n    job_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_ml' + '/' + 'calendars' + '/' + encodeURIComponent(calendar_id || calendarId) + '/' + 'jobs' + '/' + encodeURIComponent(job_id || jobId); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.deleteDataFrameAnalytics = function mlDeleteDataFrameAnalyticsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.deleteDatafeed = function mlDeleteDatafeedApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.datafeed_id == null && params.datafeedId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: datafeed_id or datafeedId');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    datafeedId,\n    datafeed_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_ml' + '/' + 'datafeeds' + '/' + encodeURIComponent(datafeed_id || datafeedId); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.deleteExpiredData = function mlDeleteExpiredDataApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    jobId,\n    job_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if ((job_id || jobId) != null) {\n    if (method == null) method = 'DELETE';\n    path = '/' + '_ml' + '/' + '_delete_expired_data' + '/' + encodeURIComponent(job_id || jobId);\n  } else {\n    if (method == null) method = 'DELETE';\n    path = '/' + '_ml' + '/' + '_delete_expired_data';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.deleteFilter = function mlDeleteFilterApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.filter_id == null && params.filterId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: filter_id or filterId');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    filterId,\n    filter_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_ml' + '/' + 'filters' + '/' + encodeURIComponent(filter_id || filterId); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.deleteForecast = function mlDeleteForecastApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if ((params.forecast_id != null || params.forecastId != null) && params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: job_id');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    jobId,\n    job_id,\n    forecastId,\n    forecast_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if ((job_id || jobId) != null && (forecast_id || forecastId) != null) {\n    if (method == null) method = 'DELETE';\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_forecast' + '/' + encodeURIComponent(forecast_id || forecastId);\n  } else {\n    if (method == null) method = 'DELETE';\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_forecast';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.deleteJob = function mlDeleteJobApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    jobId,\n    job_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.deleteModelSnapshot = function mlDeleteModelSnapshotApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId');\n    return handleError(err, callback);\n  }\n\n  if (params.snapshot_id == null && params.snapshotId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot_id or snapshotId');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if ((params.snapshot_id != null || params.snapshotId != null) && params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: job_id');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    jobId,\n    job_id,\n    snapshotId,\n    snapshot_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'model_snapshots' + '/' + encodeURIComponent(snapshot_id || snapshotId); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.deleteTrainedModel = function mlDeleteTrainedModelApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.model_id == null && params.modelId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: model_id or modelId');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    modelId,\n    model_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_ml' + '/' + 'trained_models' + '/' + encodeURIComponent(model_id || modelId); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.deleteTrainedModelAlias = function mlDeleteTrainedModelAliasApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.model_alias == null && params.modelAlias == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: model_alias or modelAlias');\n    return handleError(err, callback);\n  }\n\n  if (params.model_id == null && params.modelId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: model_id or modelId');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if ((params.model_alias != null || params.modelAlias != null) && params.model_id == null && params.modelId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: model_id');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    modelAlias,\n    model_alias,\n    modelId,\n    model_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_ml' + '/' + 'trained_models' + '/' + encodeURIComponent(model_id || modelId) + '/' + 'model_aliases' + '/' + encodeURIComponent(model_alias || modelAlias); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.estimateModelMemory = function mlEstimateModelMemoryApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + '_estimate_model_memory'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.evaluateDataFrame = function mlEvaluateDataFrameApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ml' + '/' + 'data_frame' + '/' + '_evaluate'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.explainDataFrameAnalytics = function mlExplainDataFrameAnalyticsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (id != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id) + '/' + '_explain';\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + '_explain';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.findFileStructure = function mlFindFileStructureApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ml' + '/' + 'find_file_structure'; // build request object\n\n  const request = {\n    method,\n    path,\n    bulkBody: body,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.flushJob = function mlFlushJobApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    jobId,\n    job_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_flush'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.forecast = function mlForecastApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    jobId,\n    job_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_forecast'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.getBuckets = function mlGetBucketsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if (params.timestamp != null && params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: job_id');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    jobId,\n    job_id,\n    timestamp,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if ((job_id || jobId) != null && timestamp != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'results' + '/' + 'buckets' + '/' + encodeURIComponent(timestamp);\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'results' + '/' + 'buckets';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.getCalendarEvents = function mlGetCalendarEventsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.calendar_id == null && params.calendarId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: calendar_id or calendarId');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    calendarId,\n    calendar_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_ml' + '/' + 'calendars' + '/' + encodeURIComponent(calendar_id || calendarId) + '/' + 'events'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.getCalendars = function mlGetCalendarsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    calendarId,\n    calendar_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if ((calendar_id || calendarId) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_ml' + '/' + 'calendars' + '/' + encodeURIComponent(calendar_id || calendarId);\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_ml' + '/' + 'calendars';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.getCategories = function mlGetCategoriesApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if ((params.category_id != null || params.categoryId != null) && params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: job_id');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    jobId,\n    job_id,\n    categoryId,\n    category_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if ((job_id || jobId) != null && (category_id || categoryId) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'results' + '/' + 'categories' + '/' + encodeURIComponent(category_id || categoryId);\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'results' + '/' + 'categories';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.getDataFrameAnalytics = function mlGetDataFrameAnalyticsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (id != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.getDataFrameAnalyticsStats = function mlGetDataFrameAnalyticsStatsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (id != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id) + '/' + '_stats';\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + '_stats';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.getDatafeedStats = function mlGetDatafeedStatsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    datafeedId,\n    datafeed_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if ((datafeed_id || datafeedId) != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_ml' + '/' + 'datafeeds' + '/' + encodeURIComponent(datafeed_id || datafeedId) + '/' + '_stats';\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_ml' + '/' + 'datafeeds' + '/' + '_stats';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.getDatafeeds = function mlGetDatafeedsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    datafeedId,\n    datafeed_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if ((datafeed_id || datafeedId) != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_ml' + '/' + 'datafeeds' + '/' + encodeURIComponent(datafeed_id || datafeedId);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_ml' + '/' + 'datafeeds';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.getFilters = function mlGetFiltersApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    filterId,\n    filter_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if ((filter_id || filterId) != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_ml' + '/' + 'filters' + '/' + encodeURIComponent(filter_id || filterId);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_ml' + '/' + 'filters';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.getInfluencers = function mlGetInfluencersApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    jobId,\n    job_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = body == null ? 'GET' : 'POST';\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'results' + '/' + 'influencers'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.getJobStats = function mlGetJobStatsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    jobId,\n    job_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if ((job_id || jobId) != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_stats';\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + '_stats';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.getJobs = function mlGetJobsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    jobId,\n    job_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if ((job_id || jobId) != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_ml' + '/' + 'anomaly_detectors';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.getModelSnapshots = function mlGetModelSnapshotsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if ((params.snapshot_id != null || params.snapshotId != null) && params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: job_id');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    jobId,\n    job_id,\n    snapshotId,\n    snapshot_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if ((job_id || jobId) != null && (snapshot_id || snapshotId) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'model_snapshots' + '/' + encodeURIComponent(snapshot_id || snapshotId);\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'model_snapshots';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.getOverallBuckets = function mlGetOverallBucketsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    jobId,\n    job_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = body == null ? 'GET' : 'POST';\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'results' + '/' + 'overall_buckets'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.getRecords = function mlGetRecordsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    jobId,\n    job_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = body == null ? 'GET' : 'POST';\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'results' + '/' + 'records'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.getTrainedModels = function mlGetTrainedModelsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    modelId,\n    model_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if ((model_id || modelId) != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_ml' + '/' + 'trained_models' + '/' + encodeURIComponent(model_id || modelId);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_ml' + '/' + 'trained_models';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.getTrainedModelsStats = function mlGetTrainedModelsStatsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    modelId,\n    model_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if ((model_id || modelId) != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_ml' + '/' + 'trained_models' + '/' + encodeURIComponent(model_id || modelId) + '/' + '_stats';\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_ml' + '/' + 'trained_models' + '/' + '_stats';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.info = function mlInfoApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_ml' + '/' + 'info'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.openJob = function mlOpenJobApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    jobId,\n    job_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_open'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.postCalendarEvents = function mlPostCalendarEventsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.calendar_id == null && params.calendarId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: calendar_id or calendarId');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    calendarId,\n    calendar_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ml' + '/' + 'calendars' + '/' + encodeURIComponent(calendar_id || calendarId) + '/' + 'events'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.postData = function mlPostDataApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    jobId,\n    job_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_data'; // build request object\n\n  const request = {\n    method,\n    path,\n    bulkBody: body,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.previewDataFrameAnalytics = function mlPreviewDataFrameAnalyticsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (id != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id) + '/' + '_preview';\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + '_preview';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.previewDatafeed = function mlPreviewDatafeedApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    datafeedId,\n    datafeed_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if ((datafeed_id || datafeedId) != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_ml' + '/' + 'datafeeds' + '/' + encodeURIComponent(datafeed_id || datafeedId) + '/' + '_preview';\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_ml' + '/' + 'datafeeds' + '/' + '_preview';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.putCalendar = function mlPutCalendarApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.calendar_id == null && params.calendarId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: calendar_id or calendarId');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    calendarId,\n    calendar_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_ml' + '/' + 'calendars' + '/' + encodeURIComponent(calendar_id || calendarId); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.putCalendarJob = function mlPutCalendarJobApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.calendar_id == null && params.calendarId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: calendar_id or calendarId');\n    return handleError(err, callback);\n  }\n\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if ((params.job_id != null || params.jobId != null) && params.calendar_id == null && params.calendarId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: calendar_id');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    calendarId,\n    calendar_id,\n    jobId,\n    job_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_ml' + '/' + 'calendars' + '/' + encodeURIComponent(calendar_id || calendarId) + '/' + 'jobs' + '/' + encodeURIComponent(job_id || jobId); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.putDataFrameAnalytics = function mlPutDataFrameAnalyticsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.putDatafeed = function mlPutDatafeedApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.datafeed_id == null && params.datafeedId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: datafeed_id or datafeedId');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    datafeedId,\n    datafeed_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_ml' + '/' + 'datafeeds' + '/' + encodeURIComponent(datafeed_id || datafeedId); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.putFilter = function mlPutFilterApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.filter_id == null && params.filterId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: filter_id or filterId');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    filterId,\n    filter_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_ml' + '/' + 'filters' + '/' + encodeURIComponent(filter_id || filterId); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.putJob = function mlPutJobApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    jobId,\n    job_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.putTrainedModel = function mlPutTrainedModelApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.model_id == null && params.modelId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: model_id or modelId');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    modelId,\n    model_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_ml' + '/' + 'trained_models' + '/' + encodeURIComponent(model_id || modelId); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.putTrainedModelAlias = function mlPutTrainedModelAliasApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.model_alias == null && params.modelAlias == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: model_alias or modelAlias');\n    return handleError(err, callback);\n  }\n\n  if (params.model_id == null && params.modelId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: model_id or modelId');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if ((params.model_alias != null || params.modelAlias != null) && params.model_id == null && params.modelId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: model_id');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    modelAlias,\n    model_alias,\n    modelId,\n    model_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_ml' + '/' + 'trained_models' + '/' + encodeURIComponent(model_id || modelId) + '/' + 'model_aliases' + '/' + encodeURIComponent(model_alias || modelAlias); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.revertModelSnapshot = function mlRevertModelSnapshotApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId');\n    return handleError(err, callback);\n  }\n\n  if (params.snapshot_id == null && params.snapshotId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot_id or snapshotId');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if ((params.snapshot_id != null || params.snapshotId != null) && params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: job_id');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    jobId,\n    job_id,\n    snapshotId,\n    snapshot_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'model_snapshots' + '/' + encodeURIComponent(snapshot_id || snapshotId) + '/' + '_revert'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.setUpgradeMode = function mlSetUpgradeModeApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ml' + '/' + 'set_upgrade_mode'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.startDataFrameAnalytics = function mlStartDataFrameAnalyticsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id) + '/' + '_start'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.startDatafeed = function mlStartDatafeedApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.datafeed_id == null && params.datafeedId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: datafeed_id or datafeedId');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    datafeedId,\n    datafeed_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ml' + '/' + 'datafeeds' + '/' + encodeURIComponent(datafeed_id || datafeedId) + '/' + '_start'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.stopDataFrameAnalytics = function mlStopDataFrameAnalyticsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id) + '/' + '_stop'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.stopDatafeed = function mlStopDatafeedApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.datafeed_id == null && params.datafeedId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: datafeed_id or datafeedId');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    datafeedId,\n    datafeed_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ml' + '/' + 'datafeeds' + '/' + encodeURIComponent(datafeed_id || datafeedId) + '/' + '_stop'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.updateDataFrameAnalytics = function mlUpdateDataFrameAnalyticsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id) + '/' + '_update'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.updateDatafeed = function mlUpdateDatafeedApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.datafeed_id == null && params.datafeedId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: datafeed_id or datafeedId');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    datafeedId,\n    datafeed_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ml' + '/' + 'datafeeds' + '/' + encodeURIComponent(datafeed_id || datafeedId) + '/' + '_update'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.updateFilter = function mlUpdateFilterApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.filter_id == null && params.filterId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: filter_id or filterId');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    filterId,\n    filter_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ml' + '/' + 'filters' + '/' + encodeURIComponent(filter_id || filterId) + '/' + '_update'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.updateJob = function mlUpdateJobApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    jobId,\n    job_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_update'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.updateModelSnapshot = function mlUpdateModelSnapshotApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId');\n    return handleError(err, callback);\n  }\n\n  if (params.snapshot_id == null && params.snapshotId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot_id or snapshotId');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if ((params.snapshot_id != null || params.snapshotId != null) && params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: job_id');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    jobId,\n    job_id,\n    snapshotId,\n    snapshot_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'model_snapshots' + '/' + encodeURIComponent(snapshot_id || snapshotId) + '/' + '_update'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.upgradeJobSnapshot = function mlUpgradeJobSnapshotApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId');\n    return handleError(err, callback);\n  }\n\n  if (params.snapshot_id == null && params.snapshotId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot_id or snapshotId');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if ((params.snapshot_id != null || params.snapshotId != null) && params.job_id == null && params.jobId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: job_id');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    jobId,\n    job_id,\n    snapshotId,\n    snapshot_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'model_snapshots' + '/' + encodeURIComponent(snapshot_id || snapshotId) + '/' + '_upgrade'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.validate = function mlValidateApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + '_validate'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nMlApi.prototype.validateDetector = function mlValidateDetectorApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + '_validate' + '/' + 'detector'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nObject.defineProperties(MlApi.prototype, {\n  close_job: {\n    get() {\n      return this.closeJob;\n    }\n\n  },\n  delete_calendar: {\n    get() {\n      return this.deleteCalendar;\n    }\n\n  },\n  delete_calendar_event: {\n    get() {\n      return this.deleteCalendarEvent;\n    }\n\n  },\n  delete_calendar_job: {\n    get() {\n      return this.deleteCalendarJob;\n    }\n\n  },\n  delete_data_frame_analytics: {\n    get() {\n      return this.deleteDataFrameAnalytics;\n    }\n\n  },\n  delete_datafeed: {\n    get() {\n      return this.deleteDatafeed;\n    }\n\n  },\n  delete_expired_data: {\n    get() {\n      return this.deleteExpiredData;\n    }\n\n  },\n  delete_filter: {\n    get() {\n      return this.deleteFilter;\n    }\n\n  },\n  delete_forecast: {\n    get() {\n      return this.deleteForecast;\n    }\n\n  },\n  delete_job: {\n    get() {\n      return this.deleteJob;\n    }\n\n  },\n  delete_model_snapshot: {\n    get() {\n      return this.deleteModelSnapshot;\n    }\n\n  },\n  delete_trained_model: {\n    get() {\n      return this.deleteTrainedModel;\n    }\n\n  },\n  delete_trained_model_alias: {\n    get() {\n      return this.deleteTrainedModelAlias;\n    }\n\n  },\n  estimate_model_memory: {\n    get() {\n      return this.estimateModelMemory;\n    }\n\n  },\n  evaluate_data_frame: {\n    get() {\n      return this.evaluateDataFrame;\n    }\n\n  },\n  explain_data_frame_analytics: {\n    get() {\n      return this.explainDataFrameAnalytics;\n    }\n\n  },\n  find_file_structure: {\n    get() {\n      return this.findFileStructure;\n    }\n\n  },\n  flush_job: {\n    get() {\n      return this.flushJob;\n    }\n\n  },\n  get_buckets: {\n    get() {\n      return this.getBuckets;\n    }\n\n  },\n  get_calendar_events: {\n    get() {\n      return this.getCalendarEvents;\n    }\n\n  },\n  get_calendars: {\n    get() {\n      return this.getCalendars;\n    }\n\n  },\n  get_categories: {\n    get() {\n      return this.getCategories;\n    }\n\n  },\n  get_data_frame_analytics: {\n    get() {\n      return this.getDataFrameAnalytics;\n    }\n\n  },\n  get_data_frame_analytics_stats: {\n    get() {\n      return this.getDataFrameAnalyticsStats;\n    }\n\n  },\n  get_datafeed_stats: {\n    get() {\n      return this.getDatafeedStats;\n    }\n\n  },\n  get_datafeeds: {\n    get() {\n      return this.getDatafeeds;\n    }\n\n  },\n  get_filters: {\n    get() {\n      return this.getFilters;\n    }\n\n  },\n  get_influencers: {\n    get() {\n      return this.getInfluencers;\n    }\n\n  },\n  get_job_stats: {\n    get() {\n      return this.getJobStats;\n    }\n\n  },\n  get_jobs: {\n    get() {\n      return this.getJobs;\n    }\n\n  },\n  get_model_snapshots: {\n    get() {\n      return this.getModelSnapshots;\n    }\n\n  },\n  get_overall_buckets: {\n    get() {\n      return this.getOverallBuckets;\n    }\n\n  },\n  get_records: {\n    get() {\n      return this.getRecords;\n    }\n\n  },\n  get_trained_models: {\n    get() {\n      return this.getTrainedModels;\n    }\n\n  },\n  get_trained_models_stats: {\n    get() {\n      return this.getTrainedModelsStats;\n    }\n\n  },\n  open_job: {\n    get() {\n      return this.openJob;\n    }\n\n  },\n  post_calendar_events: {\n    get() {\n      return this.postCalendarEvents;\n    }\n\n  },\n  post_data: {\n    get() {\n      return this.postData;\n    }\n\n  },\n  preview_data_frame_analytics: {\n    get() {\n      return this.previewDataFrameAnalytics;\n    }\n\n  },\n  preview_datafeed: {\n    get() {\n      return this.previewDatafeed;\n    }\n\n  },\n  put_calendar: {\n    get() {\n      return this.putCalendar;\n    }\n\n  },\n  put_calendar_job: {\n    get() {\n      return this.putCalendarJob;\n    }\n\n  },\n  put_data_frame_analytics: {\n    get() {\n      return this.putDataFrameAnalytics;\n    }\n\n  },\n  put_datafeed: {\n    get() {\n      return this.putDatafeed;\n    }\n\n  },\n  put_filter: {\n    get() {\n      return this.putFilter;\n    }\n\n  },\n  put_job: {\n    get() {\n      return this.putJob;\n    }\n\n  },\n  put_trained_model: {\n    get() {\n      return this.putTrainedModel;\n    }\n\n  },\n  put_trained_model_alias: {\n    get() {\n      return this.putTrainedModelAlias;\n    }\n\n  },\n  revert_model_snapshot: {\n    get() {\n      return this.revertModelSnapshot;\n    }\n\n  },\n  set_upgrade_mode: {\n    get() {\n      return this.setUpgradeMode;\n    }\n\n  },\n  start_data_frame_analytics: {\n    get() {\n      return this.startDataFrameAnalytics;\n    }\n\n  },\n  start_datafeed: {\n    get() {\n      return this.startDatafeed;\n    }\n\n  },\n  stop_data_frame_analytics: {\n    get() {\n      return this.stopDataFrameAnalytics;\n    }\n\n  },\n  stop_datafeed: {\n    get() {\n      return this.stopDatafeed;\n    }\n\n  },\n  update_data_frame_analytics: {\n    get() {\n      return this.updateDataFrameAnalytics;\n    }\n\n  },\n  update_datafeed: {\n    get() {\n      return this.updateDatafeed;\n    }\n\n  },\n  update_filter: {\n    get() {\n      return this.updateFilter;\n    }\n\n  },\n  update_job: {\n    get() {\n      return this.updateJob;\n    }\n\n  },\n  update_model_snapshot: {\n    get() {\n      return this.updateModelSnapshot;\n    }\n\n  },\n  upgrade_job_snapshot: {\n    get() {\n      return this.upgradeJobSnapshot;\n    }\n\n  },\n  validate_detector: {\n    get() {\n      return this.validateDetector;\n    }\n\n  }\n});\nmodule.exports = MlApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"MlApi\");","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/ml.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","allowNoMatch","allowNoJobs","errorTrace","filterPath","requestsPerSecond","allowNoForecasts","waitForCompletion","linesToSample","lineMergeSizeLimit","hasHeaderRow","columnNames","shouldTrimFields","grokPattern","timestampField","timestampFormat","calcInterim","advanceTime","skipTime","expiresIn","maxModelMemory","excludeInterim","anomalyScore","jobId","partitionFieldValue","excludeGenerated","allowNoDatafeeds","influencerScore","topN","bucketSpan","overallScore","recordScore","includeModelDefinition","decompressDefinition","resetStart","resetEnd","ignoreUnavailable","allowNoIndices","ignoreThrottled","expandWildcards","deleteInterveningResults","MlApi","transport","ConfigurationError","prototype","closeJob","mlCloseJobApi","params","options","callback","job_id","err","method","body","querystring","path","encodeURIComponent","request","deleteCalendar","mlDeleteCalendarApi","calendar_id","calendarId","deleteCalendarEvent","mlDeleteCalendarEventApi","event_id","eventId","deleteCalendarJob","mlDeleteCalendarJobApi","deleteDataFrameAnalytics","mlDeleteDataFrameAnalyticsApi","id","deleteDatafeed","mlDeleteDatafeedApi","datafeed_id","datafeedId","deleteExpiredData","mlDeleteExpiredDataApi","deleteFilter","mlDeleteFilterApi","filter_id","filterId","deleteForecast","mlDeleteForecastApi","forecast_id","forecastId","deleteJob","mlDeleteJobApi","deleteModelSnapshot","mlDeleteModelSnapshotApi","snapshot_id","snapshotId","deleteTrainedModel","mlDeleteTrainedModelApi","model_id","modelId","deleteTrainedModelAlias","mlDeleteTrainedModelAliasApi","model_alias","modelAlias","estimateModelMemory","mlEstimateModelMemoryApi","evaluateDataFrame","mlEvaluateDataFrameApi","explainDataFrameAnalytics","mlExplainDataFrameAnalyticsApi","findFileStructure","mlFindFileStructureApi","bulkBody","flushJob","mlFlushJobApi","forecast","mlForecastApi","getBuckets","mlGetBucketsApi","timestamp","getCalendarEvents","mlGetCalendarEventsApi","getCalendars","mlGetCalendarsApi","getCategories","mlGetCategoriesApi","category_id","categoryId","getDataFrameAnalytics","mlGetDataFrameAnalyticsApi","getDataFrameAnalyticsStats","mlGetDataFrameAnalyticsStatsApi","getDatafeedStats","mlGetDatafeedStatsApi","getDatafeeds","mlGetDatafeedsApi","getFilters","mlGetFiltersApi","getInfluencers","mlGetInfluencersApi","getJobStats","mlGetJobStatsApi","getJobs","mlGetJobsApi","getModelSnapshots","mlGetModelSnapshotsApi","getOverallBuckets","mlGetOverallBucketsApi","getRecords","mlGetRecordsApi","getTrainedModels","mlGetTrainedModelsApi","getTrainedModelsStats","mlGetTrainedModelsStatsApi","info","mlInfoApi","openJob","mlOpenJobApi","postCalendarEvents","mlPostCalendarEventsApi","postData","mlPostDataApi","previewDataFrameAnalytics","mlPreviewDataFrameAnalyticsApi","previewDatafeed","mlPreviewDatafeedApi","putCalendar","mlPutCalendarApi","putCalendarJob","mlPutCalendarJobApi","putDataFrameAnalytics","mlPutDataFrameAnalyticsApi","putDatafeed","mlPutDatafeedApi","putFilter","mlPutFilterApi","putJob","mlPutJobApi","putTrainedModel","mlPutTrainedModelApi","putTrainedModelAlias","mlPutTrainedModelAliasApi","revertModelSnapshot","mlRevertModelSnapshotApi","setUpgradeMode","mlSetUpgradeModeApi","startDataFrameAnalytics","mlStartDataFrameAnalyticsApi","startDatafeed","mlStartDatafeedApi","stopDataFrameAnalytics","mlStopDataFrameAnalyticsApi","stopDatafeed","mlStopDatafeedApi","updateDataFrameAnalytics","mlUpdateDataFrameAnalyticsApi","updateDatafeed","mlUpdateDatafeedApi","updateFilter","mlUpdateFilterApi","updateJob","mlUpdateJobApi","updateModelSnapshot","mlUpdateModelSnapshotApi","upgradeJobSnapshot","mlUpgradeJobSnapshotApi","validate","mlValidateApi","validateDetector","mlValidateDetectorApi","Object","defineProperties","close_job","get","delete_calendar","delete_calendar_event","delete_calendar_job","delete_data_frame_analytics","delete_datafeed","delete_expired_data","delete_filter","delete_forecast","delete_job","delete_model_snapshot","delete_trained_model","delete_trained_model_alias","estimate_model_memory","evaluate_data_frame","explain_data_frame_analytics","find_file_structure","flush_job","get_buckets","get_calendar_events","get_calendars","get_categories","get_data_frame_analytics","get_data_frame_analytics_stats","get_datafeed_stats","get_datafeeds","get_filters","get_influencers","get_job_stats","get_jobs","get_model_snapshots","get_overall_buckets","get_records","get_trained_models","get_trained_models_stats","open_job","post_calendar_events","post_data","preview_data_frame_analytics","preview_datafeed","put_calendar","put_calendar_job","put_data_frame_analytics","put_datafeed","put_filter","put_job","put_trained_model","put_trained_model_alias","revert_model_snapshot","set_upgrade_mode","start_data_frame_analytics","start_datafeed","stop_data_frame_analytics","stop_datafeed","update_data_frame_analytics","update_datafeed","update_filter","update_job","update_model_snapshot","upgrade_job_snapshot","validate_detector","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['allow_no_match', 'allow_no_jobs', 'force', 'timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'requests_per_second', 'allow_no_forecasts', 'wait_for_completion', 'lines_to_sample', 'line_merge_size_limit', 'charset', 'format', 'has_header_row', 'column_names', 'delimiter', 'quote', 'should_trim_fields', 'grok_pattern', 'timestamp_field', 'timestamp_format', 'explain', 'calc_interim', 'start', 'end', 'advance_time', 'skip_time', 'duration', 'expires_in', 'max_model_memory', 'expand', 'exclude_interim', 'from', 'size', 'anomaly_score', 'sort', 'desc', 'job_id', 'partition_field_value', 'exclude_generated', 'verbose', 'allow_no_datafeeds', 'influencer_score', 'top_n', 'bucket_span', 'overall_score', 'record_score', 'include', 'include_model_definition', 'decompress_definition', 'tags', 'reset_start', 'reset_end', 'ignore_unavailable', 'allow_no_indices', 'ignore_throttled', 'expand_wildcards', 'reassign', 'delete_intervening_results', 'enabled']\r\nconst snakeCase = { allowNoMatch: 'allow_no_match', allowNoJobs: 'allow_no_jobs', errorTrace: 'error_trace', filterPath: 'filter_path', requestsPerSecond: 'requests_per_second', allowNoForecasts: 'allow_no_forecasts', waitForCompletion: 'wait_for_completion', linesToSample: 'lines_to_sample', lineMergeSizeLimit: 'line_merge_size_limit', hasHeaderRow: 'has_header_row', columnNames: 'column_names', shouldTrimFields: 'should_trim_fields', grokPattern: 'grok_pattern', timestampField: 'timestamp_field', timestampFormat: 'timestamp_format', calcInterim: 'calc_interim', advanceTime: 'advance_time', skipTime: 'skip_time', expiresIn: 'expires_in', maxModelMemory: 'max_model_memory', excludeInterim: 'exclude_interim', anomalyScore: 'anomaly_score', jobId: 'job_id', partitionFieldValue: 'partition_field_value', excludeGenerated: 'exclude_generated', allowNoDatafeeds: 'allow_no_datafeeds', influencerScore: 'influencer_score', topN: 'top_n', bucketSpan: 'bucket_span', overallScore: 'overall_score', recordScore: 'record_score', includeModelDefinition: 'include_model_definition', decompressDefinition: 'decompress_definition', resetStart: 'reset_start', resetEnd: 'reset_end', ignoreUnavailable: 'ignore_unavailable', allowNoIndices: 'allow_no_indices', ignoreThrottled: 'ignore_throttled', expandWildcards: 'expand_wildcards', deleteInterveningResults: 'delete_intervening_results' }\r\n\r\nfunction MlApi (transport, ConfigurationError) {\r\n  this.transport = transport\r\n  this[kConfigurationError] = ConfigurationError\r\n}\r\n\r\nMlApi.prototype.closeJob = function mlCloseJobApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.job_id == null && params.jobId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, jobId, job_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_close'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.deleteCalendar = function mlDeleteCalendarApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.calendar_id == null && params.calendarId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: calendar_id or calendarId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, calendarId, calendar_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_ml' + '/' + 'calendars' + '/' + encodeURIComponent(calendar_id || calendarId)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.deleteCalendarEvent = function mlDeleteCalendarEventApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.calendar_id == null && params.calendarId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: calendar_id or calendarId')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.event_id == null && params.eventId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: event_id or eventId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if ((params.event_id != null || params.eventId != null) && ((params.calendar_id == null && params.calendarId == null))) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: calendar_id')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, calendarId, calendar_id, eventId, event_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_ml' + '/' + 'calendars' + '/' + encodeURIComponent(calendar_id || calendarId) + '/' + 'events' + '/' + encodeURIComponent(event_id || eventId)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.deleteCalendarJob = function mlDeleteCalendarJobApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.calendar_id == null && params.calendarId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: calendar_id or calendarId')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.job_id == null && params.jobId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if ((params.job_id != null || params.jobId != null) && ((params.calendar_id == null && params.calendarId == null))) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: calendar_id')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, calendarId, calendar_id, jobId, job_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_ml' + '/' + 'calendars' + '/' + encodeURIComponent(calendar_id || calendarId) + '/' + 'jobs' + '/' + encodeURIComponent(job_id || jobId)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.deleteDataFrameAnalytics = function mlDeleteDataFrameAnalyticsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.id == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: id')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.deleteDatafeed = function mlDeleteDatafeedApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.datafeed_id == null && params.datafeedId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: datafeed_id or datafeedId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, datafeedId, datafeed_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_ml' + '/' + 'datafeeds' + '/' + encodeURIComponent(datafeed_id || datafeedId)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.deleteExpiredData = function mlDeleteExpiredDataApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, jobId, job_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((job_id || jobId) != null) {\r\n    if (method == null) method = 'DELETE'\r\n    path = '/' + '_ml' + '/' + '_delete_expired_data' + '/' + encodeURIComponent(job_id || jobId)\r\n  } else {\r\n    if (method == null) method = 'DELETE'\r\n    path = '/' + '_ml' + '/' + '_delete_expired_data'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.deleteFilter = function mlDeleteFilterApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.filter_id == null && params.filterId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: filter_id or filterId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, filterId, filter_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_ml' + '/' + 'filters' + '/' + encodeURIComponent(filter_id || filterId)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.deleteForecast = function mlDeleteForecastApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.job_id == null && params.jobId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if ((params.forecast_id != null || params.forecastId != null) && ((params.job_id == null && params.jobId == null))) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: job_id')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, jobId, job_id, forecastId, forecast_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((job_id || jobId) != null && (forecast_id || forecastId) != null) {\r\n    if (method == null) method = 'DELETE'\r\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_forecast' + '/' + encodeURIComponent(forecast_id || forecastId)\r\n  } else {\r\n    if (method == null) method = 'DELETE'\r\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_forecast'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.deleteJob = function mlDeleteJobApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.job_id == null && params.jobId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, jobId, job_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.deleteModelSnapshot = function mlDeleteModelSnapshotApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.job_id == null && params.jobId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.snapshot_id == null && params.snapshotId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot_id or snapshotId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if ((params.snapshot_id != null || params.snapshotId != null) && ((params.job_id == null && params.jobId == null))) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: job_id')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, jobId, job_id, snapshotId, snapshot_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'model_snapshots' + '/' + encodeURIComponent(snapshot_id || snapshotId)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.deleteTrainedModel = function mlDeleteTrainedModelApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.model_id == null && params.modelId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: model_id or modelId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, modelId, model_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_ml' + '/' + 'trained_models' + '/' + encodeURIComponent(model_id || modelId)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.deleteTrainedModelAlias = function mlDeleteTrainedModelAliasApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.model_alias == null && params.modelAlias == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: model_alias or modelAlias')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.model_id == null && params.modelId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: model_id or modelId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if ((params.model_alias != null || params.modelAlias != null) && ((params.model_id == null && params.modelId == null))) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: model_id')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, modelAlias, model_alias, modelId, model_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_ml' + '/' + 'trained_models' + '/' + encodeURIComponent(model_id || modelId) + '/' + 'model_aliases' + '/' + encodeURIComponent(model_alias || modelAlias)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.estimateModelMemory = function mlEstimateModelMemoryApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + '_estimate_model_memory'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.evaluateDataFrame = function mlEvaluateDataFrameApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ml' + '/' + 'data_frame' + '/' + '_evaluate'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.explainDataFrameAnalytics = function mlExplainDataFrameAnalyticsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((id) != null) {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id) + '/' + '_explain'\r\n  } else {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + '_explain'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.findFileStructure = function mlFindFileStructureApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ml' + '/' + 'find_file_structure'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    bulkBody: body,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.flushJob = function mlFlushJobApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.job_id == null && params.jobId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, jobId, job_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_flush'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.forecast = function mlForecastApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.job_id == null && params.jobId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, jobId, job_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_forecast'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.getBuckets = function mlGetBucketsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.job_id == null && params.jobId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if (params.timestamp != null && ((params.job_id == null && params.jobId == null))) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: job_id')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, jobId, job_id, timestamp, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((job_id || jobId) != null && (timestamp) != null) {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'results' + '/' + 'buckets' + '/' + encodeURIComponent(timestamp)\r\n  } else {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'results' + '/' + 'buckets'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.getCalendarEvents = function mlGetCalendarEventsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.calendar_id == null && params.calendarId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: calendar_id or calendarId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, calendarId, calendar_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_ml' + '/' + 'calendars' + '/' + encodeURIComponent(calendar_id || calendarId) + '/' + 'events'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.getCalendars = function mlGetCalendarsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, calendarId, calendar_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((calendar_id || calendarId) != null) {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + '_ml' + '/' + 'calendars' + '/' + encodeURIComponent(calendar_id || calendarId)\r\n  } else {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + '_ml' + '/' + 'calendars'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.getCategories = function mlGetCategoriesApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.job_id == null && params.jobId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if ((params.category_id != null || params.categoryId != null) && ((params.job_id == null && params.jobId == null))) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: job_id')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, jobId, job_id, categoryId, category_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((job_id || jobId) != null && (category_id || categoryId) != null) {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'results' + '/' + 'categories' + '/' + encodeURIComponent(category_id || categoryId)\r\n  } else {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'results' + '/' + 'categories'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.getDataFrameAnalytics = function mlGetDataFrameAnalyticsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((id) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.getDataFrameAnalyticsStats = function mlGetDataFrameAnalyticsStatsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((id) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id) + '/' + '_stats'\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + '_stats'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.getDatafeedStats = function mlGetDatafeedStatsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, datafeedId, datafeed_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((datafeed_id || datafeedId) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_ml' + '/' + 'datafeeds' + '/' + encodeURIComponent(datafeed_id || datafeedId) + '/' + '_stats'\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_ml' + '/' + 'datafeeds' + '/' + '_stats'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.getDatafeeds = function mlGetDatafeedsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, datafeedId, datafeed_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((datafeed_id || datafeedId) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_ml' + '/' + 'datafeeds' + '/' + encodeURIComponent(datafeed_id || datafeedId)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_ml' + '/' + 'datafeeds'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.getFilters = function mlGetFiltersApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, filterId, filter_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((filter_id || filterId) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_ml' + '/' + 'filters' + '/' + encodeURIComponent(filter_id || filterId)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_ml' + '/' + 'filters'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.getInfluencers = function mlGetInfluencersApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.job_id == null && params.jobId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, jobId, job_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = body == null ? 'GET' : 'POST'\r\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'results' + '/' + 'influencers'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.getJobStats = function mlGetJobStatsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, jobId, job_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((job_id || jobId) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_stats'\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + '_stats'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.getJobs = function mlGetJobsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, jobId, job_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((job_id || jobId) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_ml' + '/' + 'anomaly_detectors'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.getModelSnapshots = function mlGetModelSnapshotsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.job_id == null && params.jobId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if ((params.snapshot_id != null || params.snapshotId != null) && ((params.job_id == null && params.jobId == null))) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: job_id')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, jobId, job_id, snapshotId, snapshot_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((job_id || jobId) != null && (snapshot_id || snapshotId) != null) {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'model_snapshots' + '/' + encodeURIComponent(snapshot_id || snapshotId)\r\n  } else {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'model_snapshots'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.getOverallBuckets = function mlGetOverallBucketsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.job_id == null && params.jobId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, jobId, job_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = body == null ? 'GET' : 'POST'\r\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'results' + '/' + 'overall_buckets'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.getRecords = function mlGetRecordsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.job_id == null && params.jobId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, jobId, job_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = body == null ? 'GET' : 'POST'\r\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'results' + '/' + 'records'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.getTrainedModels = function mlGetTrainedModelsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, modelId, model_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((model_id || modelId) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_ml' + '/' + 'trained_models' + '/' + encodeURIComponent(model_id || modelId)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_ml' + '/' + 'trained_models'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.getTrainedModelsStats = function mlGetTrainedModelsStatsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, modelId, model_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((model_id || modelId) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_ml' + '/' + 'trained_models' + '/' + encodeURIComponent(model_id || modelId) + '/' + '_stats'\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_ml' + '/' + 'trained_models' + '/' + '_stats'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.info = function mlInfoApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_ml' + '/' + 'info'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.openJob = function mlOpenJobApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.job_id == null && params.jobId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, jobId, job_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_open'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.postCalendarEvents = function mlPostCalendarEventsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.calendar_id == null && params.calendarId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: calendar_id or calendarId')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, calendarId, calendar_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ml' + '/' + 'calendars' + '/' + encodeURIComponent(calendar_id || calendarId) + '/' + 'events'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.postData = function mlPostDataApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.job_id == null && params.jobId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, jobId, job_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_data'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    bulkBody: body,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.previewDataFrameAnalytics = function mlPreviewDataFrameAnalyticsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((id) != null) {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id) + '/' + '_preview'\r\n  } else {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + '_preview'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.previewDatafeed = function mlPreviewDatafeedApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, datafeedId, datafeed_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((datafeed_id || datafeedId) != null) {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + '_ml' + '/' + 'datafeeds' + '/' + encodeURIComponent(datafeed_id || datafeedId) + '/' + '_preview'\r\n  } else {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + '_ml' + '/' + 'datafeeds' + '/' + '_preview'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.putCalendar = function mlPutCalendarApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.calendar_id == null && params.calendarId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: calendar_id or calendarId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, calendarId, calendar_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_ml' + '/' + 'calendars' + '/' + encodeURIComponent(calendar_id || calendarId)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.putCalendarJob = function mlPutCalendarJobApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.calendar_id == null && params.calendarId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: calendar_id or calendarId')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.job_id == null && params.jobId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if ((params.job_id != null || params.jobId != null) && ((params.calendar_id == null && params.calendarId == null))) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: calendar_id')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, calendarId, calendar_id, jobId, job_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_ml' + '/' + 'calendars' + '/' + encodeURIComponent(calendar_id || calendarId) + '/' + 'jobs' + '/' + encodeURIComponent(job_id || jobId)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.putDataFrameAnalytics = function mlPutDataFrameAnalyticsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.id == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: id')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.putDatafeed = function mlPutDatafeedApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.datafeed_id == null && params.datafeedId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: datafeed_id or datafeedId')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, datafeedId, datafeed_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_ml' + '/' + 'datafeeds' + '/' + encodeURIComponent(datafeed_id || datafeedId)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.putFilter = function mlPutFilterApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.filter_id == null && params.filterId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: filter_id or filterId')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, filterId, filter_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_ml' + '/' + 'filters' + '/' + encodeURIComponent(filter_id || filterId)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.putJob = function mlPutJobApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.job_id == null && params.jobId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, jobId, job_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.putTrainedModel = function mlPutTrainedModelApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.model_id == null && params.modelId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: model_id or modelId')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, modelId, model_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_ml' + '/' + 'trained_models' + '/' + encodeURIComponent(model_id || modelId)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.putTrainedModelAlias = function mlPutTrainedModelAliasApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.model_alias == null && params.modelAlias == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: model_alias or modelAlias')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.model_id == null && params.modelId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: model_id or modelId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if ((params.model_alias != null || params.modelAlias != null) && ((params.model_id == null && params.modelId == null))) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: model_id')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, modelAlias, model_alias, modelId, model_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_ml' + '/' + 'trained_models' + '/' + encodeURIComponent(model_id || modelId) + '/' + 'model_aliases' + '/' + encodeURIComponent(model_alias || modelAlias)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.revertModelSnapshot = function mlRevertModelSnapshotApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.job_id == null && params.jobId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.snapshot_id == null && params.snapshotId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot_id or snapshotId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if ((params.snapshot_id != null || params.snapshotId != null) && ((params.job_id == null && params.jobId == null))) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: job_id')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, jobId, job_id, snapshotId, snapshot_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'model_snapshots' + '/' + encodeURIComponent(snapshot_id || snapshotId) + '/' + '_revert'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.setUpgradeMode = function mlSetUpgradeModeApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ml' + '/' + 'set_upgrade_mode'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.startDataFrameAnalytics = function mlStartDataFrameAnalyticsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.id == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: id')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id) + '/' + '_start'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.startDatafeed = function mlStartDatafeedApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.datafeed_id == null && params.datafeedId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: datafeed_id or datafeedId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, datafeedId, datafeed_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ml' + '/' + 'datafeeds' + '/' + encodeURIComponent(datafeed_id || datafeedId) + '/' + '_start'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.stopDataFrameAnalytics = function mlStopDataFrameAnalyticsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.id == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: id')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id) + '/' + '_stop'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.stopDatafeed = function mlStopDatafeedApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.datafeed_id == null && params.datafeedId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: datafeed_id or datafeedId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, datafeedId, datafeed_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ml' + '/' + 'datafeeds' + '/' + encodeURIComponent(datafeed_id || datafeedId) + '/' + '_stop'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.updateDataFrameAnalytics = function mlUpdateDataFrameAnalyticsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.id == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: id')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ml' + '/' + 'data_frame' + '/' + 'analytics' + '/' + encodeURIComponent(id) + '/' + '_update'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.updateDatafeed = function mlUpdateDatafeedApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.datafeed_id == null && params.datafeedId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: datafeed_id or datafeedId')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, datafeedId, datafeed_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ml' + '/' + 'datafeeds' + '/' + encodeURIComponent(datafeed_id || datafeedId) + '/' + '_update'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.updateFilter = function mlUpdateFilterApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.filter_id == null && params.filterId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: filter_id or filterId')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, filterId, filter_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ml' + '/' + 'filters' + '/' + encodeURIComponent(filter_id || filterId) + '/' + '_update'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.updateJob = function mlUpdateJobApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.job_id == null && params.jobId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, jobId, job_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + '_update'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.updateModelSnapshot = function mlUpdateModelSnapshotApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.job_id == null && params.jobId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.snapshot_id == null && params.snapshotId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot_id or snapshotId')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if ((params.snapshot_id != null || params.snapshotId != null) && ((params.job_id == null && params.jobId == null))) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: job_id')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, jobId, job_id, snapshotId, snapshot_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'model_snapshots' + '/' + encodeURIComponent(snapshot_id || snapshotId) + '/' + '_update'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.upgradeJobSnapshot = function mlUpgradeJobSnapshotApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.job_id == null && params.jobId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: job_id or jobId')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.snapshot_id == null && params.snapshotId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot_id or snapshotId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if ((params.snapshot_id != null || params.snapshotId != null) && ((params.job_id == null && params.jobId == null))) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: job_id')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, jobId, job_id, snapshotId, snapshot_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + encodeURIComponent(job_id || jobId) + '/' + 'model_snapshots' + '/' + encodeURIComponent(snapshot_id || snapshotId) + '/' + '_upgrade'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.validate = function mlValidateApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + '_validate'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nMlApi.prototype.validateDetector = function mlValidateDetectorApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ml' + '/' + 'anomaly_detectors' + '/' + '_validate' + '/' + 'detector'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nObject.defineProperties(MlApi.prototype, {\r\n  close_job: { get () { return this.closeJob } },\r\n  delete_calendar: { get () { return this.deleteCalendar } },\r\n  delete_calendar_event: { get () { return this.deleteCalendarEvent } },\r\n  delete_calendar_job: { get () { return this.deleteCalendarJob } },\r\n  delete_data_frame_analytics: { get () { return this.deleteDataFrameAnalytics } },\r\n  delete_datafeed: { get () { return this.deleteDatafeed } },\r\n  delete_expired_data: { get () { return this.deleteExpiredData } },\r\n  delete_filter: { get () { return this.deleteFilter } },\r\n  delete_forecast: { get () { return this.deleteForecast } },\r\n  delete_job: { get () { return this.deleteJob } },\r\n  delete_model_snapshot: { get () { return this.deleteModelSnapshot } },\r\n  delete_trained_model: { get () { return this.deleteTrainedModel } },\r\n  delete_trained_model_alias: { get () { return this.deleteTrainedModelAlias } },\r\n  estimate_model_memory: { get () { return this.estimateModelMemory } },\r\n  evaluate_data_frame: { get () { return this.evaluateDataFrame } },\r\n  explain_data_frame_analytics: { get () { return this.explainDataFrameAnalytics } },\r\n  find_file_structure: { get () { return this.findFileStructure } },\r\n  flush_job: { get () { return this.flushJob } },\r\n  get_buckets: { get () { return this.getBuckets } },\r\n  get_calendar_events: { get () { return this.getCalendarEvents } },\r\n  get_calendars: { get () { return this.getCalendars } },\r\n  get_categories: { get () { return this.getCategories } },\r\n  get_data_frame_analytics: { get () { return this.getDataFrameAnalytics } },\r\n  get_data_frame_analytics_stats: { get () { return this.getDataFrameAnalyticsStats } },\r\n  get_datafeed_stats: { get () { return this.getDatafeedStats } },\r\n  get_datafeeds: { get () { return this.getDatafeeds } },\r\n  get_filters: { get () { return this.getFilters } },\r\n  get_influencers: { get () { return this.getInfluencers } },\r\n  get_job_stats: { get () { return this.getJobStats } },\r\n  get_jobs: { get () { return this.getJobs } },\r\n  get_model_snapshots: { get () { return this.getModelSnapshots } },\r\n  get_overall_buckets: { get () { return this.getOverallBuckets } },\r\n  get_records: { get () { return this.getRecords } },\r\n  get_trained_models: { get () { return this.getTrainedModels } },\r\n  get_trained_models_stats: { get () { return this.getTrainedModelsStats } },\r\n  open_job: { get () { return this.openJob } },\r\n  post_calendar_events: { get () { return this.postCalendarEvents } },\r\n  post_data: { get () { return this.postData } },\r\n  preview_data_frame_analytics: { get () { return this.previewDataFrameAnalytics } },\r\n  preview_datafeed: { get () { return this.previewDatafeed } },\r\n  put_calendar: { get () { return this.putCalendar } },\r\n  put_calendar_job: { get () { return this.putCalendarJob } },\r\n  put_data_frame_analytics: { get () { return this.putDataFrameAnalytics } },\r\n  put_datafeed: { get () { return this.putDatafeed } },\r\n  put_filter: { get () { return this.putFilter } },\r\n  put_job: { get () { return this.putJob } },\r\n  put_trained_model: { get () { return this.putTrainedModel } },\r\n  put_trained_model_alias: { get () { return this.putTrainedModelAlias } },\r\n  revert_model_snapshot: { get () { return this.revertModelSnapshot } },\r\n  set_upgrade_mode: { get () { return this.setUpgradeMode } },\r\n  start_data_frame_analytics: { get () { return this.startDataFrameAnalytics } },\r\n  start_datafeed: { get () { return this.startDatafeed } },\r\n  stop_data_frame_analytics: { get () { return this.stopDataFrameAnalytics } },\r\n  stop_datafeed: { get () { return this.stopDatafeed } },\r\n  update_data_frame_analytics: { get () { return this.updateDataFrameAnalytics } },\r\n  update_datafeed: { get () { return this.updateDatafeed } },\r\n  update_filter: { get () { return this.updateFilter } },\r\n  update_job: { get () { return this.updateJob } },\r\n  update_model_snapshot: { get () { return this.updateModelSnapshot } },\r\n  upgrade_job_snapshot: { get () { return this.upgradeJobSnapshot } },\r\n  validate_detector: { get () { return this.validateDetector } }\r\n})\r\n\r\nmodule.exports = MlApi\r\n"]},"metadata":{},"sourceType":"module"}