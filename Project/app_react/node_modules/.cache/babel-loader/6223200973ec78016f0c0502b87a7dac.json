{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n\nconst BaseConnectionPool = require('./BaseConnectionPool');\n\nclass CloudConnectionPool extends BaseConnectionPool {\n  constructor(opts) {\n    super(opts);\n    this.cloudConnection = null;\n  }\n  /**\r\n   * Returns the only cloud connection.\r\n   *\r\n   * @returns {object} connection\r\n   */\n\n\n  getConnection() {\n    return this.cloudConnection;\n  }\n  /**\r\n   * Empties the connection pool.\r\n   *\r\n   * @returns {ConnectionPool}\r\n   */\n\n\n  empty(callback) {\n    super.empty(() => {\n      this.cloudConnection = null;\n      callback();\n    });\n  }\n  /**\r\n   * Update the ConnectionPool with new connections.\r\n   *\r\n   * @param {array} array of connections\r\n   * @returns {ConnectionPool}\r\n   */\n\n\n  update(connections) {\n    super.update(connections);\n    this.cloudConnection = this.connections[0];\n    return this;\n  }\n\n}\n\nmodule.exports = CloudConnectionPool;","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/lib/pool/CloudConnectionPool.js"],"names":["BaseConnectionPool","require","CloudConnectionPool","constructor","opts","cloudConnection","getConnection","empty","callback","update","connections","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,kBAAkB,GAAGC,OAAO,CAAC,sBAAD,CAAlC;;AAEA,MAAMC,mBAAN,SAAkCF,kBAAlC,CAAqD;AACnDG,EAAAA,WAAW,CAAEC,IAAF,EAAQ;AACjB,UAAMA,IAAN;AACA,SAAKC,eAAL,GAAuB,IAAvB;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEC,EAAAA,aAAa,GAAI;AACf,WAAO,KAAKD,eAAZ;AACD;AAED;AACF;AACA;AACA;AACA;;;AACEE,EAAAA,KAAK,CAAEC,QAAF,EAAY;AACf,UAAMD,KAAN,CAAY,MAAM;AAChB,WAAKF,eAAL,GAAuB,IAAvB;AACAG,MAAAA,QAAQ;AACT,KAHD;AAID;AAED;AACF;AACA;AACA;AACA;AACA;;;AACEC,EAAAA,MAAM,CAAEC,WAAF,EAAe;AACnB,UAAMD,MAAN,CAAaC,WAAb;AACA,SAAKL,eAAL,GAAuB,KAAKK,WAAL,CAAiB,CAAjB,CAAvB;AACA,WAAO,IAAP;AACD;;AArCkD;;AAwCrDC,MAAM,CAACC,OAAP,GAAiBV,mBAAjB","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\nconst BaseConnectionPool = require('./BaseConnectionPool')\r\n\r\nclass CloudConnectionPool extends BaseConnectionPool {\r\n  constructor (opts) {\r\n    super(opts)\r\n    this.cloudConnection = null\r\n  }\r\n\r\n  /**\r\n   * Returns the only cloud connection.\r\n   *\r\n   * @returns {object} connection\r\n   */\r\n  getConnection () {\r\n    return this.cloudConnection\r\n  }\r\n\r\n  /**\r\n   * Empties the connection pool.\r\n   *\r\n   * @returns {ConnectionPool}\r\n   */\r\n  empty (callback) {\r\n    super.empty(() => {\r\n      this.cloudConnection = null\r\n      callback()\r\n    })\r\n  }\r\n\r\n  /**\r\n   * Update the ConnectionPool with new connections.\r\n   *\r\n   * @param {array} array of connections\r\n   * @returns {ConnectionPool}\r\n   */\r\n  update (connections) {\r\n    super.update(connections)\r\n    this.cloudConnection = this.connections[0]\r\n    return this\r\n  }\r\n}\r\n\r\nmodule.exports = CloudConnectionPool\r\n"]},"metadata":{},"sourceType":"module"}