{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['wait_for_active_shards', 'op_type', 'refresh', 'routing', 'timeout', 'version', 'version_type', 'if_seq_no', 'if_primary_term', 'pipeline', 'require_alias', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  waitForActiveShards: 'wait_for_active_shards',\n  opType: 'op_type',\n  versionType: 'version_type',\n  ifSeqNo: 'if_seq_no',\n  ifPrimaryTerm: 'if_primary_term',\n  requireAlias: 'require_alias',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\nfunction indexApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    id,\n    index,\n    type,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null && type != null && id != null) {\n    if (method == null) method = 'PUT';\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + encodeURIComponent(id);\n  } else if (index != null && id != null) {\n    if (method == null) method = 'PUT';\n    path = '/' + encodeURIComponent(index) + '/' + '_doc' + '/' + encodeURIComponent(id);\n  } else if (index != null && type != null) {\n    if (method == null) method = 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type);\n  } else {\n    if (method == null) method = 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_doc';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n}\n\nmodule.exports = indexApi;","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/index.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","waitForActiveShards","opType","versionType","ifSeqNo","ifPrimaryTerm","requireAlias","errorTrace","filterPath","indexApi","params","options","callback","index","err","body","method","id","type","querystring","path","encodeURIComponent","request","transport","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['wait_for_active_shards', 'op_type', 'refresh', 'routing', 'timeout', 'version', 'version_type', 'if_seq_no', 'if_primary_term', 'pipeline', 'require_alias', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\r\nconst snakeCase = { waitForActiveShards: 'wait_for_active_shards', opType: 'op_type', versionType: 'version_type', ifSeqNo: 'if_seq_no', ifPrimaryTerm: 'if_primary_term', requireAlias: 'require_alias', errorTrace: 'error_trace', filterPath: 'filter_path' }\r\n\r\nfunction indexApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, id, index, type, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null && (type) != null && (id) != null) {\r\n    if (method == null) method = 'PUT'\r\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + encodeURIComponent(id)\r\n  } else if ((index) != null && (id) != null) {\r\n    if (method == null) method = 'PUT'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_doc' + '/' + encodeURIComponent(id)\r\n  } else if ((index) != null && (type) != null) {\r\n    if (method == null) method = 'POST'\r\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type)\r\n  } else {\r\n    if (method == null) method = 'POST'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_doc'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nmodule.exports = indexApi\r\n"]},"metadata":{},"sourceType":"module"}