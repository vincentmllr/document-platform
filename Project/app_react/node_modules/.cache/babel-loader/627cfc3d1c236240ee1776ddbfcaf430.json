{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['lines_to_sample', 'line_merge_size_limit', 'timeout', 'charset', 'format', 'has_header_row', 'column_names', 'delimiter', 'quote', 'should_trim_fields', 'grok_pattern', 'timestamp_field', 'timestamp_format', 'explain', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  linesToSample: 'lines_to_sample',\n  lineMergeSizeLimit: 'line_merge_size_limit',\n  hasHeaderRow: 'has_header_row',\n  columnNames: 'column_names',\n  shouldTrimFields: 'should_trim_fields',\n  grokPattern: 'grok_pattern',\n  timestampField: 'timestamp_field',\n  timestampFormat: 'timestamp_format',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\nfunction TextStructureApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n_c = TextStructureApi;\n\nTextStructureApi.prototype.findStructure = function textStructureFindStructureApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_text_structure' + '/' + 'find_structure'; // build request object\n\n  const request = {\n    method,\n    path,\n    bulkBody: body,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nObject.defineProperties(TextStructureApi.prototype, {\n  find_structure: {\n    get() {\n      return this.findStructure;\n    }\n\n  }\n});\nmodule.exports = TextStructureApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"TextStructureApi\");","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/text_structure.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","linesToSample","lineMergeSizeLimit","hasHeaderRow","columnNames","shouldTrimFields","grokPattern","timestampField","timestampFormat","errorTrace","filterPath","TextStructureApi","transport","ConfigurationError","prototype","findStructure","textStructureFindStructureApi","params","options","callback","body","err","method","querystring","path","request","bulkBody","Object","defineProperties","find_structure","get","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;AAEA,MAAM;AAAEA,EAAAA,WAAF;AAAeC,EAAAA,aAAf;AAA8BC,EAAAA,kBAA9B;AAAkDC,EAAAA;AAAlD,IAA0EC,OAAO,CAAC,UAAD,CAAvF;;AACA,MAAMC,mBAAmB,GAAG,CAAC,iBAAD,EAAoB,uBAApB,EAA6C,SAA7C,EAAwD,SAAxD,EAAmE,QAAnE,EAA6E,gBAA7E,EAA+F,cAA/F,EAA+G,WAA/G,EAA4H,OAA5H,EAAqI,oBAArI,EAA2J,cAA3J,EAA2K,iBAA3K,EAA8L,kBAA9L,EAAkN,SAAlN,EAA6N,QAA7N,EAAuO,OAAvO,EAAgP,aAAhP,EAA+P,QAA/P,EAAyQ,aAAzQ,CAA5B;AACA,MAAMC,SAAS,GAAG;AAAEC,EAAAA,aAAa,EAAE,iBAAjB;AAAoCC,EAAAA,kBAAkB,EAAE,uBAAxD;AAAiFC,EAAAA,YAAY,EAAE,gBAA/F;AAAiHC,EAAAA,WAAW,EAAE,cAA9H;AAA8IC,EAAAA,gBAAgB,EAAE,oBAAhK;AAAsLC,EAAAA,WAAW,EAAE,cAAnM;AAAmNC,EAAAA,cAAc,EAAE,iBAAnO;AAAsPC,EAAAA,eAAe,EAAE,kBAAvQ;AAA2RC,EAAAA,UAAU,EAAE,aAAvS;AAAsTC,EAAAA,UAAU,EAAE;AAAlU,CAAlB;;AAEA,SAASC,gBAAT,CAA2BC,SAA3B,EAAsCC,kBAAtC,EAA0D;AACxD,OAAKD,SAAL,GAAiBA,SAAjB;AACA,OAAKf,mBAAL,IAA4BgB,kBAA5B;AACD;;KAHQF,gB;;AAKTA,gBAAgB,CAACG,SAAjB,CAA2BC,aAA3B,GAA2C,SAASC,6BAAT,CAAwCC,MAAxC,EAAgDC,OAAhD,EAAyDC,QAAzD,EAAmE;AAC5G;AAAC,GAACF,MAAD,EAASC,OAAT,EAAkBC,QAAlB,IAA8BvB,kBAAkB,CAACqB,MAAD,EAASC,OAAT,EAAkBC,QAAlB,CAAhD,CAD2G,CAG5G;;AACA,MAAIF,MAAM,CAACG,IAAP,IAAe,IAAnB,EAAyB;AACvB,UAAMC,GAAG,GAAG,IAAI,KAAKxB,mBAAL,CAAJ,CAA8B,kCAA9B,CAAZ;AACA,WAAOH,WAAW,CAAC2B,GAAD,EAAMF,QAAN,CAAlB;AACD;;AAED,MAAI;AAAEG,IAAAA,MAAF;AAAUF,IAAAA,IAAV;AAAgB,OAAGG;AAAnB,MAAmCN,MAAvC;AACAM,EAAAA,WAAW,GAAG5B,aAAa,CAACI,mBAAD,EAAsBC,SAAtB,EAAiCuB,WAAjC,CAA3B;AAEA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIF,MAAM,IAAI,IAAd,EAAoBA,MAAM,GAAG,MAAT;AACpBE,EAAAA,IAAI,GAAG,MAAM,iBAAN,GAA0B,GAA1B,GAAgC,gBAAvC,CAd4G,CAgB5G;;AACA,QAAMC,OAAO,GAAG;AACdH,IAAAA,MADc;AAEdE,IAAAA,IAFc;AAGdE,IAAAA,QAAQ,EAAEN,IAHI;AAIdG,IAAAA;AAJc,GAAhB;AAOA,SAAO,KAAKX,SAAL,CAAea,OAAf,CAAuBA,OAAvB,EAAgCP,OAAhC,EAAyCC,QAAzC,CAAP;AACD,CAzBD;;AA2BAQ,MAAM,CAACC,gBAAP,CAAwBjB,gBAAgB,CAACG,SAAzC,EAAoD;AAClDe,EAAAA,cAAc,EAAE;AAAEC,IAAAA,GAAG,GAAI;AAAE,aAAO,KAAKf,aAAZ;AAA2B;;AAAtC;AADkC,CAApD;AAIAgB,MAAM,CAACC,OAAP,GAAiBrB,gBAAjB","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['lines_to_sample', 'line_merge_size_limit', 'timeout', 'charset', 'format', 'has_header_row', 'column_names', 'delimiter', 'quote', 'should_trim_fields', 'grok_pattern', 'timestamp_field', 'timestamp_format', 'explain', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\r\nconst snakeCase = { linesToSample: 'lines_to_sample', lineMergeSizeLimit: 'line_merge_size_limit', hasHeaderRow: 'has_header_row', columnNames: 'column_names', shouldTrimFields: 'should_trim_fields', grokPattern: 'grok_pattern', timestampField: 'timestamp_field', timestampFormat: 'timestamp_format', errorTrace: 'error_trace', filterPath: 'filter_path' }\r\n\r\nfunction TextStructureApi (transport, ConfigurationError) {\r\n  this.transport = transport\r\n  this[kConfigurationError] = ConfigurationError\r\n}\r\n\r\nTextStructureApi.prototype.findStructure = function textStructureFindStructureApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_text_structure' + '/' + 'find_structure'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    bulkBody: body,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nObject.defineProperties(TextStructureApi.prototype, {\r\n  find_structure: { get () { return this.findStructure } }\r\n})\r\n\r\nmodule.exports = TextStructureApi\r\n"]},"metadata":{},"sourceType":"module"}