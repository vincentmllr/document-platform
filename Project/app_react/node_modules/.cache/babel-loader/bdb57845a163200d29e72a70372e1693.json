{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['master_timeout', 'timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'summary', 'verbose'];\nconst snakeCase = {\n  masterTimeout: 'master_timeout',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\nfunction IngestApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n_c = IngestApi;\n\nIngestApi.prototype.deletePipeline = function ingestDeletePipelineApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_ingest' + '/' + 'pipeline' + '/' + encodeURIComponent(id); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIngestApi.prototype.geoIpStats = function ingestGeoIpStatsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_ingest' + '/' + 'geoip' + '/' + 'stats'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIngestApi.prototype.getPipeline = function ingestGetPipelineApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (id != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_ingest' + '/' + 'pipeline' + '/' + encodeURIComponent(id);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_ingest' + '/' + 'pipeline';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIngestApi.prototype.processorGrok = function ingestProcessorGrokApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_ingest' + '/' + 'processor' + '/' + 'grok'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIngestApi.prototype.putPipeline = function ingestPutPipelineApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_ingest' + '/' + 'pipeline' + '/' + encodeURIComponent(id); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIngestApi.prototype.simulate = function ingestSimulateApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (id != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_ingest' + '/' + 'pipeline' + '/' + encodeURIComponent(id) + '/' + '_simulate';\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_ingest' + '/' + 'pipeline' + '/' + '_simulate';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nObject.defineProperties(IngestApi.prototype, {\n  delete_pipeline: {\n    get() {\n      return this.deletePipeline;\n    }\n\n  },\n  geo_ip_stats: {\n    get() {\n      return this.geoIpStats;\n    }\n\n  },\n  get_pipeline: {\n    get() {\n      return this.getPipeline;\n    }\n\n  },\n  processor_grok: {\n    get() {\n      return this.processorGrok;\n    }\n\n  },\n  put_pipeline: {\n    get() {\n      return this.putPipeline;\n    }\n\n  }\n});\nmodule.exports = IngestApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"IngestApi\");","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/ingest.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","masterTimeout","errorTrace","filterPath","IngestApi","transport","ConfigurationError","prototype","deletePipeline","ingestDeletePipelineApi","params","options","callback","id","err","method","body","querystring","path","encodeURIComponent","request","geoIpStats","ingestGeoIpStatsApi","getPipeline","ingestGetPipelineApi","processorGrok","ingestProcessorGrokApi","putPipeline","ingestPutPipelineApi","simulate","ingestSimulateApi","Object","defineProperties","delete_pipeline","get","geo_ip_stats","get_pipeline","processor_grok","put_pipeline","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['master_timeout', 'timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'summary', 'verbose']\r\nconst snakeCase = { masterTimeout: 'master_timeout', errorTrace: 'error_trace', filterPath: 'filter_path' }\r\n\r\nfunction IngestApi (transport, ConfigurationError) {\r\n  this.transport = transport\r\n  this[kConfigurationError] = ConfigurationError\r\n}\r\n\r\nIngestApi.prototype.deletePipeline = function ingestDeletePipelineApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.id == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: id')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_ingest' + '/' + 'pipeline' + '/' + encodeURIComponent(id)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIngestApi.prototype.geoIpStats = function ingestGeoIpStatsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_ingest' + '/' + 'geoip' + '/' + 'stats'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIngestApi.prototype.getPipeline = function ingestGetPipelineApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((id) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_ingest' + '/' + 'pipeline' + '/' + encodeURIComponent(id)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_ingest' + '/' + 'pipeline'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIngestApi.prototype.processorGrok = function ingestProcessorGrokApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_ingest' + '/' + 'processor' + '/' + 'grok'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIngestApi.prototype.putPipeline = function ingestPutPipelineApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.id == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: id')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_ingest' + '/' + 'pipeline' + '/' + encodeURIComponent(id)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIngestApi.prototype.simulate = function ingestSimulateApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((id) != null) {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + '_ingest' + '/' + 'pipeline' + '/' + encodeURIComponent(id) + '/' + '_simulate'\r\n  } else {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + '_ingest' + '/' + 'pipeline' + '/' + '_simulate'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nObject.defineProperties(IngestApi.prototype, {\r\n  delete_pipeline: { get () { return this.deletePipeline } },\r\n  geo_ip_stats: { get () { return this.geoIpStats } },\r\n  get_pipeline: { get () { return this.getPipeline } },\r\n  processor_grok: { get () { return this.processorGrok } },\r\n  put_pipeline: { get () { return this.putPipeline } }\r\n})\r\n\r\nmodule.exports = IngestApi\r\n"]},"metadata":{},"sourceType":"module"}