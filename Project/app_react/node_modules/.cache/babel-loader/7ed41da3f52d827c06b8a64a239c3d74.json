{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n\nconst assert = require('assert');\n\nconst {\n  inspect\n} = require('util');\n\nconst hpagent = require('hpagent');\n\nconst http = require('http');\n\nconst https = require('https');\n\nconst debug = require('debug')('elasticsearch');\n\nconst {\n  pipeline\n} = require('stream');\n\nconst INVALID_PATH_REGEX = /[^\\u0021-\\u00ff]/;\n\nconst {\n  ConnectionError,\n  RequestAbortedError,\n  TimeoutError,\n  ConfigurationError\n} = require('./errors');\n\nclass Connection {\n  constructor(opts) {\n    this.url = opts.url;\n    this.ssl = opts.ssl || null;\n    this.id = opts.id || stripAuth(opts.url.href);\n    this.headers = prepareHeaders(opts.headers, opts.auth);\n    this.deadCount = 0;\n    this.resurrectTimeout = 0;\n    this._openRequests = 0;\n    this._status = opts.status || Connection.statuses.ALIVE;\n    this.roles = Object.assign({}, defaultRoles, opts.roles);\n\n    if (!['http:', 'https:'].includes(this.url.protocol)) {\n      throw new ConfigurationError(`Invalid protocol: '${this.url.protocol}'`);\n    }\n\n    if (typeof opts.agent === 'function') {\n      this.agent = opts.agent(opts);\n    } else if (opts.agent === false) {\n      this.agent = undefined;\n    } else {\n      const agentOptions = Object.assign({}, {\n        keepAlive: true,\n        keepAliveMsecs: 1000,\n        maxSockets: 256,\n        maxFreeSockets: 256,\n        scheduling: 'lifo'\n      }, opts.agent);\n\n      if (opts.proxy) {\n        agentOptions.proxy = opts.proxy;\n        this.agent = this.url.protocol === 'http:' ? new hpagent.HttpProxyAgent(agentOptions) : new hpagent.HttpsProxyAgent(Object.assign({}, agentOptions, this.ssl));\n      } else {\n        this.agent = this.url.protocol === 'http:' ? new http.Agent(agentOptions) : new https.Agent(Object.assign({}, agentOptions, this.ssl));\n      }\n    }\n\n    this.makeRequest = this.url.protocol === 'http:' ? http.request : https.request;\n  }\n\n  request(params, callback) {\n    this._openRequests++;\n    let cleanedListeners = false;\n    const requestParams = this.buildRequestObject(params); // https://github.com/nodejs/node/commit/b961d9fd83\n\n    if (INVALID_PATH_REGEX.test(requestParams.path) === true) {\n      callback(new TypeError(`ERR_UNESCAPED_CHARACTERS: ${requestParams.path}`), null);\n      /* istanbul ignore next */\n\n      return {\n        abort: () => {}\n      };\n    }\n\n    debug('Starting a new request', params);\n    const request = this.makeRequest(requestParams);\n\n    const onResponse = response => {\n      cleanListeners();\n      this._openRequests--;\n      callback(null, response);\n    };\n\n    const onTimeout = () => {\n      cleanListeners();\n      this._openRequests--;\n      request.once('error', () => {}); // we need to catch the request aborted error\n\n      request.abort();\n      callback(new TimeoutError('Request timed out', params), null);\n    };\n\n    const onError = err => {\n      cleanListeners();\n      this._openRequests--;\n      callback(new ConnectionError(err.message), null);\n    };\n\n    const onAbort = () => {\n      cleanListeners();\n      request.once('error', () => {}); // we need to catch the request aborted error\n\n      debug('Request aborted', params);\n      this._openRequests--;\n      callback(new RequestAbortedError(), null);\n    };\n\n    request.on('response', onResponse);\n    request.on('timeout', onTimeout);\n    request.on('error', onError);\n    request.on('abort', onAbort); // Disables the Nagle algorithm\n\n    request.setNoDelay(true); // starts the request\n\n    if (isStream(params.body) === true) {\n      pipeline(params.body, request, err => {\n        /* istanbul ignore if  */\n        if (err != null && cleanedListeners === false) {\n          cleanListeners();\n          this._openRequests--;\n          callback(err, null);\n        }\n      });\n    } else {\n      request.end(params.body);\n    }\n\n    return request;\n\n    function cleanListeners() {\n      request.removeListener('response', onResponse);\n      request.removeListener('timeout', onTimeout);\n      request.removeListener('error', onError);\n      request.removeListener('abort', onAbort);\n      cleanedListeners = true;\n    }\n  } // TODO: write a better closing logic\n\n\n  close(callback = () => {}) {\n    debug('Closing connection', this.id);\n\n    if (this._openRequests > 0) {\n      setTimeout(() => this.close(callback), 1000);\n    } else {\n      if (this.agent !== undefined) {\n        this.agent.destroy();\n      }\n\n      callback();\n    }\n  }\n\n  setRole(role, enabled) {\n    if (validRoles.indexOf(role) === -1) {\n      throw new ConfigurationError(`Unsupported role: '${role}'`);\n    }\n\n    if (typeof enabled !== 'boolean') {\n      throw new ConfigurationError('enabled should be a boolean');\n    }\n\n    this.roles[role] = enabled;\n    return this;\n  }\n\n  get status() {\n    return this._status;\n  }\n\n  set status(status) {\n    assert(~validStatuses.indexOf(status), `Unsupported status: '${status}'`);\n    this._status = status;\n  }\n\n  buildRequestObject(params) {\n    const url = this.url;\n    const request = {\n      protocol: url.protocol,\n      hostname: url.hostname[0] === '[' ? url.hostname.slice(1, -1) : url.hostname,\n      hash: url.hash,\n      search: url.search,\n      pathname: url.pathname,\n      path: '',\n      href: url.href,\n      origin: url.origin,\n      // https://github.com/elastic/elasticsearch-js/issues/843\n      port: url.port !== '' ? url.port : undefined,\n      headers: this.headers,\n      agent: this.agent\n    };\n    const paramsKeys = Object.keys(params);\n\n    for (let i = 0, len = paramsKeys.length; i < len; i++) {\n      const key = paramsKeys[i];\n\n      if (key === 'path') {\n        request.pathname = resolve(request.pathname, params[key]);\n      } else if (key === 'querystring' && !!params[key] === true) {\n        if (request.search === '') {\n          request.search = '?' + params[key];\n        } else {\n          request.search += '&' + params[key];\n        }\n      } else if (key === 'headers') {\n        request.headers = Object.assign({}, request.headers, params.headers);\n      } else {\n        request[key] = params[key];\n      }\n    }\n\n    request.path = request.pathname + request.search;\n    return request;\n  } // Handles console.log and utils.inspect invocations.\n  // We want to hide `auth`, `agent` and `ssl` since they made\n  // the logs very hard to read. The user can still\n  // access them with `instance.agent` and `instance.ssl`.\n\n\n  [inspect.custom](depth, options) {\n    const {\n      authorization,\n      ...headers\n    } = this.headers;\n    return {\n      url: stripAuth(this.url.toString()),\n      id: this.id,\n      headers,\n      deadCount: this.deadCount,\n      resurrectTimeout: this.resurrectTimeout,\n      _openRequests: this._openRequests,\n      status: this.status,\n      roles: this.roles\n    };\n  }\n\n  toJSON() {\n    const {\n      authorization,\n      ...headers\n    } = this.headers;\n    return {\n      url: stripAuth(this.url.toString()),\n      id: this.id,\n      headers,\n      deadCount: this.deadCount,\n      resurrectTimeout: this.resurrectTimeout,\n      _openRequests: this._openRequests,\n      status: this.status,\n      roles: this.roles\n    };\n  }\n\n}\n\nConnection.statuses = {\n  ALIVE: 'alive',\n  DEAD: 'dead'\n};\nConnection.roles = {\n  MASTER: 'master',\n  DATA: 'data',\n  INGEST: 'ingest',\n  ML: 'ml'\n};\nconst defaultRoles = {\n  [Connection.roles.MASTER]: true,\n  [Connection.roles.DATA]: true,\n  [Connection.roles.INGEST]: true,\n  [Connection.roles.ML]: false\n};\nconst validStatuses = Object.keys(Connection.statuses).map(k => Connection.statuses[k]);\nconst validRoles = Object.keys(Connection.roles).map(k => Connection.roles[k]);\n\nfunction stripAuth(url) {\n  if (url.indexOf('@') === -1) return url;\n  return url.slice(0, url.indexOf('//') + 2) + url.slice(url.indexOf('@') + 1);\n}\n\nfunction isStream(obj) {\n  return obj != null && typeof obj.pipe === 'function';\n}\n\nfunction resolve(host, path) {\n  const hostEndWithSlash = host[host.length - 1] === '/';\n  const pathStartsWithSlash = path[0] === '/';\n\n  if (hostEndWithSlash === true && pathStartsWithSlash === true) {\n    return host + path.slice(1);\n  } else if (hostEndWithSlash !== pathStartsWithSlash) {\n    return host + path;\n  } else {\n    return host + '/' + path;\n  }\n}\n\nfunction prepareHeaders(headers = {}, auth) {\n  if (auth != null && headers.authorization == null) {\n    /* istanbul ignore else */\n    if (auth.apiKey) {\n      if (typeof auth.apiKey === 'object') {\n        headers.authorization = 'ApiKey ' + Buffer.from(`${auth.apiKey.id}:${auth.apiKey.api_key}`).toString('base64');\n      } else {\n        headers.authorization = `ApiKey ${auth.apiKey}`;\n      }\n    } else if (auth.username && auth.password) {\n      headers.authorization = 'Basic ' + Buffer.from(`${auth.username}:${auth.password}`).toString('base64');\n    }\n  }\n\n  return headers;\n}\n\nmodule.exports = Connection;\nmodule.exports.internals = {\n  prepareHeaders\n};","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/lib/Connection.js"],"names":["assert","require","inspect","hpagent","http","https","debug","pipeline","INVALID_PATH_REGEX","ConnectionError","RequestAbortedError","TimeoutError","ConfigurationError","Connection","constructor","opts","url","ssl","id","stripAuth","href","headers","prepareHeaders","auth","deadCount","resurrectTimeout","_openRequests","_status","status","statuses","ALIVE","roles","Object","assign","defaultRoles","includes","protocol","agent","undefined","agentOptions","keepAlive","keepAliveMsecs","maxSockets","maxFreeSockets","scheduling","proxy","HttpProxyAgent","HttpsProxyAgent","Agent","makeRequest","request","params","callback","cleanedListeners","requestParams","buildRequestObject","test","path","TypeError","abort","onResponse","response","cleanListeners","onTimeout","once","onError","err","message","onAbort","on","setNoDelay","isStream","body","end","removeListener","close","setTimeout","destroy","setRole","role","enabled","validRoles","indexOf","validStatuses","hostname","slice","hash","search","pathname","origin","port","paramsKeys","keys","i","len","length","key","resolve","custom","depth","options","authorization","toString","toJSON","DEAD","MASTER","DATA","INGEST","ML","map","k","obj","pipe","host","hostEndWithSlash","pathStartsWithSlash","apiKey","Buffer","from","api_key","username","password","module","exports","internals"],"mappings":"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","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\nconst assert = require('assert')\r\nconst { inspect } = require('util')\r\nconst hpagent = require('hpagent')\r\nconst http = require('http')\r\nconst https = require('https')\r\nconst debug = require('debug')('elasticsearch')\r\nconst { pipeline } = require('stream')\r\nconst INVALID_PATH_REGEX = /[^\\u0021-\\u00ff]/\r\nconst {\r\n  ConnectionError,\r\n  RequestAbortedError,\r\n  TimeoutError,\r\n  ConfigurationError\r\n} = require('./errors')\r\n\r\nclass Connection {\r\n  constructor (opts) {\r\n    this.url = opts.url\r\n    this.ssl = opts.ssl || null\r\n    this.id = opts.id || stripAuth(opts.url.href)\r\n    this.headers = prepareHeaders(opts.headers, opts.auth)\r\n    this.deadCount = 0\r\n    this.resurrectTimeout = 0\r\n\r\n    this._openRequests = 0\r\n    this._status = opts.status || Connection.statuses.ALIVE\r\n    this.roles = Object.assign({}, defaultRoles, opts.roles)\r\n\r\n    if (!['http:', 'https:'].includes(this.url.protocol)) {\r\n      throw new ConfigurationError(`Invalid protocol: '${this.url.protocol}'`)\r\n    }\r\n\r\n    if (typeof opts.agent === 'function') {\r\n      this.agent = opts.agent(opts)\r\n    } else if (opts.agent === false) {\r\n      this.agent = undefined\r\n    } else {\r\n      const agentOptions = Object.assign({}, {\r\n        keepAlive: true,\r\n        keepAliveMsecs: 1000,\r\n        maxSockets: 256,\r\n        maxFreeSockets: 256,\r\n        scheduling: 'lifo'\r\n      }, opts.agent)\r\n      if (opts.proxy) {\r\n        agentOptions.proxy = opts.proxy\r\n        this.agent = this.url.protocol === 'http:'\r\n          ? new hpagent.HttpProxyAgent(agentOptions)\r\n          : new hpagent.HttpsProxyAgent(Object.assign({}, agentOptions, this.ssl))\r\n      } else {\r\n        this.agent = this.url.protocol === 'http:'\r\n          ? new http.Agent(agentOptions)\r\n          : new https.Agent(Object.assign({}, agentOptions, this.ssl))\r\n      }\r\n    }\r\n\r\n    this.makeRequest = this.url.protocol === 'http:'\r\n      ? http.request\r\n      : https.request\r\n  }\r\n\r\n  request (params, callback) {\r\n    this._openRequests++\r\n    let cleanedListeners = false\r\n\r\n    const requestParams = this.buildRequestObject(params)\r\n    // https://github.com/nodejs/node/commit/b961d9fd83\r\n    if (INVALID_PATH_REGEX.test(requestParams.path) === true) {\r\n      callback(new TypeError(`ERR_UNESCAPED_CHARACTERS: ${requestParams.path}`), null)\r\n      /* istanbul ignore next */\r\n      return { abort: () => {} }\r\n    }\r\n\r\n    debug('Starting a new request', params)\r\n    const request = this.makeRequest(requestParams)\r\n\r\n    const onResponse = response => {\r\n      cleanListeners()\r\n      this._openRequests--\r\n      callback(null, response)\r\n    }\r\n\r\n    const onTimeout = () => {\r\n      cleanListeners()\r\n      this._openRequests--\r\n      request.once('error', () => {}) // we need to catch the request aborted error\r\n      request.abort()\r\n      callback(new TimeoutError('Request timed out', params), null)\r\n    }\r\n\r\n    const onError = err => {\r\n      cleanListeners()\r\n      this._openRequests--\r\n      callback(new ConnectionError(err.message), null)\r\n    }\r\n\r\n    const onAbort = () => {\r\n      cleanListeners()\r\n      request.once('error', () => {}) // we need to catch the request aborted error\r\n      debug('Request aborted', params)\r\n      this._openRequests--\r\n      callback(new RequestAbortedError(), null)\r\n    }\r\n\r\n    request.on('response', onResponse)\r\n    request.on('timeout', onTimeout)\r\n    request.on('error', onError)\r\n    request.on('abort', onAbort)\r\n\r\n    // Disables the Nagle algorithm\r\n    request.setNoDelay(true)\r\n\r\n    // starts the request\r\n    if (isStream(params.body) === true) {\r\n      pipeline(params.body, request, err => {\r\n        /* istanbul ignore if  */\r\n        if (err != null && cleanedListeners === false) {\r\n          cleanListeners()\r\n          this._openRequests--\r\n          callback(err, null)\r\n        }\r\n      })\r\n    } else {\r\n      request.end(params.body)\r\n    }\r\n\r\n    return request\r\n\r\n    function cleanListeners () {\r\n      request.removeListener('response', onResponse)\r\n      request.removeListener('timeout', onTimeout)\r\n      request.removeListener('error', onError)\r\n      request.removeListener('abort', onAbort)\r\n      cleanedListeners = true\r\n    }\r\n  }\r\n\r\n  // TODO: write a better closing logic\r\n  close (callback = () => {}) {\r\n    debug('Closing connection', this.id)\r\n    if (this._openRequests > 0) {\r\n      setTimeout(() => this.close(callback), 1000)\r\n    } else {\r\n      if (this.agent !== undefined) {\r\n        this.agent.destroy()\r\n      }\r\n      callback()\r\n    }\r\n  }\r\n\r\n  setRole (role, enabled) {\r\n    if (validRoles.indexOf(role) === -1) {\r\n      throw new ConfigurationError(`Unsupported role: '${role}'`)\r\n    }\r\n    if (typeof enabled !== 'boolean') {\r\n      throw new ConfigurationError('enabled should be a boolean')\r\n    }\r\n\r\n    this.roles[role] = enabled\r\n    return this\r\n  }\r\n\r\n  get status () {\r\n    return this._status\r\n  }\r\n\r\n  set status (status) {\r\n    assert(\r\n      ~validStatuses.indexOf(status),\r\n      `Unsupported status: '${status}'`\r\n    )\r\n    this._status = status\r\n  }\r\n\r\n  buildRequestObject (params) {\r\n    const url = this.url\r\n    const request = {\r\n      protocol: url.protocol,\r\n      hostname: url.hostname[0] === '['\r\n        ? url.hostname.slice(1, -1)\r\n        : url.hostname,\r\n      hash: url.hash,\r\n      search: url.search,\r\n      pathname: url.pathname,\r\n      path: '',\r\n      href: url.href,\r\n      origin: url.origin,\r\n      // https://github.com/elastic/elasticsearch-js/issues/843\r\n      port: url.port !== '' ? url.port : undefined,\r\n      headers: this.headers,\r\n      agent: this.agent\r\n    }\r\n\r\n    const paramsKeys = Object.keys(params)\r\n    for (let i = 0, len = paramsKeys.length; i < len; i++) {\r\n      const key = paramsKeys[i]\r\n      if (key === 'path') {\r\n        request.pathname = resolve(request.pathname, params[key])\r\n      } else if (key === 'querystring' && !!params[key] === true) {\r\n        if (request.search === '') {\r\n          request.search = '?' + params[key]\r\n        } else {\r\n          request.search += '&' + params[key]\r\n        }\r\n      } else if (key === 'headers') {\r\n        request.headers = Object.assign({}, request.headers, params.headers)\r\n      } else {\r\n        request[key] = params[key]\r\n      }\r\n    }\r\n\r\n    request.path = request.pathname + request.search\r\n\r\n    return request\r\n  }\r\n\r\n  // Handles console.log and utils.inspect invocations.\r\n  // We want to hide `auth`, `agent` and `ssl` since they made\r\n  // the logs very hard to read. The user can still\r\n  // access them with `instance.agent` and `instance.ssl`.\r\n  [inspect.custom] (depth, options) {\r\n    const {\r\n      authorization,\r\n      ...headers\r\n    } = this.headers\r\n\r\n    return {\r\n      url: stripAuth(this.url.toString()),\r\n      id: this.id,\r\n      headers,\r\n      deadCount: this.deadCount,\r\n      resurrectTimeout: this.resurrectTimeout,\r\n      _openRequests: this._openRequests,\r\n      status: this.status,\r\n      roles: this.roles\r\n    }\r\n  }\r\n\r\n  toJSON () {\r\n    const {\r\n      authorization,\r\n      ...headers\r\n    } = this.headers\r\n\r\n    return {\r\n      url: stripAuth(this.url.toString()),\r\n      id: this.id,\r\n      headers,\r\n      deadCount: this.deadCount,\r\n      resurrectTimeout: this.resurrectTimeout,\r\n      _openRequests: this._openRequests,\r\n      status: this.status,\r\n      roles: this.roles\r\n    }\r\n  }\r\n}\r\n\r\nConnection.statuses = {\r\n  ALIVE: 'alive',\r\n  DEAD: 'dead'\r\n}\r\n\r\nConnection.roles = {\r\n  MASTER: 'master',\r\n  DATA: 'data',\r\n  INGEST: 'ingest',\r\n  ML: 'ml'\r\n}\r\n\r\nconst defaultRoles = {\r\n  [Connection.roles.MASTER]: true,\r\n  [Connection.roles.DATA]: true,\r\n  [Connection.roles.INGEST]: true,\r\n  [Connection.roles.ML]: false\r\n}\r\n\r\nconst validStatuses = Object.keys(Connection.statuses)\r\n  .map(k => Connection.statuses[k])\r\nconst validRoles = Object.keys(Connection.roles)\r\n  .map(k => Connection.roles[k])\r\n\r\nfunction stripAuth (url) {\r\n  if (url.indexOf('@') === -1) return url\r\n  return url.slice(0, url.indexOf('//') + 2) + url.slice(url.indexOf('@') + 1)\r\n}\r\n\r\nfunction isStream (obj) {\r\n  return obj != null && typeof obj.pipe === 'function'\r\n}\r\n\r\nfunction resolve (host, path) {\r\n  const hostEndWithSlash = host[host.length - 1] === '/'\r\n  const pathStartsWithSlash = path[0] === '/'\r\n\r\n  if (hostEndWithSlash === true && pathStartsWithSlash === true) {\r\n    return host + path.slice(1)\r\n  } else if (hostEndWithSlash !== pathStartsWithSlash) {\r\n    return host + path\r\n  } else {\r\n    return host + '/' + path\r\n  }\r\n}\r\n\r\nfunction prepareHeaders (headers = {}, auth) {\r\n  if (auth != null && headers.authorization == null) {\r\n    /* istanbul ignore else */\r\n    if (auth.apiKey) {\r\n      if (typeof auth.apiKey === 'object') {\r\n        headers.authorization = 'ApiKey ' + Buffer.from(`${auth.apiKey.id}:${auth.apiKey.api_key}`).toString('base64')\r\n      } else {\r\n        headers.authorization = `ApiKey ${auth.apiKey}`\r\n      }\r\n    } else if (auth.username && auth.password) {\r\n      headers.authorization = 'Basic ' + Buffer.from(`${auth.username}:${auth.password}`).toString('base64')\r\n    }\r\n  }\r\n  return headers\r\n}\r\n\r\nmodule.exports = Connection\r\nmodule.exports.internals = { prepareHeaders }\r\n"]},"metadata":{},"sourceType":"module"}