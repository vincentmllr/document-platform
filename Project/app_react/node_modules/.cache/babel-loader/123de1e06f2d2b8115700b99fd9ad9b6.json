{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path', 'wait_for_completion_timeout', 'keep_alive', 'typed_keys', 'keep_on_completion', 'batched_reduce_size', 'request_cache', 'analyzer', 'analyze_wildcard', 'default_operator', 'df', 'explain', 'stored_fields', 'docvalue_fields', 'from', 'ignore_unavailable', 'ignore_throttled', 'allow_no_indices', 'expand_wildcards', 'lenient', 'preference', 'q', 'routing', 'search_type', 'size', 'sort', '_source', '_source_excludes', '_source_exclude', '_source_includes', '_source_include', 'terminate_after', 'stats', 'suggest_field', 'suggest_mode', 'suggest_size', 'suggest_text', 'timeout', 'track_scores', 'track_total_hits', 'allow_partial_search_results', 'version', 'seq_no_primary_term', 'max_concurrent_shard_requests'];\nconst snakeCase = {\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n  waitForCompletionTimeout: 'wait_for_completion_timeout',\n  keepAlive: 'keep_alive',\n  typedKeys: 'typed_keys',\n  keepOnCompletion: 'keep_on_completion',\n  batchedReduceSize: 'batched_reduce_size',\n  requestCache: 'request_cache',\n  analyzeWildcard: 'analyze_wildcard',\n  defaultOperator: 'default_operator',\n  storedFields: 'stored_fields',\n  docvalueFields: 'docvalue_fields',\n  ignoreUnavailable: 'ignore_unavailable',\n  ignoreThrottled: 'ignore_throttled',\n  allowNoIndices: 'allow_no_indices',\n  expandWildcards: 'expand_wildcards',\n  searchType: 'search_type',\n  _sourceExcludes: '_source_excludes',\n  _sourceExclude: '_source_exclude',\n  _sourceIncludes: '_source_includes',\n  _sourceInclude: '_source_include',\n  terminateAfter: 'terminate_after',\n  suggestField: 'suggest_field',\n  suggestMode: 'suggest_mode',\n  suggestSize: 'suggest_size',\n  suggestText: 'suggest_text',\n  trackScores: 'track_scores',\n  trackTotalHits: 'track_total_hits',\n  allowPartialSearchResults: 'allow_partial_search_results',\n  seqNoPrimaryTerm: 'seq_no_primary_term',\n  maxConcurrentShardRequests: 'max_concurrent_shard_requests'\n};\n\nfunction AsyncSearchApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n_c = AsyncSearchApi;\n\nAsyncSearchApi.prototype.delete = function asyncSearchDeleteApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_async_search' + '/' + encodeURIComponent(id); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nAsyncSearchApi.prototype.get = function asyncSearchGetApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_async_search' + '/' + encodeURIComponent(id); // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nAsyncSearchApi.prototype.status = function asyncSearchStatusApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_async_search' + '/' + 'status' + '/' + encodeURIComponent(id); // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nAsyncSearchApi.prototype.submit = function asyncSearchSubmitApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null) {\n    if (method == null) method = 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_async_search';\n  } else {\n    if (method == null) method = 'POST';\n    path = '/' + '_async_search';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nmodule.exports = AsyncSearchApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"AsyncSearchApi\");","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/async_search.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","errorTrace","filterPath","waitForCompletionTimeout","keepAlive","typedKeys","keepOnCompletion","batchedReduceSize","requestCache","analyzeWildcard","defaultOperator","storedFields","docvalueFields","ignoreUnavailable","ignoreThrottled","allowNoIndices","expandWildcards","searchType","_sourceExcludes","_sourceExclude","_sourceIncludes","_sourceInclude","terminateAfter","suggestField","suggestMode","suggestSize","suggestText","trackScores","trackTotalHits","allowPartialSearchResults","seqNoPrimaryTerm","maxConcurrentShardRequests","AsyncSearchApi","transport","ConfigurationError","prototype","delete","asyncSearchDeleteApi","params","options","callback","id","err","method","body","querystring","path","encodeURIComponent","request","get","asyncSearchGetApi","status","asyncSearchStatusApi","submit","asyncSearchSubmitApi","index","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path', 'wait_for_completion_timeout', 'keep_alive', 'typed_keys', 'keep_on_completion', 'batched_reduce_size', 'request_cache', 'analyzer', 'analyze_wildcard', 'default_operator', 'df', 'explain', 'stored_fields', 'docvalue_fields', 'from', 'ignore_unavailable', 'ignore_throttled', 'allow_no_indices', 'expand_wildcards', 'lenient', 'preference', 'q', 'routing', 'search_type', 'size', 'sort', '_source', '_source_excludes', '_source_exclude', '_source_includes', '_source_include', 'terminate_after', 'stats', 'suggest_field', 'suggest_mode', 'suggest_size', 'suggest_text', 'timeout', 'track_scores', 'track_total_hits', 'allow_partial_search_results', 'version', 'seq_no_primary_term', 'max_concurrent_shard_requests']\r\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path', waitForCompletionTimeout: 'wait_for_completion_timeout', keepAlive: 'keep_alive', typedKeys: 'typed_keys', keepOnCompletion: 'keep_on_completion', batchedReduceSize: 'batched_reduce_size', requestCache: 'request_cache', analyzeWildcard: 'analyze_wildcard', defaultOperator: 'default_operator', storedFields: 'stored_fields', docvalueFields: 'docvalue_fields', ignoreUnavailable: 'ignore_unavailable', ignoreThrottled: 'ignore_throttled', allowNoIndices: 'allow_no_indices', expandWildcards: 'expand_wildcards', searchType: 'search_type', _sourceExcludes: '_source_excludes', _sourceExclude: '_source_exclude', _sourceIncludes: '_source_includes', _sourceInclude: '_source_include', terminateAfter: 'terminate_after', suggestField: 'suggest_field', suggestMode: 'suggest_mode', suggestSize: 'suggest_size', suggestText: 'suggest_text', trackScores: 'track_scores', trackTotalHits: 'track_total_hits', allowPartialSearchResults: 'allow_partial_search_results', seqNoPrimaryTerm: 'seq_no_primary_term', maxConcurrentShardRequests: 'max_concurrent_shard_requests' }\r\n\r\nfunction AsyncSearchApi (transport, ConfigurationError) {\r\n  this.transport = transport\r\n  this[kConfigurationError] = ConfigurationError\r\n}\r\n\r\nAsyncSearchApi.prototype.delete = function asyncSearchDeleteApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.id == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: id')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_async_search' + '/' + encodeURIComponent(id)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nAsyncSearchApi.prototype.get = function asyncSearchGetApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.id == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: id')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_async_search' + '/' + encodeURIComponent(id)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nAsyncSearchApi.prototype.status = function asyncSearchStatusApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.id == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: id')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_async_search' + '/' + 'status' + '/' + encodeURIComponent(id)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nAsyncSearchApi.prototype.submit = function asyncSearchSubmitApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null) {\r\n    if (method == null) method = 'POST'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_async_search'\r\n  } else {\r\n    if (method == null) method = 'POST'\r\n    path = '/' + '_async_search'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nmodule.exports = AsyncSearchApi\r\n"]},"metadata":{},"sourceType":"module"}