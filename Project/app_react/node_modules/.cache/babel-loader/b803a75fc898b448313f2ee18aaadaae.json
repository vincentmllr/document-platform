{"ast":null,"code":"//Imports and global variables\nconst {\n  Client\n} = require(\"elasticsearch\");\n\nrequire(\"dotenv\").config();\n\nconst elasticUrl = process.env.ELASTIC_URL || \"http://localhost:9200\";\nconst esclient = new Client({\n  node: elasticUrl\n});\n\nconst pdf2base64 = require('pdf-to-base64'); //muss man installiern\n\n\nconst index = \"peerindex\";\n/**\r\n* createIndex named by const index\r\n*/\n\nasync function createIndex() {\n  try {\n    const indExists = await esclient.indices.exists({\n      index: index\n    }); //check if index exists\n\n    if (!indExists.body) {\n      await esclient.indices.create({\n        index: index\n      });\n      console.log(`Created index ${index}`);\n      await addPipeline();\n    }\n  } catch (err) {\n    console.error(`An error occurred while creating the index ${index}:`);\n    console.error(err);\n  }\n}\n/**\r\n* indexing PDF\r\n* @param filename, id, title, author\r\n*/\n\n\nasync function indexPDF(filename, id, title, author, year) {\n  try {\n    //creates base64 string \n    var base64pdf = await pdf2base64(\"/usr/src/app/src/data/\" + filename); //hier auf Pfad achten (PDF einfach in Ordner Data ablegen)\n\n    await esclient.index({\n      index: index,\n      id: id,\n      pipeline: \"attachment\",\n      body: {\n        title: title,\n        author: author,\n        year: year,\n        pdf: base64pdf\n      }\n    });\n    console.log(`indexing pdf was successful`);\n  } catch (err) {\n    console.error(`An error occurred while indexing the PDF`);\n    console.error(err);\n  }\n}\n/**\r\n* adding requiered pipeline for indexing PDFs\r\n*/\n\n\nasync function addPipeline() {\n  await esclient.ingest.putPipeline({\n    id: 'attachment',\n    body: {\n      \"description\": \"Extract attachment information\",\n      \"processors\": [{\n        \"attachment\": {\n          \"field\": \"pdf\"\n        }\n      }]\n    }\n  }).then(function () {\n    console.log(\"putPipeline successful\");\n  }).catch(function (error) {\n    console.log(`An error occurred while put Pipeline`);\n    console.log(error);\n  });\n}\n\n;\n/**\r\n* search PDF by keyword\r\n* @param keyoword\r\n* @return JSON with Results\r\n*/\n\nasync function simpleSearchPDF(keyword) {\n  try {\n    const query = {\n      query: {\n        match: {\n          \"attachment.content\": {\n            query: keyword,\n            fuzziness: \"auto\"\n          }\n        }\n      }\n    };\n    const res = await esclient.search({\n      index: index,\n      body: query\n    });\n    var results = [];\n\n    for (let hit in res) {\n      results.push({\n        title: hit.title,\n        author: hit.author\n      });\n    }\n\n    return JSON.stringify(res);\n  } catch (err) {\n    console.error(`An error occurred while searching PDF`);\n    console.error(err);\n  }\n}\n/**\r\n* Search PDF by multiple optinal params while at least one param must match exactly.\r\n* Not filled textfields should hand over an empty string (\"\")\r\n* @param title, author, year\r\n* @return JSON with Results\r\n*/\n\n\nasync function advancedSearchPDF(title, author, year) {\n  try {\n    const query = {\n      \"min_score\": 0.1,\n      \"query\": {\n        \"bool\": {\n          \"should\": [{\n            \"match\": {\n              \"title\": {\n                query: title,\n                boost: 2,\n                fuzziness: \"auto\"\n              }\n            }\n          }, {\n            \"match\": {\n              \"author\": {\n                query: author,\n                boost: 1\n              }\n            }\n          }, {\n            \"match\": {\n              year: year\n            }\n          }]\n        }\n      }\n    };\n    const res = await esclient.search({\n      index: index,\n      body: query\n    });\n    var results = [];\n\n    for (let hit in res) {\n      results.push({\n        title: hit.title,\n        author: hit.author\n      });\n    }\n\n    return JSON.stringify(res);\n  } catch (err) {\n    console.error(`An error occurred while searching PDF`);\n    console.error(err);\n  }\n}\n\nmodule.exports = {\n  esclient,\n  createIndex,\n  indexPDF,\n  simpleSearchPDF,\n  advancedSearchPDF\n};","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/elastic.js"],"names":["Client","require","config","elasticUrl","process","env","ELASTIC_URL","esclient","node","pdf2base64","index","createIndex","indExists","indices","exists","body","create","console","log","addPipeline","err","error","indexPDF","filename","id","title","author","year","base64pdf","pipeline","pdf","ingest","putPipeline","then","catch","simpleSearchPDF","keyword","query","match","fuzziness","res","search","results","hit","push","JSON","stringify","advancedSearchPDF","boost","module","exports"],"mappings":"AAAA;AACA,MAAM;AAAEA,EAAAA;AAAF,IAAaC,OAAO,CAAC,eAAD,CAA1B;;AACmBA,OAAO,CAAC,QAAD,CAAP,CAAkBC,MAAlB;;AAEnB,MAAMC,UAAU,GAAGC,OAAO,CAACC,GAAR,CAAYC,WAAZ,IAA2B,uBAA9C;AACA,MAAMC,QAAQ,GAAK,IAAIP,MAAJ,CAAW;AAAEQ,EAAAA,IAAI,EAAEL;AAAR,CAAX,CAAnB;;AACA,MAAMM,UAAU,GAAGR,OAAO,CAAC,eAAD,CAA1B,C,CAA6C;;;AAC7C,MAAMS,KAAK,GAAG,WAAd;AAEA;AACA;AACA;;AACA,eAAeC,WAAf,GAA6B;AAC3B,MAAI;AACL,UAAMC,SAAS,GAAG,MAAML,QAAQ,CAACM,OAAT,CAAiBC,MAAjB,CAAwB;AAACJ,MAAAA,KAAK,EAAGA;AAAT,KAAxB,CAAxB,CADK,CAC6D;;AAClE,QAAI,CAACE,SAAS,CAACG,IAAf,EAAqB;AACpB,YAAMR,QAAQ,CAACM,OAAT,CAAiBG,MAAjB,CAAwB;AAAEN,QAAAA,KAAK,EAAEA;AAAT,OAAxB,CAAN;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgBR,KAAM,EAAnC;AACA,YAAMS,WAAW,EAAjB;AACA;AAEC,GARD,CAQE,OAAOC,GAAP,EAAY;AACZH,IAAAA,OAAO,CAACI,KAAR,CAAe,8CAA6CX,KAAM,GAAlE;AACAO,IAAAA,OAAO,CAACI,KAAR,CAAcD,GAAd;AACD;AACF;AAED;AACA;AACA;AACA;;;AACA,eAAeE,QAAf,CAAwBC,QAAxB,EAAkCC,EAAlC,EAAsCC,KAAtC,EAA6CC,MAA7C,EAAqDC,IAArD,EAA2D;AACzD,MAAI;AAEJ;AACD,QAAIC,SAAS,GAAG,MAAMnB,UAAU,CAAC,2BAAyBc,QAA1B,CAAhC,CAHK,CAGgE;;AAEjE,UAAMhB,QAAQ,CAACG,KAAT,CAAe;AACnBA,MAAAA,KAAK,EAAGA,KADW;AAEnBc,MAAAA,EAAE,EAAGA,EAFc;AAGnBK,MAAAA,QAAQ,EAAE,YAHS;AAInBd,MAAAA,IAAI,EAAG;AACLU,QAAAA,KAAK,EAAGA,KADH;AAELC,QAAAA,MAAM,EAAGA,MAFJ;AAGLC,QAAAA,IAAI,EAAGA,IAHF;AAILG,QAAAA,GAAG,EAAGF;AAJD;AAJY,KAAf,CAAN;AAcFX,IAAAA,OAAO,CAACC,GAAR,CAAa,6BAAb;AACM,GApBP,CAqBD,OAAOE,GAAP,EAAY;AACTH,IAAAA,OAAO,CAACI,KAAR,CAAe,0CAAf;AACAJ,IAAAA,OAAO,CAACI,KAAR,CAAcD,GAAd;AACC;AACJ;AAED;AACA;AACA;;;AACA,eAAeD,WAAf,GAA4B;AAC1B,QAAMZ,QAAQ,CAACwB,MAAT,CAAgBC,WAAhB,CAA4B;AACnCR,IAAAA,EAAE,EAAE,YAD+B;AAEhCT,IAAAA,IAAI,EAAE;AACR,qBAAgB,gCADR;AAER,oBAAe,CACd;AACC,sBAAe;AACd,mBAAU;AADI;AADhB,OADc;AAFP;AAF0B,GAA5B,EAYLkB,IAZK,CAYA,YAAY;AACfhB,IAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACD,GAdI,EAeLgB,KAfK,CAeC,UAAUb,KAAV,EAAiB;AACrBJ,IAAAA,OAAO,CAACC,GAAR,CAAa,sCAAb;AACHD,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACE,GAlBI,CAAN;AAmBD;;AAAA;AAED;AACA;AACA;AACA;AACA;;AACA,eAAec,eAAf,CAA+BC,OAA/B,EAAwC;AAExC,MAAI;AACF,UAAMC,KAAK,GAAG;AACZA,MAAAA,KAAK,EAAE;AACLC,QAAAA,KAAK,EAAE;AACL,gCAAsB;AACpBD,YAAAA,KAAK,EAAED,OADa;AAEpBG,YAAAA,SAAS,EAAE;AAFS;AADjB;AADF;AADK,KAAd;AAWA,UAAMC,GAAG,GAAG,MAAMjC,QAAQ,CAACkC,MAAT,CAAgB;AAChC/B,MAAAA,KAAK,EAAEA,KADyB;AAEhCK,MAAAA,IAAI,EAAGsB;AAFyB,KAAhB,CAAlB;AAKA,QAAIK,OAAO,GAAG,EAAd;;AACA,SAAK,IAAIC,GAAT,IAAgBH,GAAhB,EAAsB;AACpBE,MAAAA,OAAO,CAACE,IAAR,CAAa;AACXnB,QAAAA,KAAK,EAACkB,GAAG,CAAClB,KADC;AAEXC,QAAAA,MAAM,EAACiB,GAAG,CAACjB;AAFA,OAAb;AAID;;AAED,WAAOmB,IAAI,CAACC,SAAL,CAAeN,GAAf,CAAP;AAED,GA3BD,CA2BG,OAAOpB,GAAP,EAAY;AACXH,IAAAA,OAAO,CAACI,KAAR,CAAe,uCAAf;AACAJ,IAAAA,OAAO,CAACI,KAAR,CAAcD,GAAd;AACC;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAe2B,iBAAf,CAAiCtB,KAAjC,EAAwCC,MAAxC,EAAgDC,IAAhD,EAAsD;AAEtD,MAAI;AACF,UAAMU,KAAK,GAAG;AACd,mBAAa,GADC;AAEd,eAAS;AACP,gBAAQ;AACN,oBAAU,CACR;AAAE,qBAAS;AAAE,uBAAU;AAACA,gBAAAA,KAAK,EAAEZ,KAAR;AAAgBuB,gBAAAA,KAAK,EAAE,CAAvB;AAA0BT,gBAAAA,SAAS,EAAE;AAArC;AAAZ;AAAX,WADQ,EAER;AAAE,qBAAS;AAAE,wBAAW;AAACF,gBAAAA,KAAK,EAAEX,MAAR;AAAgBsB,gBAAAA,KAAK,EAAE;AAAvB;AAAb;AAAX,WAFQ,EAGd;AAAE,qBAAS;AAAErB,cAAAA,IAAI,EAAGA;AAAT;AAAX,WAHc;AADJ;AADD;AAFK,KAAd;AAaF,UAAMa,GAAG,GAAG,MAAMjC,QAAQ,CAACkC,MAAT,CAAgB;AAChC/B,MAAAA,KAAK,EAAEA,KADyB;AAEhCK,MAAAA,IAAI,EAAGsB;AAFyB,KAAhB,CAAlB;AAKA,QAAIK,OAAO,GAAG,EAAd;;AACA,SAAK,IAAIC,GAAT,IAAgBH,GAAhB,EAAsB;AACpBE,MAAAA,OAAO,CAACE,IAAR,CAAa;AACXnB,QAAAA,KAAK,EAACkB,GAAG,CAAClB,KADC;AAEXC,QAAAA,MAAM,EAACiB,GAAG,CAACjB;AAFA,OAAb;AAID;;AAED,WAAOmB,IAAI,CAACC,SAAL,CAAeN,GAAf,CAAP;AAEC,GA7BD,CA6BG,OAAOpB,GAAP,EAAY;AACXH,IAAAA,OAAO,CAACI,KAAR,CAAe,uCAAf;AACAJ,IAAAA,OAAO,CAACI,KAAR,CAAcD,GAAd;AACC;AACJ;;AAID6B,MAAM,CAACC,OAAP,GAAiB;AACf3C,EAAAA,QADe;AAEfI,EAAAA,WAFe;AAGfW,EAAAA,QAHe;AAIfa,EAAAA,eAJe;AAKfY,EAAAA;AALe,CAAjB","sourcesContent":["//Imports and global variables\r\nconst { Client } = require(\"elasticsearch\"); \r\n                   require(\"dotenv\").config();\r\n\r\nconst elasticUrl = process.env.ELASTIC_URL || \"http://localhost:9200\";\r\nconst esclient   = new Client({ node: elasticUrl });\r\nconst pdf2base64 = require('pdf-to-base64'); //muss man installiern\r\nconst index = \"peerindex\";\r\n\r\n/**\r\n* createIndex named by const index\r\n*/\r\nasync function createIndex() { \r\n  try {\r\n\tconst indExists = await esclient.indices.exists({index : index}); //check if index exists\r\n\tif (!indExists.body) {\r\n\t\tawait esclient.indices.create({ index: index});\r\n\t\tconsole.log(`Created index ${index}`);\r\n\t\tawait addPipeline();\r\n\t}\r\n\t\r\n  } catch (err) {\r\n    console.error(`An error occurred while creating the index ${index}:`);\r\n    console.error(err);\r\n  }\r\n}\r\n\r\n/**\r\n* indexing PDF\r\n* @param filename, id, title, author\r\n*/\r\nasync function indexPDF(filename, id, title, author, year) { \r\n  try {\r\n\t\r\n  //creates base64 string \r\n\tvar base64pdf = await pdf2base64(\"/usr/src/app/src/data/\"+filename); //hier auf Pfad achten (PDF einfach in Ordner Data ablegen)\r\n\r\n\t\t\t\t\tawait esclient.index({\r\n\t\t\t\t\t\t\tindex : index, \r\n\t\t\t\t\t\t\tid : id,\r\n\t\t\t\t\t\t\tpipeline: \"attachment\",\r\n\t\t\t\t\t\t\tbody : {\r\n\t\t\t\t\t\t\t\t\ttitle : title,\r\n\t\t\t\t\t\t\t\t\tauthor : author,\r\n\t\t\t\t\t\t\t\t\tyear : year,\r\n\t\t\t\t\t\t\t\t\tpdf : base64pdf\r\n\t\t\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t}\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t}\t\r\n\t\t\t\t);\r\n\t\t\tconsole.log(`indexing pdf was successful`);\r\n        }\r\n\tcatch (err) {\r\n    console.error(`An error occurred while indexing the PDF`);\r\n    console.error(err);\r\n    }\t\r\n}\r\n\r\n/**\r\n* adding requiered pipeline for indexing PDFs\r\n*/\r\nasync function addPipeline(){\r\n  await esclient.ingest.putPipeline({\r\n\tid: 'attachment',\r\n    body: {\r\n\t\t\"description\" : \"Extract attachment information\",\r\n\t\t\"processors\" : [\r\n\t\t\t{\r\n\t\t\t\t\"attachment\" : {\r\n\t\t\t\t\t\"field\" : \"pdf\"\r\n\t\t\t\t}\r\n\t\t\t}]\r\n\t}\r\n  })\r\n  .then(function () {\r\n     console.log(\"putPipeline successful\");\r\n   })\r\n  .catch(function (error) {\r\n     console.log(`An error occurred while put Pipeline`);\r\n\t console.log(error);\r\n   });\r\n};\r\n\r\n/**\r\n* search PDF by keyword\r\n* @param keyoword\r\n* @return JSON with Results\r\n*/\r\nasync function simpleSearchPDF(keyword) {\r\n\r\ntry {\t\r\n  const query = {\r\n    query: {\r\n      match: {\r\n        \"attachment.content\": {\r\n          query: keyword,\r\n          fuzziness: \"auto\"\r\n        }\r\n      }\r\n    }\r\n  }\t\r\n\t\r\n  const res = await esclient.search({\r\n    index: index, \r\n    body:  query\r\n  });\r\n  \r\n  var results = [];\r\n  for (let hit in res ) {\r\n    results.push({\r\n      title:hit.title,\r\n      author:hit.author\r\n    });\r\n  }\r\n\r\n  return JSON.stringify(res);\r\n\r\n}  catch (err) {\r\n    console.error(`An error occurred while searching PDF`);\r\n    console.error(err);\r\n    }\t\r\n}\r\n\r\n/**\r\n* Search PDF by multiple optinal params while at least one param must match exactly.\r\n* Not filled textfields should hand over an empty string (\"\")\r\n* @param title, author, year\r\n* @return JSON with Results\r\n*/\r\nasync function advancedSearchPDF(title, author, year) {\r\n\r\ntry {\r\n  const query = {\r\n  \"min_score\": 0.1,\t  \r\n  \"query\": { \r\n    \"bool\": { \r\n      \"should\": [\r\n        { \"match\": { \"title\":  {query: title , boost: 2, fuzziness: \"auto\"  }}},\r\n        { \"match\": { \"author\" : {query: author, boost: 1 }}},\r\n\t\t{ \"match\": { year : year}}\r\n\t  ]\r\n    }\r\n  }\r\n}\t\r\n\t\r\nconst res = await esclient.search({\r\n  index: index, \r\n  body:  query\r\n});\r\n\r\nvar results = [];\r\nfor (let hit in res ) {\r\n  results.push({\r\n    title:hit.title,\r\n    author:hit.author\r\n  });\r\n}\r\n\r\nreturn JSON.stringify(res);\r\n\r\n}  catch (err) {\r\n    console.error(`An error occurred while searching PDF`);\r\n    console.error(err);\r\n    }\t\r\n}\r\n\r\n\r\n\r\nmodule.exports = {\r\n  esclient,\r\n  createIndex,\r\n  indexPDF,\r\n  simpleSearchPDF,\r\n  advancedSearchPDF\r\n};"]},"metadata":{},"sourceType":"module"}