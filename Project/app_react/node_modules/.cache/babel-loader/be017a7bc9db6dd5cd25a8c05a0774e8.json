{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['analyzer', 'analyze_wildcard', 'ccs_minimize_roundtrips', 'default_operator', 'df', 'explain', 'stored_fields', 'docvalue_fields', 'from', 'ignore_unavailable', 'ignore_throttled', 'allow_no_indices', 'expand_wildcards', 'lenient', 'preference', 'q', 'routing', 'scroll', 'search_type', 'size', 'sort', '_source', '_source_excludes', '_source_exclude', '_source_includes', '_source_include', 'terminate_after', 'stats', 'suggest_field', 'suggest_mode', 'suggest_size', 'suggest_text', 'timeout', 'track_scores', 'track_total_hits', 'allow_partial_search_results', 'typed_keys', 'version', 'seq_no_primary_term', 'request_cache', 'batched_reduce_size', 'max_concurrent_shard_requests', 'pre_filter_shard_size', 'rest_total_hits_as_int', 'min_compatible_shard_node', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  analyzeWildcard: 'analyze_wildcard',\n  ccsMinimizeRoundtrips: 'ccs_minimize_roundtrips',\n  defaultOperator: 'default_operator',\n  storedFields: 'stored_fields',\n  docvalueFields: 'docvalue_fields',\n  ignoreUnavailable: 'ignore_unavailable',\n  ignoreThrottled: 'ignore_throttled',\n  allowNoIndices: 'allow_no_indices',\n  expandWildcards: 'expand_wildcards',\n  searchType: 'search_type',\n  _sourceExcludes: '_source_excludes',\n  _sourceExclude: '_source_exclude',\n  _sourceIncludes: '_source_includes',\n  _sourceInclude: '_source_include',\n  terminateAfter: 'terminate_after',\n  suggestField: 'suggest_field',\n  suggestMode: 'suggest_mode',\n  suggestSize: 'suggest_size',\n  suggestText: 'suggest_text',\n  trackScores: 'track_scores',\n  trackTotalHits: 'track_total_hits',\n  allowPartialSearchResults: 'allow_partial_search_results',\n  typedKeys: 'typed_keys',\n  seqNoPrimaryTerm: 'seq_no_primary_term',\n  requestCache: 'request_cache',\n  batchedReduceSize: 'batched_reduce_size',\n  maxConcurrentShardRequests: 'max_concurrent_shard_requests',\n  preFilterShardSize: 'pre_filter_shard_size',\n  restTotalHitsAsInt: 'rest_total_hits_as_int',\n  minCompatibleShardNode: 'min_compatible_shard_node',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\nfunction searchApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required url components\n\n  if (params.type != null && params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    type,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null && type != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_search';\n  } else if (index != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_search';\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_search';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n}\n\nmodule.exports = searchApi;","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/search.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","analyzeWildcard","ccsMinimizeRoundtrips","defaultOperator","storedFields","docvalueFields","ignoreUnavailable","ignoreThrottled","allowNoIndices","expandWildcards","searchType","_sourceExcludes","_sourceExclude","_sourceIncludes","_sourceInclude","terminateAfter","suggestField","suggestMode","suggestSize","suggestText","trackScores","trackTotalHits","allowPartialSearchResults","typedKeys","seqNoPrimaryTerm","requestCache","batchedReduceSize","maxConcurrentShardRequests","preFilterShardSize","restTotalHitsAsInt","minCompatibleShardNode","errorTrace","filterPath","searchApi","params","options","callback","type","index","err","method","body","querystring","path","encodeURIComponent","request","transport","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['analyzer', 'analyze_wildcard', 'ccs_minimize_roundtrips', 'default_operator', 'df', 'explain', 'stored_fields', 'docvalue_fields', 'from', 'ignore_unavailable', 'ignore_throttled', 'allow_no_indices', 'expand_wildcards', 'lenient', 'preference', 'q', 'routing', 'scroll', 'search_type', 'size', 'sort', '_source', '_source_excludes', '_source_exclude', '_source_includes', '_source_include', 'terminate_after', 'stats', 'suggest_field', 'suggest_mode', 'suggest_size', 'suggest_text', 'timeout', 'track_scores', 'track_total_hits', 'allow_partial_search_results', 'typed_keys', 'version', 'seq_no_primary_term', 'request_cache', 'batched_reduce_size', 'max_concurrent_shard_requests', 'pre_filter_shard_size', 'rest_total_hits_as_int', 'min_compatible_shard_node', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\r\nconst snakeCase = { analyzeWildcard: 'analyze_wildcard', ccsMinimizeRoundtrips: 'ccs_minimize_roundtrips', defaultOperator: 'default_operator', storedFields: 'stored_fields', docvalueFields: 'docvalue_fields', ignoreUnavailable: 'ignore_unavailable', ignoreThrottled: 'ignore_throttled', allowNoIndices: 'allow_no_indices', expandWildcards: 'expand_wildcards', searchType: 'search_type', _sourceExcludes: '_source_excludes', _sourceExclude: '_source_exclude', _sourceIncludes: '_source_includes', _sourceInclude: '_source_include', terminateAfter: 'terminate_after', suggestField: 'suggest_field', suggestMode: 'suggest_mode', suggestSize: 'suggest_size', suggestText: 'suggest_text', trackScores: 'track_scores', trackTotalHits: 'track_total_hits', allowPartialSearchResults: 'allow_partial_search_results', typedKeys: 'typed_keys', seqNoPrimaryTerm: 'seq_no_primary_term', requestCache: 'request_cache', batchedReduceSize: 'batched_reduce_size', maxConcurrentShardRequests: 'max_concurrent_shard_requests', preFilterShardSize: 'pre_filter_shard_size', restTotalHitsAsInt: 'rest_total_hits_as_int', minCompatibleShardNode: 'min_compatible_shard_node', errorTrace: 'error_trace', filterPath: 'filter_path' }\r\n\r\nfunction searchApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required url components\r\n  if (params.type != null && (params.index == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, type, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null && (type) != null) {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_search'\r\n  } else if ((index) != null) {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_search'\r\n  } else {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + '_search'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nmodule.exports = searchApi\r\n"]},"metadata":{},"sourceType":"module"}