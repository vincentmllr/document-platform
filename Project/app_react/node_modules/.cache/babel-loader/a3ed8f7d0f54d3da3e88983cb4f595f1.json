{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['system_id', 'system_api_version', 'interval', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  systemId: 'system_id',\n  systemApiVersion: 'system_api_version',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\nfunction MonitoringApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n_c = MonitoringApi;\n\nMonitoringApi.prototype.bulk = function monitoringBulkApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    type,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (type != null) {\n    if (method == null) method = 'POST';\n    path = '/' + '_monitoring' + '/' + encodeURIComponent(type) + '/' + 'bulk';\n  } else {\n    if (method == null) method = 'POST';\n    path = '/' + '_monitoring' + '/' + 'bulk';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    bulkBody: body,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nmodule.exports = MonitoringApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"MonitoringApi\");","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/monitoring.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","systemId","systemApiVersion","errorTrace","filterPath","MonitoringApi","transport","ConfigurationError","prototype","bulk","monitoringBulkApi","params","options","callback","body","err","method","type","querystring","path","encodeURIComponent","request","bulkBody","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;AAEA,MAAM;AAAEA,EAAAA,WAAF;AAAeC,EAAAA,aAAf;AAA8BC,EAAAA,kBAA9B;AAAkDC,EAAAA;AAAlD,IAA0EC,OAAO,CAAC,UAAD,CAAvF;;AACA,MAAMC,mBAAmB,GAAG,CAAC,WAAD,EAAc,oBAAd,EAAoC,UAApC,EAAgD,QAAhD,EAA0D,OAA1D,EAAmE,aAAnE,EAAkF,QAAlF,EAA4F,aAA5F,CAA5B;AACA,MAAMC,SAAS,GAAG;AAAEC,EAAAA,QAAQ,EAAE,WAAZ;AAAyBC,EAAAA,gBAAgB,EAAE,oBAA3C;AAAiEC,EAAAA,UAAU,EAAE,aAA7E;AAA4FC,EAAAA,UAAU,EAAE;AAAxG,CAAlB;;AAEA,SAASC,aAAT,CAAwBC,SAAxB,EAAmCC,kBAAnC,EAAuD;AACrD,OAAKD,SAAL,GAAiBA,SAAjB;AACA,OAAKT,mBAAL,IAA4BU,kBAA5B;AACD;;KAHQF,a;;AAKTA,aAAa,CAACG,SAAd,CAAwBC,IAAxB,GAA+B,SAASC,iBAAT,CAA4BC,MAA5B,EAAoCC,OAApC,EAA6CC,QAA7C,EAAuD;AACpF;AAAC,GAACF,MAAD,EAASC,OAAT,EAAkBC,QAAlB,IAA8BjB,kBAAkB,CAACe,MAAD,EAASC,OAAT,EAAkBC,QAAlB,CAAhD,CADmF,CAGpF;;AACA,MAAIF,MAAM,CAACG,IAAP,IAAe,IAAnB,EAAyB;AACvB,UAAMC,GAAG,GAAG,IAAI,KAAKlB,mBAAL,CAAJ,CAA8B,kCAA9B,CAAZ;AACA,WAAOH,WAAW,CAACqB,GAAD,EAAMF,QAAN,CAAlB;AACD;;AAED,MAAI;AAAEG,IAAAA,MAAF;AAAUF,IAAAA,IAAV;AAAgBG,IAAAA,IAAhB;AAAsB,OAAGC;AAAzB,MAAyCP,MAA7C;AACAO,EAAAA,WAAW,GAAGvB,aAAa,CAACI,mBAAD,EAAsBC,SAAtB,EAAiCkB,WAAjC,CAA3B;AAEA,MAAIC,IAAI,GAAG,EAAX;;AACA,MAAKF,IAAD,IAAU,IAAd,EAAoB;AAClB,QAAID,MAAM,IAAI,IAAd,EAAoBA,MAAM,GAAG,MAAT;AACpBG,IAAAA,IAAI,GAAG,MAAM,aAAN,GAAsB,GAAtB,GAA4BC,kBAAkB,CAACH,IAAD,CAA9C,GAAuD,GAAvD,GAA6D,MAApE;AACD,GAHD,MAGO;AACL,QAAID,MAAM,IAAI,IAAd,EAAoBA,MAAM,GAAG,MAAT;AACpBG,IAAAA,IAAI,GAAG,MAAM,aAAN,GAAsB,GAAtB,GAA4B,MAAnC;AACD,GAnBmF,CAqBpF;;;AACA,QAAME,OAAO,GAAG;AACdL,IAAAA,MADc;AAEdG,IAAAA,IAFc;AAGdG,IAAAA,QAAQ,EAAER,IAHI;AAIdI,IAAAA;AAJc,GAAhB;AAOA,SAAO,KAAKZ,SAAL,CAAee,OAAf,CAAuBA,OAAvB,EAAgCT,OAAhC,EAAyCC,QAAzC,CAAP;AACD,CA9BD;;AAgCAU,MAAM,CAACC,OAAP,GAAiBnB,aAAjB","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['system_id', 'system_api_version', 'interval', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\r\nconst snakeCase = { systemId: 'system_id', systemApiVersion: 'system_api_version', errorTrace: 'error_trace', filterPath: 'filter_path' }\r\n\r\nfunction MonitoringApi (transport, ConfigurationError) {\r\n  this.transport = transport\r\n  this[kConfigurationError] = ConfigurationError\r\n}\r\n\r\nMonitoringApi.prototype.bulk = function monitoringBulkApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, type, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((type) != null) {\r\n    if (method == null) method = 'POST'\r\n    path = '/' + '_monitoring' + '/' + encodeURIComponent(type) + '/' + 'bulk'\r\n  } else {\r\n    if (method == null) method = 'POST'\r\n    path = '/' + '_monitoring' + '/' + 'bulk'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    bulkBody: body,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nmodule.exports = MonitoringApi\r\n"]},"metadata":{},"sourceType":"module"}