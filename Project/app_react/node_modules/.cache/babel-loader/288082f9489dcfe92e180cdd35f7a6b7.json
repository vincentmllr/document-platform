{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\nfunction SlmApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n_c = SlmApi;\n\nSlmApi.prototype.deleteLifecycle = function slmDeleteLifecycleApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.policy_id == null && params.policyId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: policy_id or policyId');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    policyId,\n    policy_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_slm' + '/' + 'policy' + '/' + encodeURIComponent(policy_id || policyId); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSlmApi.prototype.executeLifecycle = function slmExecuteLifecycleApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.policy_id == null && params.policyId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: policy_id or policyId');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    policyId,\n    policy_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_slm' + '/' + 'policy' + '/' + encodeURIComponent(policy_id || policyId) + '/' + '_execute'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSlmApi.prototype.executeRetention = function slmExecuteRetentionApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_slm' + '/' + '_execute_retention'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSlmApi.prototype.getLifecycle = function slmGetLifecycleApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    policyId,\n    policy_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if ((policy_id || policyId) != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_slm' + '/' + 'policy' + '/' + encodeURIComponent(policy_id || policyId);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_slm' + '/' + 'policy';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSlmApi.prototype.getStats = function slmGetStatsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_slm' + '/' + 'stats'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSlmApi.prototype.getStatus = function slmGetStatusApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_slm' + '/' + 'status'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSlmApi.prototype.putLifecycle = function slmPutLifecycleApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.policy_id == null && params.policyId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: policy_id or policyId');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    policyId,\n    policy_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_slm' + '/' + 'policy' + '/' + encodeURIComponent(policy_id || policyId); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSlmApi.prototype.start = function slmStartApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_slm' + '/' + 'start'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSlmApi.prototype.stop = function slmStopApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_slm' + '/' + 'stop'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nObject.defineProperties(SlmApi.prototype, {\n  delete_lifecycle: {\n    get() {\n      return this.deleteLifecycle;\n    }\n\n  },\n  execute_lifecycle: {\n    get() {\n      return this.executeLifecycle;\n    }\n\n  },\n  execute_retention: {\n    get() {\n      return this.executeRetention;\n    }\n\n  },\n  get_lifecycle: {\n    get() {\n      return this.getLifecycle;\n    }\n\n  },\n  get_stats: {\n    get() {\n      return this.getStats;\n    }\n\n  },\n  get_status: {\n    get() {\n      return this.getStatus;\n    }\n\n  },\n  put_lifecycle: {\n    get() {\n      return this.putLifecycle;\n    }\n\n  }\n});\nmodule.exports = SlmApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"SlmApi\");","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/slm.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","errorTrace","filterPath","SlmApi","transport","ConfigurationError","prototype","deleteLifecycle","slmDeleteLifecycleApi","params","options","callback","policy_id","policyId","err","method","body","querystring","path","encodeURIComponent","request","executeLifecycle","slmExecuteLifecycleApi","executeRetention","slmExecuteRetentionApi","getLifecycle","slmGetLifecycleApi","getStats","slmGetStatsApi","getStatus","slmGetStatusApi","putLifecycle","slmPutLifecycleApi","start","slmStartApi","stop","slmStopApi","Object","defineProperties","delete_lifecycle","get","execute_lifecycle","execute_retention","get_lifecycle","get_stats","get_status","put_lifecycle","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;AAEA,MAAM;AAAEA,EAAAA,WAAF;AAAeC,EAAAA,aAAf;AAA8BC,EAAAA,kBAA9B;AAAkDC,EAAAA;AAAlD,IAA0EC,OAAO,CAAC,UAAD,CAAvF;;AACA,MAAMC,mBAAmB,GAAG,CAAC,QAAD,EAAW,OAAX,EAAoB,aAApB,EAAmC,QAAnC,EAA6C,aAA7C,CAA5B;AACA,MAAMC,SAAS,GAAG;AAAEC,EAAAA,UAAU,EAAE,aAAd;AAA6BC,EAAAA,UAAU,EAAE;AAAzC,CAAlB;;AAEA,SAASC,MAAT,CAAiBC,SAAjB,EAA4BC,kBAA5B,EAAgD;AAC9C,OAAKD,SAAL,GAAiBA,SAAjB;AACA,OAAKP,mBAAL,IAA4BQ,kBAA5B;AACD;;KAHQF,M;;AAKTA,MAAM,CAACG,SAAP,CAAiBC,eAAjB,GAAmC,SAASC,qBAAT,CAAgCC,MAAhC,EAAwCC,OAAxC,EAAiDC,QAAjD,EAA2D;AAC5F;AAAC,GAACF,MAAD,EAASC,OAAT,EAAkBC,QAAlB,IAA8Bf,kBAAkB,CAACa,MAAD,EAASC,OAAT,EAAkBC,QAAlB,CAAhD,CAD2F,CAG5F;;AACA,MAAIF,MAAM,CAACG,SAAP,IAAoB,IAApB,IAA4BH,MAAM,CAACI,QAAP,IAAmB,IAAnD,EAAyD;AACvD,UAAMC,GAAG,GAAG,IAAI,KAAKjB,mBAAL,CAAJ,CAA8B,mDAA9B,CAAZ;AACA,WAAOH,WAAW,CAACoB,GAAD,EAAMH,QAAN,CAAlB;AACD;;AAED,MAAI;AAAEI,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBH,IAAAA,QAAhB;AAA0BD,IAAAA,SAA1B;AAAqC,OAAGK;AAAxC,MAAwDR,MAA5D;AACAQ,EAAAA,WAAW,GAAGtB,aAAa,CAACI,mBAAD,EAAsBC,SAAtB,EAAiCiB,WAAjC,CAA3B;AAEA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIH,MAAM,IAAI,IAAd,EAAoBA,MAAM,GAAG,QAAT;AACpBG,EAAAA,IAAI,GAAG,MAAM,MAAN,GAAe,GAAf,GAAqB,QAArB,GAAgC,GAAhC,GAAsCC,kBAAkB,CAACP,SAAS,IAAIC,QAAd,CAA/D,CAd4F,CAgB5F;;AACA,QAAMO,OAAO,GAAG;AACdL,IAAAA,MADc;AAEdG,IAAAA,IAFc;AAGdF,IAAAA,IAAI,EAAEA,IAAI,IAAI,EAHA;AAIdC,IAAAA;AAJc,GAAhB;AAOA,SAAO,KAAKb,SAAL,CAAegB,OAAf,CAAuBA,OAAvB,EAAgCV,OAAhC,EAAyCC,QAAzC,CAAP;AACD,CAzBD;;AA2BAR,MAAM,CAACG,SAAP,CAAiBe,gBAAjB,GAAoC,SAASC,sBAAT,CAAiCb,MAAjC,EAAyCC,OAAzC,EAAkDC,QAAlD,EAA4D;AAC9F;AAAC,GAACF,MAAD,EAASC,OAAT,EAAkBC,QAAlB,IAA8Bf,kBAAkB,CAACa,MAAD,EAASC,OAAT,EAAkBC,QAAlB,CAAhD,CAD6F,CAG9F;;AACA,MAAIF,MAAM,CAACG,SAAP,IAAoB,IAApB,IAA4BH,MAAM,CAACI,QAAP,IAAmB,IAAnD,EAAyD;AACvD,UAAMC,GAAG,GAAG,IAAI,KAAKjB,mBAAL,CAAJ,CAA8B,mDAA9B,CAAZ;AACA,WAAOH,WAAW,CAACoB,GAAD,EAAMH,QAAN,CAAlB;AACD;;AAED,MAAI;AAAEI,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBH,IAAAA,QAAhB;AAA0BD,IAAAA,SAA1B;AAAqC,OAAGK;AAAxC,MAAwDR,MAA5D;AACAQ,EAAAA,WAAW,GAAGtB,aAAa,CAACI,mBAAD,EAAsBC,SAAtB,EAAiCiB,WAAjC,CAA3B;AAEA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIH,MAAM,IAAI,IAAd,EAAoBA,MAAM,GAAG,KAAT;AACpBG,EAAAA,IAAI,GAAG,MAAM,MAAN,GAAe,GAAf,GAAqB,QAArB,GAAgC,GAAhC,GAAsCC,kBAAkB,CAACP,SAAS,IAAIC,QAAd,CAAxD,GAAkF,GAAlF,GAAwF,UAA/F,CAd8F,CAgB9F;;AACA,QAAMO,OAAO,GAAG;AACdL,IAAAA,MADc;AAEdG,IAAAA,IAFc;AAGdF,IAAAA,IAAI,EAAEA,IAAI,IAAI,EAHA;AAIdC,IAAAA;AAJc,GAAhB;AAOA,SAAO,KAAKb,SAAL,CAAegB,OAAf,CAAuBA,OAAvB,EAAgCV,OAAhC,EAAyCC,QAAzC,CAAP;AACD,CAzBD;;AA2BAR,MAAM,CAACG,SAAP,CAAiBiB,gBAAjB,GAAoC,SAASC,sBAAT,CAAiCf,MAAjC,EAAyCC,OAAzC,EAAkDC,QAAlD,EAA4D;AAC9F;AAAC,GAACF,MAAD,EAASC,OAAT,EAAkBC,QAAlB,IAA8Bf,kBAAkB,CAACa,MAAD,EAASC,OAAT,EAAkBC,QAAlB,CAAhD;AAED,MAAI;AAAEI,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgB,OAAGC;AAAnB,MAAmCR,MAAvC;AACAQ,EAAAA,WAAW,GAAGtB,aAAa,CAACI,mBAAD,EAAsBC,SAAtB,EAAiCiB,WAAjC,CAA3B;AAEA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIH,MAAM,IAAI,IAAd,EAAoBA,MAAM,GAAG,MAAT;AACpBG,EAAAA,IAAI,GAAG,MAAM,MAAN,GAAe,GAAf,GAAqB,oBAA5B,CAR8F,CAU9F;;AACA,QAAME,OAAO,GAAG;AACdL,IAAAA,MADc;AAEdG,IAAAA,IAFc;AAGdF,IAAAA,IAAI,EAAEA,IAAI,IAAI,EAHA;AAIdC,IAAAA;AAJc,GAAhB;AAOA,SAAO,KAAKb,SAAL,CAAegB,OAAf,CAAuBA,OAAvB,EAAgCV,OAAhC,EAAyCC,QAAzC,CAAP;AACD,CAnBD;;AAqBAR,MAAM,CAACG,SAAP,CAAiBmB,YAAjB,GAAgC,SAASC,kBAAT,CAA6BjB,MAA7B,EAAqCC,OAArC,EAA8CC,QAA9C,EAAwD;AACtF;AAAC,GAACF,MAAD,EAASC,OAAT,EAAkBC,QAAlB,IAA8Bf,kBAAkB,CAACa,MAAD,EAASC,OAAT,EAAkBC,QAAlB,CAAhD;AAED,MAAI;AAAEI,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBH,IAAAA,QAAhB;AAA0BD,IAAAA,SAA1B;AAAqC,OAAGK;AAAxC,MAAwDR,MAA5D;AACAQ,EAAAA,WAAW,GAAGtB,aAAa,CAACI,mBAAD,EAAsBC,SAAtB,EAAiCiB,WAAjC,CAA3B;AAEA,MAAIC,IAAI,GAAG,EAAX;;AACA,MAAI,CAACN,SAAS,IAAIC,QAAd,KAA2B,IAA/B,EAAqC;AACnC,QAAIE,MAAM,IAAI,IAAd,EAAoBA,MAAM,GAAG,KAAT;AACpBG,IAAAA,IAAI,GAAG,MAAM,MAAN,GAAe,GAAf,GAAqB,QAArB,GAAgC,GAAhC,GAAsCC,kBAAkB,CAACP,SAAS,IAAIC,QAAd,CAA/D;AACD,GAHD,MAGO;AACL,QAAIE,MAAM,IAAI,IAAd,EAAoBA,MAAM,GAAG,KAAT;AACpBG,IAAAA,IAAI,GAAG,MAAM,MAAN,GAAe,GAAf,GAAqB,QAA5B;AACD,GAbqF,CAetF;;;AACA,QAAME,OAAO,GAAG;AACdL,IAAAA,MADc;AAEdG,IAAAA,IAFc;AAGdF,IAAAA,IAAI,EAAE,IAHQ;AAIdC,IAAAA;AAJc,GAAhB;AAOA,SAAO,KAAKb,SAAL,CAAegB,OAAf,CAAuBA,OAAvB,EAAgCV,OAAhC,EAAyCC,QAAzC,CAAP;AACD,CAxBD;;AA0BAR,MAAM,CAACG,SAAP,CAAiBqB,QAAjB,GAA4B,SAASC,cAAT,CAAyBnB,MAAzB,EAAiCC,OAAjC,EAA0CC,QAA1C,EAAoD;AAC9E;AAAC,GAACF,MAAD,EAASC,OAAT,EAAkBC,QAAlB,IAA8Bf,kBAAkB,CAACa,MAAD,EAASC,OAAT,EAAkBC,QAAlB,CAAhD;AAED,MAAI;AAAEI,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgB,OAAGC;AAAnB,MAAmCR,MAAvC;AACAQ,EAAAA,WAAW,GAAGtB,aAAa,CAACI,mBAAD,EAAsBC,SAAtB,EAAiCiB,WAAjC,CAA3B;AAEA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIH,MAAM,IAAI,IAAd,EAAoBA,MAAM,GAAG,KAAT;AACpBG,EAAAA,IAAI,GAAG,MAAM,MAAN,GAAe,GAAf,GAAqB,OAA5B,CAR8E,CAU9E;;AACA,QAAME,OAAO,GAAG;AACdL,IAAAA,MADc;AAEdG,IAAAA,IAFc;AAGdF,IAAAA,IAAI,EAAE,IAHQ;AAIdC,IAAAA;AAJc,GAAhB;AAOA,SAAO,KAAKb,SAAL,CAAegB,OAAf,CAAuBA,OAAvB,EAAgCV,OAAhC,EAAyCC,QAAzC,CAAP;AACD,CAnBD;;AAqBAR,MAAM,CAACG,SAAP,CAAiBuB,SAAjB,GAA6B,SAASC,eAAT,CAA0BrB,MAA1B,EAAkCC,OAAlC,EAA2CC,QAA3C,EAAqD;AAChF;AAAC,GAACF,MAAD,EAASC,OAAT,EAAkBC,QAAlB,IAA8Bf,kBAAkB,CAACa,MAAD,EAASC,OAAT,EAAkBC,QAAlB,CAAhD;AAED,MAAI;AAAEI,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgB,OAAGC;AAAnB,MAAmCR,MAAvC;AACAQ,EAAAA,WAAW,GAAGtB,aAAa,CAACI,mBAAD,EAAsBC,SAAtB,EAAiCiB,WAAjC,CAA3B;AAEA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIH,MAAM,IAAI,IAAd,EAAoBA,MAAM,GAAG,KAAT;AACpBG,EAAAA,IAAI,GAAG,MAAM,MAAN,GAAe,GAAf,GAAqB,QAA5B,CARgF,CAUhF;;AACA,QAAME,OAAO,GAAG;AACdL,IAAAA,MADc;AAEdG,IAAAA,IAFc;AAGdF,IAAAA,IAAI,EAAE,IAHQ;AAIdC,IAAAA;AAJc,GAAhB;AAOA,SAAO,KAAKb,SAAL,CAAegB,OAAf,CAAuBA,OAAvB,EAAgCV,OAAhC,EAAyCC,QAAzC,CAAP;AACD,CAnBD;;AAqBAR,MAAM,CAACG,SAAP,CAAiByB,YAAjB,GAAgC,SAASC,kBAAT,CAA6BvB,MAA7B,EAAqCC,OAArC,EAA8CC,QAA9C,EAAwD;AACtF;AAAC,GAACF,MAAD,EAASC,OAAT,EAAkBC,QAAlB,IAA8Bf,kBAAkB,CAACa,MAAD,EAASC,OAAT,EAAkBC,QAAlB,CAAhD,CADqF,CAGtF;;AACA,MAAIF,MAAM,CAACG,SAAP,IAAoB,IAApB,IAA4BH,MAAM,CAACI,QAAP,IAAmB,IAAnD,EAAyD;AACvD,UAAMC,GAAG,GAAG,IAAI,KAAKjB,mBAAL,CAAJ,CAA8B,mDAA9B,CAAZ;AACA,WAAOH,WAAW,CAACoB,GAAD,EAAMH,QAAN,CAAlB;AACD;;AAED,MAAI;AAAEI,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBH,IAAAA,QAAhB;AAA0BD,IAAAA,SAA1B;AAAqC,OAAGK;AAAxC,MAAwDR,MAA5D;AACAQ,EAAAA,WAAW,GAAGtB,aAAa,CAACI,mBAAD,EAAsBC,SAAtB,EAAiCiB,WAAjC,CAA3B;AAEA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIH,MAAM,IAAI,IAAd,EAAoBA,MAAM,GAAG,KAAT;AACpBG,EAAAA,IAAI,GAAG,MAAM,MAAN,GAAe,GAAf,GAAqB,QAArB,GAAgC,GAAhC,GAAsCC,kBAAkB,CAACP,SAAS,IAAIC,QAAd,CAA/D,CAdsF,CAgBtF;;AACA,QAAMO,OAAO,GAAG;AACdL,IAAAA,MADc;AAEdG,IAAAA,IAFc;AAGdF,IAAAA,IAAI,EAAEA,IAAI,IAAI,EAHA;AAIdC,IAAAA;AAJc,GAAhB;AAOA,SAAO,KAAKb,SAAL,CAAegB,OAAf,CAAuBA,OAAvB,EAAgCV,OAAhC,EAAyCC,QAAzC,CAAP;AACD,CAzBD;;AA2BAR,MAAM,CAACG,SAAP,CAAiB2B,KAAjB,GAAyB,SAASC,WAAT,CAAsBzB,MAAtB,EAA8BC,OAA9B,EAAuCC,QAAvC,EAAiD;AACxE;AAAC,GAACF,MAAD,EAASC,OAAT,EAAkBC,QAAlB,IAA8Bf,kBAAkB,CAACa,MAAD,EAASC,OAAT,EAAkBC,QAAlB,CAAhD;AAED,MAAI;AAAEI,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgB,OAAGC;AAAnB,MAAmCR,MAAvC;AACAQ,EAAAA,WAAW,GAAGtB,aAAa,CAACI,mBAAD,EAAsBC,SAAtB,EAAiCiB,WAAjC,CAA3B;AAEA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIH,MAAM,IAAI,IAAd,EAAoBA,MAAM,GAAG,MAAT;AACpBG,EAAAA,IAAI,GAAG,MAAM,MAAN,GAAe,GAAf,GAAqB,OAA5B,CARwE,CAUxE;;AACA,QAAME,OAAO,GAAG;AACdL,IAAAA,MADc;AAEdG,IAAAA,IAFc;AAGdF,IAAAA,IAAI,EAAEA,IAAI,IAAI,EAHA;AAIdC,IAAAA;AAJc,GAAhB;AAOA,SAAO,KAAKb,SAAL,CAAegB,OAAf,CAAuBA,OAAvB,EAAgCV,OAAhC,EAAyCC,QAAzC,CAAP;AACD,CAnBD;;AAqBAR,MAAM,CAACG,SAAP,CAAiB6B,IAAjB,GAAwB,SAASC,UAAT,CAAqB3B,MAArB,EAA6BC,OAA7B,EAAsCC,QAAtC,EAAgD;AACtE;AAAC,GAACF,MAAD,EAASC,OAAT,EAAkBC,QAAlB,IAA8Bf,kBAAkB,CAACa,MAAD,EAASC,OAAT,EAAkBC,QAAlB,CAAhD;AAED,MAAI;AAAEI,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgB,OAAGC;AAAnB,MAAmCR,MAAvC;AACAQ,EAAAA,WAAW,GAAGtB,aAAa,CAACI,mBAAD,EAAsBC,SAAtB,EAAiCiB,WAAjC,CAA3B;AAEA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIH,MAAM,IAAI,IAAd,EAAoBA,MAAM,GAAG,MAAT;AACpBG,EAAAA,IAAI,GAAG,MAAM,MAAN,GAAe,GAAf,GAAqB,MAA5B,CARsE,CAUtE;;AACA,QAAME,OAAO,GAAG;AACdL,IAAAA,MADc;AAEdG,IAAAA,IAFc;AAGdF,IAAAA,IAAI,EAAEA,IAAI,IAAI,EAHA;AAIdC,IAAAA;AAJc,GAAhB;AAOA,SAAO,KAAKb,SAAL,CAAegB,OAAf,CAAuBA,OAAvB,EAAgCV,OAAhC,EAAyCC,QAAzC,CAAP;AACD,CAnBD;;AAqBA0B,MAAM,CAACC,gBAAP,CAAwBnC,MAAM,CAACG,SAA/B,EAA0C;AACxCiC,EAAAA,gBAAgB,EAAE;AAAEC,IAAAA,GAAG,GAAI;AAAE,aAAO,KAAKjC,eAAZ;AAA6B;;AAAxC,GADsB;AAExCkC,EAAAA,iBAAiB,EAAE;AAAED,IAAAA,GAAG,GAAI;AAAE,aAAO,KAAKnB,gBAAZ;AAA8B;;AAAzC,GAFqB;AAGxCqB,EAAAA,iBAAiB,EAAE;AAAEF,IAAAA,GAAG,GAAI;AAAE,aAAO,KAAKjB,gBAAZ;AAA8B;;AAAzC,GAHqB;AAIxCoB,EAAAA,aAAa,EAAE;AAAEH,IAAAA,GAAG,GAAI;AAAE,aAAO,KAAKf,YAAZ;AAA0B;;AAArC,GAJyB;AAKxCmB,EAAAA,SAAS,EAAE;AAAEJ,IAAAA,GAAG,GAAI;AAAE,aAAO,KAAKb,QAAZ;AAAsB;;AAAjC,GAL6B;AAMxCkB,EAAAA,UAAU,EAAE;AAAEL,IAAAA,GAAG,GAAI;AAAE,aAAO,KAAKX,SAAZ;AAAuB;;AAAlC,GAN4B;AAOxCiB,EAAAA,aAAa,EAAE;AAAEN,IAAAA,GAAG,GAAI;AAAE,aAAO,KAAKT,YAAZ;AAA0B;;AAArC;AAPyB,CAA1C;AAUAgB,MAAM,CAACC,OAAP,GAAiB7C,MAAjB","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path']\r\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path' }\r\n\r\nfunction SlmApi (transport, ConfigurationError) {\r\n  this.transport = transport\r\n  this[kConfigurationError] = ConfigurationError\r\n}\r\n\r\nSlmApi.prototype.deleteLifecycle = function slmDeleteLifecycleApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.policy_id == null && params.policyId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: policy_id or policyId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, policyId, policy_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_slm' + '/' + 'policy' + '/' + encodeURIComponent(policy_id || policyId)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSlmApi.prototype.executeLifecycle = function slmExecuteLifecycleApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.policy_id == null && params.policyId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: policy_id or policyId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, policyId, policy_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_slm' + '/' + 'policy' + '/' + encodeURIComponent(policy_id || policyId) + '/' + '_execute'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSlmApi.prototype.executeRetention = function slmExecuteRetentionApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_slm' + '/' + '_execute_retention'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSlmApi.prototype.getLifecycle = function slmGetLifecycleApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, policyId, policy_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((policy_id || policyId) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_slm' + '/' + 'policy' + '/' + encodeURIComponent(policy_id || policyId)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_slm' + '/' + 'policy'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSlmApi.prototype.getStats = function slmGetStatsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_slm' + '/' + 'stats'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSlmApi.prototype.getStatus = function slmGetStatusApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_slm' + '/' + 'status'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSlmApi.prototype.putLifecycle = function slmPutLifecycleApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.policy_id == null && params.policyId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: policy_id or policyId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, policyId, policy_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_slm' + '/' + 'policy' + '/' + encodeURIComponent(policy_id || policyId)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSlmApi.prototype.start = function slmStartApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_slm' + '/' + 'start'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSlmApi.prototype.stop = function slmStopApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_slm' + '/' + 'stop'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nObject.defineProperties(SlmApi.prototype, {\r\n  delete_lifecycle: { get () { return this.deleteLifecycle } },\r\n  execute_lifecycle: { get () { return this.executeLifecycle } },\r\n  execute_retention: { get () { return this.executeRetention } },\r\n  get_lifecycle: { get () { return this.getLifecycle } },\r\n  get_stats: { get () { return this.getStats } },\r\n  get_status: { get () { return this.getStatus } },\r\n  put_lifecycle: { get () { return this.putLifecycle } }\r\n})\r\n\r\nmodule.exports = SlmApi\r\n"]},"metadata":{},"sourceType":"module"}