{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['include_yes_decisions', 'include_disk_info', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'timeout', 'master_timeout', 'wait_for_removal', 'local', 'flat_settings', 'include_defaults', 'expand_wildcards', 'level', 'wait_for_active_shards', 'wait_for_nodes', 'wait_for_events', 'wait_for_no_relocating_shards', 'wait_for_no_initializing_shards', 'wait_for_status', 'node_ids', 'node_names', 'create', 'dry_run', 'explain', 'retry_failed', 'metric', 'wait_for_metadata_version', 'wait_for_timeout', 'ignore_unavailable', 'allow_no_indices'];\nconst snakeCase = {\n  includeYesDecisions: 'include_yes_decisions',\n  includeDiskInfo: 'include_disk_info',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n  masterTimeout: 'master_timeout',\n  waitForRemoval: 'wait_for_removal',\n  flatSettings: 'flat_settings',\n  includeDefaults: 'include_defaults',\n  expandWildcards: 'expand_wildcards',\n  waitForActiveShards: 'wait_for_active_shards',\n  waitForNodes: 'wait_for_nodes',\n  waitForEvents: 'wait_for_events',\n  waitForNoRelocatingShards: 'wait_for_no_relocating_shards',\n  waitForNoInitializingShards: 'wait_for_no_initializing_shards',\n  waitForStatus: 'wait_for_status',\n  nodeIds: 'node_ids',\n  nodeNames: 'node_names',\n  dryRun: 'dry_run',\n  retryFailed: 'retry_failed',\n  waitForMetadataVersion: 'wait_for_metadata_version',\n  waitForTimeout: 'wait_for_timeout',\n  ignoreUnavailable: 'ignore_unavailable',\n  allowNoIndices: 'allow_no_indices'\n};\n\nfunction ClusterApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n_c = ClusterApi;\n\nClusterApi.prototype.allocationExplain = function clusterAllocationExplainApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = body == null ? 'GET' : 'POST';\n  path = '/' + '_cluster' + '/' + 'allocation' + '/' + 'explain'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nClusterApi.prototype.deleteComponentTemplate = function clusterDeleteComponentTemplateApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_component_template' + '/' + encodeURIComponent(name); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nClusterApi.prototype.deleteVotingConfigExclusions = function clusterDeleteVotingConfigExclusionsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_cluster' + '/' + 'voting_config_exclusions'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nClusterApi.prototype.existsComponentTemplate = function clusterExistsComponentTemplateApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'HEAD';\n  path = '/' + '_component_template' + '/' + encodeURIComponent(name); // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nClusterApi.prototype.getComponentTemplate = function clusterGetComponentTemplateApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (name != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_component_template' + '/' + encodeURIComponent(name);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_component_template';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nClusterApi.prototype.getSettings = function clusterGetSettingsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_cluster' + '/' + 'settings'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nClusterApi.prototype.health = function clusterHealthApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cluster' + '/' + 'health' + '/' + encodeURIComponent(index);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_cluster' + '/' + 'health';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nClusterApi.prototype.pendingTasks = function clusterPendingTasksApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_cluster' + '/' + 'pending_tasks'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nClusterApi.prototype.postVotingConfigExclusions = function clusterPostVotingConfigExclusionsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_cluster' + '/' + 'voting_config_exclusions'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nClusterApi.prototype.putComponentTemplate = function clusterPutComponentTemplateApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_component_template' + '/' + encodeURIComponent(name); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nClusterApi.prototype.putSettings = function clusterPutSettingsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_cluster' + '/' + 'settings'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nClusterApi.prototype.remoteInfo = function clusterRemoteInfoApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_remote' + '/' + 'info'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nClusterApi.prototype.reroute = function clusterRerouteApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_cluster' + '/' + 'reroute'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nClusterApi.prototype.state = function clusterStateApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required url components\n\n  if (params.index != null && params.metric == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: metric');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    metric,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (metric != null && index != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cluster' + '/' + 'state' + '/' + encodeURIComponent(metric) + '/' + encodeURIComponent(index);\n  } else if (metric != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cluster' + '/' + 'state' + '/' + encodeURIComponent(metric);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_cluster' + '/' + 'state';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nClusterApi.prototype.stats = function clusterStatsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    nodeId,\n    node_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if ((node_id || nodeId) != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cluster' + '/' + 'stats' + '/' + 'nodes' + '/' + encodeURIComponent(node_id || nodeId);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_cluster' + '/' + 'stats';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nObject.defineProperties(ClusterApi.prototype, {\n  allocation_explain: {\n    get() {\n      return this.allocationExplain;\n    }\n\n  },\n  delete_component_template: {\n    get() {\n      return this.deleteComponentTemplate;\n    }\n\n  },\n  delete_voting_config_exclusions: {\n    get() {\n      return this.deleteVotingConfigExclusions;\n    }\n\n  },\n  exists_component_template: {\n    get() {\n      return this.existsComponentTemplate;\n    }\n\n  },\n  get_component_template: {\n    get() {\n      return this.getComponentTemplate;\n    }\n\n  },\n  get_settings: {\n    get() {\n      return this.getSettings;\n    }\n\n  },\n  pending_tasks: {\n    get() {\n      return this.pendingTasks;\n    }\n\n  },\n  post_voting_config_exclusions: {\n    get() {\n      return this.postVotingConfigExclusions;\n    }\n\n  },\n  put_component_template: {\n    get() {\n      return this.putComponentTemplate;\n    }\n\n  },\n  put_settings: {\n    get() {\n      return this.putSettings;\n    }\n\n  },\n  remote_info: {\n    get() {\n      return this.remoteInfo;\n    }\n\n  }\n});\nmodule.exports = ClusterApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"ClusterApi\");","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/cluster.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","includeYesDecisions","includeDiskInfo","errorTrace","filterPath","masterTimeout","waitForRemoval","flatSettings","includeDefaults","expandWildcards","waitForActiveShards","waitForNodes","waitForEvents","waitForNoRelocatingShards","waitForNoInitializingShards","waitForStatus","nodeIds","nodeNames","dryRun","retryFailed","waitForMetadataVersion","waitForTimeout","ignoreUnavailable","allowNoIndices","ClusterApi","transport","ConfigurationError","prototype","allocationExplain","clusterAllocationExplainApi","params","options","callback","method","body","querystring","path","request","deleteComponentTemplate","clusterDeleteComponentTemplateApi","name","err","encodeURIComponent","deleteVotingConfigExclusions","clusterDeleteVotingConfigExclusionsApi","existsComponentTemplate","clusterExistsComponentTemplateApi","getComponentTemplate","clusterGetComponentTemplateApi","getSettings","clusterGetSettingsApi","health","clusterHealthApi","index","pendingTasks","clusterPendingTasksApi","postVotingConfigExclusions","clusterPostVotingConfigExclusionsApi","putComponentTemplate","clusterPutComponentTemplateApi","putSettings","clusterPutSettingsApi","remoteInfo","clusterRemoteInfoApi","reroute","clusterRerouteApi","state","clusterStateApi","metric","stats","clusterStatsApi","nodeId","node_id","Object","defineProperties","allocation_explain","get","delete_component_template","delete_voting_config_exclusions","exists_component_template","get_component_template","get_settings","pending_tasks","post_voting_config_exclusions","put_component_template","put_settings","remote_info","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['include_yes_decisions', 'include_disk_info', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'timeout', 'master_timeout', 'wait_for_removal', 'local', 'flat_settings', 'include_defaults', 'expand_wildcards', 'level', 'wait_for_active_shards', 'wait_for_nodes', 'wait_for_events', 'wait_for_no_relocating_shards', 'wait_for_no_initializing_shards', 'wait_for_status', 'node_ids', 'node_names', 'create', 'dry_run', 'explain', 'retry_failed', 'metric', 'wait_for_metadata_version', 'wait_for_timeout', 'ignore_unavailable', 'allow_no_indices']\r\nconst snakeCase = { includeYesDecisions: 'include_yes_decisions', includeDiskInfo: 'include_disk_info', errorTrace: 'error_trace', filterPath: 'filter_path', masterTimeout: 'master_timeout', waitForRemoval: 'wait_for_removal', flatSettings: 'flat_settings', includeDefaults: 'include_defaults', expandWildcards: 'expand_wildcards', waitForActiveShards: 'wait_for_active_shards', waitForNodes: 'wait_for_nodes', waitForEvents: 'wait_for_events', waitForNoRelocatingShards: 'wait_for_no_relocating_shards', waitForNoInitializingShards: 'wait_for_no_initializing_shards', waitForStatus: 'wait_for_status', nodeIds: 'node_ids', nodeNames: 'node_names', dryRun: 'dry_run', retryFailed: 'retry_failed', waitForMetadataVersion: 'wait_for_metadata_version', waitForTimeout: 'wait_for_timeout', ignoreUnavailable: 'ignore_unavailable', allowNoIndices: 'allow_no_indices' }\r\n\r\nfunction ClusterApi (transport, ConfigurationError) {\r\n  this.transport = transport\r\n  this[kConfigurationError] = ConfigurationError\r\n}\r\n\r\nClusterApi.prototype.allocationExplain = function clusterAllocationExplainApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = body == null ? 'GET' : 'POST'\r\n  path = '/' + '_cluster' + '/' + 'allocation' + '/' + 'explain'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nClusterApi.prototype.deleteComponentTemplate = function clusterDeleteComponentTemplateApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_component_template' + '/' + encodeURIComponent(name)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nClusterApi.prototype.deleteVotingConfigExclusions = function clusterDeleteVotingConfigExclusionsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_cluster' + '/' + 'voting_config_exclusions'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nClusterApi.prototype.existsComponentTemplate = function clusterExistsComponentTemplateApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'HEAD'\r\n  path = '/' + '_component_template' + '/' + encodeURIComponent(name)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nClusterApi.prototype.getComponentTemplate = function clusterGetComponentTemplateApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((name) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_component_template' + '/' + encodeURIComponent(name)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_component_template'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nClusterApi.prototype.getSettings = function clusterGetSettingsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_cluster' + '/' + 'settings'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nClusterApi.prototype.health = function clusterHealthApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_cluster' + '/' + 'health' + '/' + encodeURIComponent(index)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_cluster' + '/' + 'health'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nClusterApi.prototype.pendingTasks = function clusterPendingTasksApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_cluster' + '/' + 'pending_tasks'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nClusterApi.prototype.postVotingConfigExclusions = function clusterPostVotingConfigExclusionsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_cluster' + '/' + 'voting_config_exclusions'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nClusterApi.prototype.putComponentTemplate = function clusterPutComponentTemplateApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_component_template' + '/' + encodeURIComponent(name)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nClusterApi.prototype.putSettings = function clusterPutSettingsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_cluster' + '/' + 'settings'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nClusterApi.prototype.remoteInfo = function clusterRemoteInfoApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_remote' + '/' + 'info'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nClusterApi.prototype.reroute = function clusterRerouteApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_cluster' + '/' + 'reroute'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nClusterApi.prototype.state = function clusterStateApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required url components\r\n  if (params.index != null && (params.metric == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: metric')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, metric, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((metric) != null && (index) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_cluster' + '/' + 'state' + '/' + encodeURIComponent(metric) + '/' + encodeURIComponent(index)\r\n  } else if ((metric) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_cluster' + '/' + 'state' + '/' + encodeURIComponent(metric)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_cluster' + '/' + 'state'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nClusterApi.prototype.stats = function clusterStatsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, nodeId, node_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((node_id || nodeId) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_cluster' + '/' + 'stats' + '/' + 'nodes' + '/' + encodeURIComponent(node_id || nodeId)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_cluster' + '/' + 'stats'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nObject.defineProperties(ClusterApi.prototype, {\r\n  allocation_explain: { get () { return this.allocationExplain } },\r\n  delete_component_template: { get () { return this.deleteComponentTemplate } },\r\n  delete_voting_config_exclusions: { get () { return this.deleteVotingConfigExclusions } },\r\n  exists_component_template: { get () { return this.existsComponentTemplate } },\r\n  get_component_template: { get () { return this.getComponentTemplate } },\r\n  get_settings: { get () { return this.getSettings } },\r\n  pending_tasks: { get () { return this.pendingTasks } },\r\n  post_voting_config_exclusions: { get () { return this.postVotingConfigExclusions } },\r\n  put_component_template: { get () { return this.putComponentTemplate } },\r\n  put_settings: { get () { return this.putSettings } },\r\n  remote_info: { get () { return this.remoteInfo } }\r\n})\r\n\r\nmodule.exports = ClusterApi\r\n"]},"metadata":{},"sourceType":"module"}