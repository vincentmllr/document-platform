{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['requests_per_second', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  requestsPerSecond: 'requests_per_second',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\nfunction reindexRethrottleApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.task_id == null && params.taskId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: task_id or taskId');\n    return handleError(err, callback);\n  }\n\n  if (params.requests_per_second == null && params.requestsPerSecond == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: requests_per_second or requestsPerSecond');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    taskId,\n    task_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_reindex' + '/' + encodeURIComponent(task_id || taskId) + '/' + '_rethrottle'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n}\n\nmodule.exports = reindexRethrottleApi;","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/reindex_rethrottle.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","requestsPerSecond","errorTrace","filterPath","reindexRethrottleApi","params","options","callback","task_id","taskId","err","requests_per_second","method","body","querystring","path","encodeURIComponent","request","transport","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;AAEA,MAAM;AAAEA,EAAAA,WAAF;AAAeC,EAAAA,aAAf;AAA8BC,EAAAA,kBAA9B;AAAkDC,EAAAA;AAAlD,IAA0EC,OAAO,CAAC,UAAD,CAAvF;;AACA,MAAMC,mBAAmB,GAAG,CAAC,qBAAD,EAAwB,QAAxB,EAAkC,OAAlC,EAA2C,aAA3C,EAA0D,QAA1D,EAAoE,aAApE,CAA5B;AACA,MAAMC,SAAS,GAAG;AAAEC,EAAAA,iBAAiB,EAAE,qBAArB;AAA4CC,EAAAA,UAAU,EAAE,aAAxD;AAAuEC,EAAAA,UAAU,EAAE;AAAnF,CAAlB;;AAEA,SAASC,oBAAT,CAA+BC,MAA/B,EAAuCC,OAAvC,EAAgDC,QAAhD,EAA0D;AACxD;AAAC,GAACF,MAAD,EAASC,OAAT,EAAkBC,QAAlB,IAA8BX,kBAAkB,CAACS,MAAD,EAASC,OAAT,EAAkBC,QAAlB,CAAhD,CADuD,CAGxD;;AACA,MAAIF,MAAM,CAACG,OAAP,IAAkB,IAAlB,IAA0BH,MAAM,CAACI,MAAP,IAAiB,IAA/C,EAAqD;AACnD,UAAMC,GAAG,GAAG,IAAI,KAAKb,mBAAL,CAAJ,CAA8B,+CAA9B,CAAZ;AACA,WAAOH,WAAW,CAACgB,GAAD,EAAMH,QAAN,CAAlB;AACD;;AACD,MAAIF,MAAM,CAACM,mBAAP,IAA8B,IAA9B,IAAsCN,MAAM,CAACJ,iBAAP,IAA4B,IAAtE,EAA4E;AAC1E,UAAMS,GAAG,GAAG,IAAI,KAAKb,mBAAL,CAAJ,CAA8B,sEAA9B,CAAZ;AACA,WAAOH,WAAW,CAACgB,GAAD,EAAMH,QAAN,CAAlB;AACD;;AAED,MAAI;AAAEK,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBJ,IAAAA,MAAhB;AAAwBD,IAAAA,OAAxB;AAAiC,OAAGM;AAApC,MAAoDT,MAAxD;AACAS,EAAAA,WAAW,GAAGnB,aAAa,CAACI,mBAAD,EAAsBC,SAAtB,EAAiCc,WAAjC,CAA3B;AAEA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIH,MAAM,IAAI,IAAd,EAAoBA,MAAM,GAAG,MAAT;AACpBG,EAAAA,IAAI,GAAG,MAAM,UAAN,GAAmB,GAAnB,GAAyBC,kBAAkB,CAACR,OAAO,IAAIC,MAAZ,CAA3C,GAAiE,GAAjE,GAAuE,aAA9E,CAlBwD,CAoBxD;;AACA,QAAMQ,OAAO,GAAG;AACdL,IAAAA,MADc;AAEdG,IAAAA,IAFc;AAGdF,IAAAA,IAAI,EAAEA,IAAI,IAAI,EAHA;AAIdC,IAAAA;AAJc,GAAhB;AAOA,SAAO,KAAKI,SAAL,CAAeD,OAAf,CAAuBA,OAAvB,EAAgCX,OAAhC,EAAyCC,QAAzC,CAAP;AACD;;AAEDY,MAAM,CAACC,OAAP,GAAiBhB,oBAAjB","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['requests_per_second', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\r\nconst snakeCase = { requestsPerSecond: 'requests_per_second', errorTrace: 'error_trace', filterPath: 'filter_path' }\r\n\r\nfunction reindexRethrottleApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.task_id == null && params.taskId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: task_id or taskId')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.requests_per_second == null && params.requestsPerSecond == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: requests_per_second or requestsPerSecond')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, taskId, task_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_reindex' + '/' + encodeURIComponent(task_id || taskId) + '/' + '_rethrottle'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nmodule.exports = reindexRethrottleApi\r\n"]},"metadata":{},"sourceType":"module"}