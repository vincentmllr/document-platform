{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path', 'refresh', 'usernames', 'id', 'name', 'username', 'realm_name', 'owner'];\nconst snakeCase = {\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n  realmName: 'realm_name'\n};\n\nfunction SecurityApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n_c = SecurityApi;\n\nSecurityApi.prototype.authenticate = function securityAuthenticateApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_security' + '/' + '_authenticate'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.changePassword = function securityChangePasswordApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    username,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (username != null) {\n    if (method == null) method = 'PUT';\n    path = '/' + '_security' + '/' + 'user' + '/' + encodeURIComponent(username) + '/' + '_password';\n  } else {\n    if (method == null) method = 'PUT';\n    path = '/' + '_security' + '/' + 'user' + '/' + '_password';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.clearApiKeyCache = function securityClearApiKeyCacheApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.ids == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: ids');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    ids,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_security' + '/' + 'api_key' + '/' + encodeURIComponent(ids) + '/' + '_clear_cache'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.clearCachedPrivileges = function securityClearCachedPrivilegesApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.application == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: application');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    application,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_security' + '/' + 'privilege' + '/' + encodeURIComponent(application) + '/' + '_clear_cache'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.clearCachedRealms = function securityClearCachedRealmsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.realms == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: realms');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    realms,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_security' + '/' + 'realm' + '/' + encodeURIComponent(realms) + '/' + '_clear_cache'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.clearCachedRoles = function securityClearCachedRolesApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_security' + '/' + 'role' + '/' + encodeURIComponent(name) + '/' + '_clear_cache'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.clearCachedServiceTokens = function securityClearCachedServiceTokensApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.namespace == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: namespace');\n    return handleError(err, callback);\n  }\n\n  if (params.service == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: service');\n    return handleError(err, callback);\n  }\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if (params.name != null && (params.service == null || params.namespace == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: service, namespace');\n    return handleError(err, callback);\n  } else if (params.service != null && params.namespace == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: namespace');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    namespace,\n    service,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_security' + '/' + 'service' + '/' + encodeURIComponent(namespace) + '/' + encodeURIComponent(service) + '/' + 'credential' + '/' + 'token' + '/' + encodeURIComponent(name) + '/' + '_clear_cache'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.createApiKey = function securityCreateApiKeyApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_security' + '/' + 'api_key'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.createServiceToken = function securityCreateServiceTokenApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.namespace == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: namespace');\n    return handleError(err, callback);\n  }\n\n  if (params.service == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: service');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if (params.name != null && (params.service == null || params.namespace == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: service, namespace');\n    return handleError(err, callback);\n  } else if (params.service != null && params.namespace == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: namespace');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    namespace,\n    service,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (namespace != null && service != null && name != null) {\n    if (method == null) method = 'PUT';\n    path = '/' + '_security' + '/' + 'service' + '/' + encodeURIComponent(namespace) + '/' + encodeURIComponent(service) + '/' + 'credential' + '/' + 'token' + '/' + encodeURIComponent(name);\n  } else {\n    if (method == null) method = 'POST';\n    path = '/' + '_security' + '/' + 'service' + '/' + encodeURIComponent(namespace) + '/' + encodeURIComponent(service) + '/' + 'credential' + '/' + 'token';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.deletePrivileges = function securityDeletePrivilegesApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.application == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: application');\n    return handleError(err, callback);\n  }\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if (params.name != null && params.application == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: application');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    application,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_security' + '/' + 'privilege' + '/' + encodeURIComponent(application) + '/' + encodeURIComponent(name); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.deleteRole = function securityDeleteRoleApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_security' + '/' + 'role' + '/' + encodeURIComponent(name); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.deleteRoleMapping = function securityDeleteRoleMappingApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_security' + '/' + 'role_mapping' + '/' + encodeURIComponent(name); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.deleteServiceToken = function securityDeleteServiceTokenApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.namespace == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: namespace');\n    return handleError(err, callback);\n  }\n\n  if (params.service == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: service');\n    return handleError(err, callback);\n  }\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if (params.name != null && (params.service == null || params.namespace == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: service, namespace');\n    return handleError(err, callback);\n  } else if (params.service != null && params.namespace == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: namespace');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    namespace,\n    service,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_security' + '/' + 'service' + '/' + encodeURIComponent(namespace) + '/' + encodeURIComponent(service) + '/' + 'credential' + '/' + 'token' + '/' + encodeURIComponent(name); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.deleteUser = function securityDeleteUserApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.username == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: username');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    username,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_security' + '/' + 'user' + '/' + encodeURIComponent(username); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.disableUser = function securityDisableUserApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.username == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: username');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    username,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_security' + '/' + 'user' + '/' + encodeURIComponent(username) + '/' + '_disable'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.enableUser = function securityEnableUserApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.username == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: username');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    username,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_security' + '/' + 'user' + '/' + encodeURIComponent(username) + '/' + '_enable'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.getApiKey = function securityGetApiKeyApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_security' + '/' + 'api_key'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.getBuiltinPrivileges = function securityGetBuiltinPrivilegesApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_security' + '/' + 'privilege' + '/' + '_builtin'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.getPrivileges = function securityGetPrivilegesApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required url components\n\n  if (params.name != null && params.application == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: application');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    application,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (application != null && name != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_security' + '/' + 'privilege' + '/' + encodeURIComponent(application) + '/' + encodeURIComponent(name);\n  } else if (application != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_security' + '/' + 'privilege' + '/' + encodeURIComponent(application);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_security' + '/' + 'privilege';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.getRole = function securityGetRoleApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (name != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_security' + '/' + 'role' + '/' + encodeURIComponent(name);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_security' + '/' + 'role';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.getRoleMapping = function securityGetRoleMappingApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (name != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_security' + '/' + 'role_mapping' + '/' + encodeURIComponent(name);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_security' + '/' + 'role_mapping';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.getServiceAccounts = function securityGetServiceAccountsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required url components\n\n  if (params.service != null && params.namespace == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: namespace');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    namespace,\n    service,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (namespace != null && service != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_security' + '/' + 'service' + '/' + encodeURIComponent(namespace) + '/' + encodeURIComponent(service);\n  } else if (namespace != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_security' + '/' + 'service' + '/' + encodeURIComponent(namespace);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_security' + '/' + 'service';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.getServiceCredentials = function securityGetServiceCredentialsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.namespace == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: namespace');\n    return handleError(err, callback);\n  }\n\n  if (params.service == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: service');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if (params.service != null && params.namespace == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: namespace');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    namespace,\n    service,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_security' + '/' + 'service' + '/' + encodeURIComponent(namespace) + '/' + encodeURIComponent(service) + '/' + 'credential'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.getToken = function securityGetTokenApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_security' + '/' + 'oauth2' + '/' + 'token'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.getUser = function securityGetUserApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    username,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (username != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_security' + '/' + 'user' + '/' + encodeURIComponent(username);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_security' + '/' + 'user';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.getUserPrivileges = function securityGetUserPrivilegesApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_security' + '/' + 'user' + '/' + '_privileges'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.grantApiKey = function securityGrantApiKeyApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_security' + '/' + 'api_key' + '/' + 'grant'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.hasPrivileges = function securityHasPrivilegesApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    user,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (user != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_security' + '/' + 'user' + '/' + encodeURIComponent(user) + '/' + '_has_privileges';\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_security' + '/' + 'user' + '/' + '_has_privileges';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.invalidateApiKey = function securityInvalidateApiKeyApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_security' + '/' + 'api_key'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.invalidateToken = function securityInvalidateTokenApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_security' + '/' + 'oauth2' + '/' + 'token'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.putPrivileges = function securityPutPrivilegesApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_security' + '/' + 'privilege'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.putRole = function securityPutRoleApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_security' + '/' + 'role' + '/' + encodeURIComponent(name); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.putRoleMapping = function securityPutRoleMappingApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_security' + '/' + 'role_mapping' + '/' + encodeURIComponent(name); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSecurityApi.prototype.putUser = function securityPutUserApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.username == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: username');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    username,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_security' + '/' + 'user' + '/' + encodeURIComponent(username); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nObject.defineProperties(SecurityApi.prototype, {\n  change_password: {\n    get() {\n      return this.changePassword;\n    }\n\n  },\n  clear_api_key_cache: {\n    get() {\n      return this.clearApiKeyCache;\n    }\n\n  },\n  clear_cached_privileges: {\n    get() {\n      return this.clearCachedPrivileges;\n    }\n\n  },\n  clear_cached_realms: {\n    get() {\n      return this.clearCachedRealms;\n    }\n\n  },\n  clear_cached_roles: {\n    get() {\n      return this.clearCachedRoles;\n    }\n\n  },\n  clear_cached_service_tokens: {\n    get() {\n      return this.clearCachedServiceTokens;\n    }\n\n  },\n  create_api_key: {\n    get() {\n      return this.createApiKey;\n    }\n\n  },\n  create_service_token: {\n    get() {\n      return this.createServiceToken;\n    }\n\n  },\n  delete_privileges: {\n    get() {\n      return this.deletePrivileges;\n    }\n\n  },\n  delete_role: {\n    get() {\n      return this.deleteRole;\n    }\n\n  },\n  delete_role_mapping: {\n    get() {\n      return this.deleteRoleMapping;\n    }\n\n  },\n  delete_service_token: {\n    get() {\n      return this.deleteServiceToken;\n    }\n\n  },\n  delete_user: {\n    get() {\n      return this.deleteUser;\n    }\n\n  },\n  disable_user: {\n    get() {\n      return this.disableUser;\n    }\n\n  },\n  enable_user: {\n    get() {\n      return this.enableUser;\n    }\n\n  },\n  get_api_key: {\n    get() {\n      return this.getApiKey;\n    }\n\n  },\n  get_builtin_privileges: {\n    get() {\n      return this.getBuiltinPrivileges;\n    }\n\n  },\n  get_privileges: {\n    get() {\n      return this.getPrivileges;\n    }\n\n  },\n  get_role: {\n    get() {\n      return this.getRole;\n    }\n\n  },\n  get_role_mapping: {\n    get() {\n      return this.getRoleMapping;\n    }\n\n  },\n  get_service_accounts: {\n    get() {\n      return this.getServiceAccounts;\n    }\n\n  },\n  get_service_credentials: {\n    get() {\n      return this.getServiceCredentials;\n    }\n\n  },\n  get_token: {\n    get() {\n      return this.getToken;\n    }\n\n  },\n  get_user: {\n    get() {\n      return this.getUser;\n    }\n\n  },\n  get_user_privileges: {\n    get() {\n      return this.getUserPrivileges;\n    }\n\n  },\n  grant_api_key: {\n    get() {\n      return this.grantApiKey;\n    }\n\n  },\n  has_privileges: {\n    get() {\n      return this.hasPrivileges;\n    }\n\n  },\n  invalidate_api_key: {\n    get() {\n      return this.invalidateApiKey;\n    }\n\n  },\n  invalidate_token: {\n    get() {\n      return this.invalidateToken;\n    }\n\n  },\n  put_privileges: {\n    get() {\n      return this.putPrivileges;\n    }\n\n  },\n  put_role: {\n    get() {\n      return this.putRole;\n    }\n\n  },\n  put_role_mapping: {\n    get() {\n      return this.putRoleMapping;\n    }\n\n  },\n  put_user: {\n    get() {\n      return this.putUser;\n    }\n\n  }\n});\nmodule.exports = SecurityApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"SecurityApi\");","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/security.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","errorTrace","filterPath","realmName","SecurityApi","transport","ConfigurationError","prototype","authenticate","securityAuthenticateApi","params","options","callback","method","body","querystring","path","request","changePassword","securityChangePasswordApi","err","username","encodeURIComponent","clearApiKeyCache","securityClearApiKeyCacheApi","ids","clearCachedPrivileges","securityClearCachedPrivilegesApi","application","clearCachedRealms","securityClearCachedRealmsApi","realms","clearCachedRoles","securityClearCachedRolesApi","name","clearCachedServiceTokens","securityClearCachedServiceTokensApi","namespace","service","createApiKey","securityCreateApiKeyApi","createServiceToken","securityCreateServiceTokenApi","deletePrivileges","securityDeletePrivilegesApi","deleteRole","securityDeleteRoleApi","deleteRoleMapping","securityDeleteRoleMappingApi","deleteServiceToken","securityDeleteServiceTokenApi","deleteUser","securityDeleteUserApi","disableUser","securityDisableUserApi","enableUser","securityEnableUserApi","getApiKey","securityGetApiKeyApi","getBuiltinPrivileges","securityGetBuiltinPrivilegesApi","getPrivileges","securityGetPrivilegesApi","getRole","securityGetRoleApi","getRoleMapping","securityGetRoleMappingApi","getServiceAccounts","securityGetServiceAccountsApi","getServiceCredentials","securityGetServiceCredentialsApi","getToken","securityGetTokenApi","getUser","securityGetUserApi","getUserPrivileges","securityGetUserPrivilegesApi","grantApiKey","securityGrantApiKeyApi","hasPrivileges","securityHasPrivilegesApi","user","invalidateApiKey","securityInvalidateApiKeyApi","invalidateToken","securityInvalidateTokenApi","putPrivileges","securityPutPrivilegesApi","putRole","securityPutRoleApi","putRoleMapping","securityPutRoleMappingApi","putUser","securityPutUserApi","Object","defineProperties","change_password","get","clear_api_key_cache","clear_cached_privileges","clear_cached_realms","clear_cached_roles","clear_cached_service_tokens","create_api_key","create_service_token","delete_privileges","delete_role","delete_role_mapping","delete_service_token","delete_user","disable_user","enable_user","get_api_key","get_builtin_privileges","get_privileges","get_role","get_role_mapping","get_service_accounts","get_service_credentials","get_token","get_user","get_user_privileges","grant_api_key","has_privileges","invalidate_api_key","invalidate_token","put_privileges","put_role","put_role_mapping","put_user","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path', 'refresh', 'usernames', 'id', 'name', 'username', 'realm_name', 'owner']\r\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path', realmName: 'realm_name' }\r\n\r\nfunction SecurityApi (transport, ConfigurationError) {\r\n  this.transport = transport\r\n  this[kConfigurationError] = ConfigurationError\r\n}\r\n\r\nSecurityApi.prototype.authenticate = function securityAuthenticateApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_security' + '/' + '_authenticate'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.changePassword = function securityChangePasswordApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, username, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((username) != null) {\r\n    if (method == null) method = 'PUT'\r\n    path = '/' + '_security' + '/' + 'user' + '/' + encodeURIComponent(username) + '/' + '_password'\r\n  } else {\r\n    if (method == null) method = 'PUT'\r\n    path = '/' + '_security' + '/' + 'user' + '/' + '_password'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.clearApiKeyCache = function securityClearApiKeyCacheApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.ids == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: ids')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, ids, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_security' + '/' + 'api_key' + '/' + encodeURIComponent(ids) + '/' + '_clear_cache'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.clearCachedPrivileges = function securityClearCachedPrivilegesApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.application == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: application')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, application, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_security' + '/' + 'privilege' + '/' + encodeURIComponent(application) + '/' + '_clear_cache'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.clearCachedRealms = function securityClearCachedRealmsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.realms == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: realms')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, realms, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_security' + '/' + 'realm' + '/' + encodeURIComponent(realms) + '/' + '_clear_cache'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.clearCachedRoles = function securityClearCachedRolesApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_security' + '/' + 'role' + '/' + encodeURIComponent(name) + '/' + '_clear_cache'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.clearCachedServiceTokens = function securityClearCachedServiceTokensApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.namespace == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: namespace')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.service == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: service')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if (params.name != null && (params.service == null || params.namespace == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: service, namespace')\r\n    return handleError(err, callback)\r\n  } else if (params.service != null && (params.namespace == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: namespace')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, namespace, service, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_security' + '/' + 'service' + '/' + encodeURIComponent(namespace) + '/' + encodeURIComponent(service) + '/' + 'credential' + '/' + 'token' + '/' + encodeURIComponent(name) + '/' + '_clear_cache'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.createApiKey = function securityCreateApiKeyApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_security' + '/' + 'api_key'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.createServiceToken = function securityCreateServiceTokenApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.namespace == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: namespace')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.service == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: service')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if (params.name != null && (params.service == null || params.namespace == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: service, namespace')\r\n    return handleError(err, callback)\r\n  } else if (params.service != null && (params.namespace == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: namespace')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, namespace, service, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((namespace) != null && (service) != null && (name) != null) {\r\n    if (method == null) method = 'PUT'\r\n    path = '/' + '_security' + '/' + 'service' + '/' + encodeURIComponent(namespace) + '/' + encodeURIComponent(service) + '/' + 'credential' + '/' + 'token' + '/' + encodeURIComponent(name)\r\n  } else {\r\n    if (method == null) method = 'POST'\r\n    path = '/' + '_security' + '/' + 'service' + '/' + encodeURIComponent(namespace) + '/' + encodeURIComponent(service) + '/' + 'credential' + '/' + 'token'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.deletePrivileges = function securityDeletePrivilegesApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.application == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: application')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if (params.name != null && (params.application == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: application')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, application, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_security' + '/' + 'privilege' + '/' + encodeURIComponent(application) + '/' + encodeURIComponent(name)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.deleteRole = function securityDeleteRoleApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_security' + '/' + 'role' + '/' + encodeURIComponent(name)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.deleteRoleMapping = function securityDeleteRoleMappingApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_security' + '/' + 'role_mapping' + '/' + encodeURIComponent(name)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.deleteServiceToken = function securityDeleteServiceTokenApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.namespace == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: namespace')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.service == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: service')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if (params.name != null && (params.service == null || params.namespace == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: service, namespace')\r\n    return handleError(err, callback)\r\n  } else if (params.service != null && (params.namespace == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: namespace')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, namespace, service, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_security' + '/' + 'service' + '/' + encodeURIComponent(namespace) + '/' + encodeURIComponent(service) + '/' + 'credential' + '/' + 'token' + '/' + encodeURIComponent(name)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.deleteUser = function securityDeleteUserApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.username == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: username')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, username, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_security' + '/' + 'user' + '/' + encodeURIComponent(username)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.disableUser = function securityDisableUserApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.username == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: username')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, username, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_security' + '/' + 'user' + '/' + encodeURIComponent(username) + '/' + '_disable'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.enableUser = function securityEnableUserApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.username == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: username')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, username, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_security' + '/' + 'user' + '/' + encodeURIComponent(username) + '/' + '_enable'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.getApiKey = function securityGetApiKeyApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_security' + '/' + 'api_key'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.getBuiltinPrivileges = function securityGetBuiltinPrivilegesApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_security' + '/' + 'privilege' + '/' + '_builtin'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.getPrivileges = function securityGetPrivilegesApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required url components\r\n  if (params.name != null && (params.application == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: application')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, application, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((application) != null && (name) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_security' + '/' + 'privilege' + '/' + encodeURIComponent(application) + '/' + encodeURIComponent(name)\r\n  } else if ((application) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_security' + '/' + 'privilege' + '/' + encodeURIComponent(application)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_security' + '/' + 'privilege'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.getRole = function securityGetRoleApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((name) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_security' + '/' + 'role' + '/' + encodeURIComponent(name)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_security' + '/' + 'role'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.getRoleMapping = function securityGetRoleMappingApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((name) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_security' + '/' + 'role_mapping' + '/' + encodeURIComponent(name)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_security' + '/' + 'role_mapping'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.getServiceAccounts = function securityGetServiceAccountsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required url components\r\n  if (params.service != null && (params.namespace == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: namespace')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, namespace, service, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((namespace) != null && (service) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_security' + '/' + 'service' + '/' + encodeURIComponent(namespace) + '/' + encodeURIComponent(service)\r\n  } else if ((namespace) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_security' + '/' + 'service' + '/' + encodeURIComponent(namespace)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_security' + '/' + 'service'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.getServiceCredentials = function securityGetServiceCredentialsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.namespace == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: namespace')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.service == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: service')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if (params.service != null && (params.namespace == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: namespace')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, namespace, service, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_security' + '/' + 'service' + '/' + encodeURIComponent(namespace) + '/' + encodeURIComponent(service) + '/' + 'credential'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.getToken = function securityGetTokenApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_security' + '/' + 'oauth2' + '/' + 'token'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.getUser = function securityGetUserApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, username, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((username) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_security' + '/' + 'user' + '/' + encodeURIComponent(username)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_security' + '/' + 'user'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.getUserPrivileges = function securityGetUserPrivilegesApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_security' + '/' + 'user' + '/' + '_privileges'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.grantApiKey = function securityGrantApiKeyApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_security' + '/' + 'api_key' + '/' + 'grant'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.hasPrivileges = function securityHasPrivilegesApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, user, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((user) != null) {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + '_security' + '/' + 'user' + '/' + encodeURIComponent(user) + '/' + '_has_privileges'\r\n  } else {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + '_security' + '/' + 'user' + '/' + '_has_privileges'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.invalidateApiKey = function securityInvalidateApiKeyApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_security' + '/' + 'api_key'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.invalidateToken = function securityInvalidateTokenApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_security' + '/' + 'oauth2' + '/' + 'token'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.putPrivileges = function securityPutPrivilegesApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_security' + '/' + 'privilege'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.putRole = function securityPutRoleApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_security' + '/' + 'role' + '/' + encodeURIComponent(name)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.putRoleMapping = function securityPutRoleMappingApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_security' + '/' + 'role_mapping' + '/' + encodeURIComponent(name)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSecurityApi.prototype.putUser = function securityPutUserApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.username == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: username')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, username, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_security' + '/' + 'user' + '/' + encodeURIComponent(username)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nObject.defineProperties(SecurityApi.prototype, {\r\n  change_password: { get () { return this.changePassword } },\r\n  clear_api_key_cache: { get () { return this.clearApiKeyCache } },\r\n  clear_cached_privileges: { get () { return this.clearCachedPrivileges } },\r\n  clear_cached_realms: { get () { return this.clearCachedRealms } },\r\n  clear_cached_roles: { get () { return this.clearCachedRoles } },\r\n  clear_cached_service_tokens: { get () { return this.clearCachedServiceTokens } },\r\n  create_api_key: { get () { return this.createApiKey } },\r\n  create_service_token: { get () { return this.createServiceToken } },\r\n  delete_privileges: { get () { return this.deletePrivileges } },\r\n  delete_role: { get () { return this.deleteRole } },\r\n  delete_role_mapping: { get () { return this.deleteRoleMapping } },\r\n  delete_service_token: { get () { return this.deleteServiceToken } },\r\n  delete_user: { get () { return this.deleteUser } },\r\n  disable_user: { get () { return this.disableUser } },\r\n  enable_user: { get () { return this.enableUser } },\r\n  get_api_key: { get () { return this.getApiKey } },\r\n  get_builtin_privileges: { get () { return this.getBuiltinPrivileges } },\r\n  get_privileges: { get () { return this.getPrivileges } },\r\n  get_role: { get () { return this.getRole } },\r\n  get_role_mapping: { get () { return this.getRoleMapping } },\r\n  get_service_accounts: { get () { return this.getServiceAccounts } },\r\n  get_service_credentials: { get () { return this.getServiceCredentials } },\r\n  get_token: { get () { return this.getToken } },\r\n  get_user: { get () { return this.getUser } },\r\n  get_user_privileges: { get () { return this.getUserPrivileges } },\r\n  grant_api_key: { get () { return this.grantApiKey } },\r\n  has_privileges: { get () { return this.hasPrivileges } },\r\n  invalidate_api_key: { get () { return this.invalidateApiKey } },\r\n  invalidate_token: { get () { return this.invalidateToken } },\r\n  put_privileges: { get () { return this.putPrivileges } },\r\n  put_role: { get () { return this.putRole } },\r\n  put_role_mapping: { get () { return this.putRoleMapping } },\r\n  put_user: { get () { return this.putUser } }\r\n})\r\n\r\nmodule.exports = SecurityApi\r\n"]},"metadata":{},"sourceType":"module"}