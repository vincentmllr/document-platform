{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['ignore_unavailable', 'ignore_throttled', 'allow_no_indices', 'expand_wildcards', 'min_score', 'preference', 'routing', 'q', 'analyzer', 'analyze_wildcard', 'default_operator', 'df', 'lenient', 'terminate_after', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  ignoreUnavailable: 'ignore_unavailable',\n  ignoreThrottled: 'ignore_throttled',\n  allowNoIndices: 'allow_no_indices',\n  expandWildcards: 'expand_wildcards',\n  minScore: 'min_score',\n  analyzeWildcard: 'analyze_wildcard',\n  defaultOperator: 'default_operator',\n  terminateAfter: 'terminate_after',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\nfunction countApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required url components\n\n  if (params.type != null && params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    type,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null && type != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_count';\n  } else if (index != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_count';\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_count';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n}\n\nmodule.exports = countApi;","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/count.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","ignoreUnavailable","ignoreThrottled","allowNoIndices","expandWildcards","minScore","analyzeWildcard","defaultOperator","terminateAfter","errorTrace","filterPath","countApi","params","options","callback","type","index","err","method","body","querystring","path","encodeURIComponent","request","transport","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['ignore_unavailable', 'ignore_throttled', 'allow_no_indices', 'expand_wildcards', 'min_score', 'preference', 'routing', 'q', 'analyzer', 'analyze_wildcard', 'default_operator', 'df', 'lenient', 'terminate_after', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\r\nconst snakeCase = { ignoreUnavailable: 'ignore_unavailable', ignoreThrottled: 'ignore_throttled', allowNoIndices: 'allow_no_indices', expandWildcards: 'expand_wildcards', minScore: 'min_score', analyzeWildcard: 'analyze_wildcard', defaultOperator: 'default_operator', terminateAfter: 'terminate_after', errorTrace: 'error_trace', filterPath: 'filter_path' }\r\n\r\nfunction countApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required url components\r\n  if (params.type != null && (params.index == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, type, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null && (type) != null) {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_count'\r\n  } else if ((index) != null) {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_count'\r\n  } else {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + '_count'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nmodule.exports = countApi\r\n"]},"metadata":{},"sourceType":"module"}