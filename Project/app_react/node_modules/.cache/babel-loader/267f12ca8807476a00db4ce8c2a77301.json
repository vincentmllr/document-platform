{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\nfunction AutoscalingApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n_c = AutoscalingApi;\n\nAutoscalingApi.prototype.deleteAutoscalingPolicy = function autoscalingDeleteAutoscalingPolicyApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_autoscaling' + '/' + 'policy' + '/' + encodeURIComponent(name); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nAutoscalingApi.prototype.getAutoscalingCapacity = function autoscalingGetAutoscalingCapacityApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_autoscaling' + '/' + 'capacity'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nAutoscalingApi.prototype.getAutoscalingPolicy = function autoscalingGetAutoscalingPolicyApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_autoscaling' + '/' + 'policy' + '/' + encodeURIComponent(name); // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nAutoscalingApi.prototype.putAutoscalingPolicy = function autoscalingPutAutoscalingPolicyApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_autoscaling' + '/' + 'policy' + '/' + encodeURIComponent(name); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nObject.defineProperties(AutoscalingApi.prototype, {\n  delete_autoscaling_policy: {\n    get() {\n      return this.deleteAutoscalingPolicy;\n    }\n\n  },\n  get_autoscaling_capacity: {\n    get() {\n      return this.getAutoscalingCapacity;\n    }\n\n  },\n  get_autoscaling_policy: {\n    get() {\n      return this.getAutoscalingPolicy;\n    }\n\n  },\n  put_autoscaling_policy: {\n    get() {\n      return this.putAutoscalingPolicy;\n    }\n\n  }\n});\nmodule.exports = AutoscalingApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"AutoscalingApi\");","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/autoscaling.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","errorTrace","filterPath","AutoscalingApi","transport","ConfigurationError","prototype","deleteAutoscalingPolicy","autoscalingDeleteAutoscalingPolicyApi","params","options","callback","name","err","method","body","querystring","path","encodeURIComponent","request","getAutoscalingCapacity","autoscalingGetAutoscalingCapacityApi","getAutoscalingPolicy","autoscalingGetAutoscalingPolicyApi","putAutoscalingPolicy","autoscalingPutAutoscalingPolicyApi","Object","defineProperties","delete_autoscaling_policy","get","get_autoscaling_capacity","get_autoscaling_policy","put_autoscaling_policy","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;AAEA,MAAM;AAAEA,EAAAA,WAAF;AAAeC,EAAAA,aAAf;AAA8BC,EAAAA,kBAA9B;AAAkDC,EAAAA;AAAlD,IAA0EC,OAAO,CAAC,UAAD,CAAvF;;AACA,MAAMC,mBAAmB,GAAG,CAAC,QAAD,EAAW,OAAX,EAAoB,aAApB,EAAmC,QAAnC,EAA6C,aAA7C,CAA5B;AACA,MAAMC,SAAS,GAAG;AAAEC,EAAAA,UAAU,EAAE,aAAd;AAA6BC,EAAAA,UAAU,EAAE;AAAzC,CAAlB;;AAEA,SAASC,cAAT,CAAyBC,SAAzB,EAAoCC,kBAApC,EAAwD;AACtD,OAAKD,SAAL,GAAiBA,SAAjB;AACA,OAAKP,mBAAL,IAA4BQ,kBAA5B;AACD;;KAHQF,c;;AAKTA,cAAc,CAACG,SAAf,CAAyBC,uBAAzB,GAAmD,SAASC,qCAAT,CAAgDC,MAAhD,EAAwDC,OAAxD,EAAiEC,QAAjE,EAA2E;AAC5H;AAAC,GAACF,MAAD,EAASC,OAAT,EAAkBC,QAAlB,IAA8Bf,kBAAkB,CAACa,MAAD,EAASC,OAAT,EAAkBC,QAAlB,CAAhD,CAD2H,CAG5H;;AACA,MAAIF,MAAM,CAACG,IAAP,IAAe,IAAnB,EAAyB;AACvB,UAAMC,GAAG,GAAG,IAAI,KAAKhB,mBAAL,CAAJ,CAA8B,kCAA9B,CAAZ;AACA,WAAOH,WAAW,CAACmB,GAAD,EAAMF,QAAN,CAAlB;AACD;;AAED,MAAI;AAAEG,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBH,IAAAA,IAAhB;AAAsB,OAAGI;AAAzB,MAAyCP,MAA7C;AACAO,EAAAA,WAAW,GAAGrB,aAAa,CAACI,mBAAD,EAAsBC,SAAtB,EAAiCgB,WAAjC,CAA3B;AAEA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIH,MAAM,IAAI,IAAd,EAAoBA,MAAM,GAAG,QAAT;AACpBG,EAAAA,IAAI,GAAG,MAAM,cAAN,GAAuB,GAAvB,GAA6B,QAA7B,GAAwC,GAAxC,GAA8CC,kBAAkB,CAACN,IAAD,CAAvE,CAd4H,CAgB5H;;AACA,QAAMO,OAAO,GAAG;AACdL,IAAAA,MADc;AAEdG,IAAAA,IAFc;AAGdF,IAAAA,IAAI,EAAEA,IAAI,IAAI,EAHA;AAIdC,IAAAA;AAJc,GAAhB;AAOA,SAAO,KAAKZ,SAAL,CAAee,OAAf,CAAuBA,OAAvB,EAAgCT,OAAhC,EAAyCC,QAAzC,CAAP;AACD,CAzBD;;AA2BAR,cAAc,CAACG,SAAf,CAAyBc,sBAAzB,GAAkD,SAASC,oCAAT,CAA+CZ,MAA/C,EAAuDC,OAAvD,EAAgEC,QAAhE,EAA0E;AAC1H;AAAC,GAACF,MAAD,EAASC,OAAT,EAAkBC,QAAlB,IAA8Bf,kBAAkB,CAACa,MAAD,EAASC,OAAT,EAAkBC,QAAlB,CAAhD;AAED,MAAI;AAAEG,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgB,OAAGC;AAAnB,MAAmCP,MAAvC;AACAO,EAAAA,WAAW,GAAGrB,aAAa,CAACI,mBAAD,EAAsBC,SAAtB,EAAiCgB,WAAjC,CAA3B;AAEA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIH,MAAM,IAAI,IAAd,EAAoBA,MAAM,GAAG,KAAT;AACpBG,EAAAA,IAAI,GAAG,MAAM,cAAN,GAAuB,GAAvB,GAA6B,UAApC,CAR0H,CAU1H;;AACA,QAAME,OAAO,GAAG;AACdL,IAAAA,MADc;AAEdG,IAAAA,IAFc;AAGdF,IAAAA,IAAI,EAAE,IAHQ;AAIdC,IAAAA;AAJc,GAAhB;AAOA,SAAO,KAAKZ,SAAL,CAAee,OAAf,CAAuBA,OAAvB,EAAgCT,OAAhC,EAAyCC,QAAzC,CAAP;AACD,CAnBD;;AAqBAR,cAAc,CAACG,SAAf,CAAyBgB,oBAAzB,GAAgD,SAASC,kCAAT,CAA6Cd,MAA7C,EAAqDC,OAArD,EAA8DC,QAA9D,EAAwE;AACtH;AAAC,GAACF,MAAD,EAASC,OAAT,EAAkBC,QAAlB,IAA8Bf,kBAAkB,CAACa,MAAD,EAASC,OAAT,EAAkBC,QAAlB,CAAhD,CADqH,CAGtH;;AACA,MAAIF,MAAM,CAACG,IAAP,IAAe,IAAnB,EAAyB;AACvB,UAAMC,GAAG,GAAG,IAAI,KAAKhB,mBAAL,CAAJ,CAA8B,kCAA9B,CAAZ;AACA,WAAOH,WAAW,CAACmB,GAAD,EAAMF,QAAN,CAAlB;AACD;;AAED,MAAI;AAAEG,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBH,IAAAA,IAAhB;AAAsB,OAAGI;AAAzB,MAAyCP,MAA7C;AACAO,EAAAA,WAAW,GAAGrB,aAAa,CAACI,mBAAD,EAAsBC,SAAtB,EAAiCgB,WAAjC,CAA3B;AAEA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIH,MAAM,IAAI,IAAd,EAAoBA,MAAM,GAAG,KAAT;AACpBG,EAAAA,IAAI,GAAG,MAAM,cAAN,GAAuB,GAAvB,GAA6B,QAA7B,GAAwC,GAAxC,GAA8CC,kBAAkB,CAACN,IAAD,CAAvE,CAdsH,CAgBtH;;AACA,QAAMO,OAAO,GAAG;AACdL,IAAAA,MADc;AAEdG,IAAAA,IAFc;AAGdF,IAAAA,IAAI,EAAE,IAHQ;AAIdC,IAAAA;AAJc,GAAhB;AAOA,SAAO,KAAKZ,SAAL,CAAee,OAAf,CAAuBA,OAAvB,EAAgCT,OAAhC,EAAyCC,QAAzC,CAAP;AACD,CAzBD;;AA2BAR,cAAc,CAACG,SAAf,CAAyBkB,oBAAzB,GAAgD,SAASC,kCAAT,CAA6ChB,MAA7C,EAAqDC,OAArD,EAA8DC,QAA9D,EAAwE;AACtH;AAAC,GAACF,MAAD,EAASC,OAAT,EAAkBC,QAAlB,IAA8Bf,kBAAkB,CAACa,MAAD,EAASC,OAAT,EAAkBC,QAAlB,CAAhD,CADqH,CAGtH;;AACA,MAAIF,MAAM,CAACG,IAAP,IAAe,IAAnB,EAAyB;AACvB,UAAMC,GAAG,GAAG,IAAI,KAAKhB,mBAAL,CAAJ,CAA8B,kCAA9B,CAAZ;AACA,WAAOH,WAAW,CAACmB,GAAD,EAAMF,QAAN,CAAlB;AACD;;AACD,MAAIF,MAAM,CAACM,IAAP,IAAe,IAAnB,EAAyB;AACvB,UAAMF,GAAG,GAAG,IAAI,KAAKhB,mBAAL,CAAJ,CAA8B,kCAA9B,CAAZ;AACA,WAAOH,WAAW,CAACmB,GAAD,EAAMF,QAAN,CAAlB;AACD;;AAED,MAAI;AAAEG,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBH,IAAAA,IAAhB;AAAsB,OAAGI;AAAzB,MAAyCP,MAA7C;AACAO,EAAAA,WAAW,GAAGrB,aAAa,CAACI,mBAAD,EAAsBC,SAAtB,EAAiCgB,WAAjC,CAA3B;AAEA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIH,MAAM,IAAI,IAAd,EAAoBA,MAAM,GAAG,KAAT;AACpBG,EAAAA,IAAI,GAAG,MAAM,cAAN,GAAuB,GAAvB,GAA6B,QAA7B,GAAwC,GAAxC,GAA8CC,kBAAkB,CAACN,IAAD,CAAvE,CAlBsH,CAoBtH;;AACA,QAAMO,OAAO,GAAG;AACdL,IAAAA,MADc;AAEdG,IAAAA,IAFc;AAGdF,IAAAA,IAAI,EAAEA,IAAI,IAAI,EAHA;AAIdC,IAAAA;AAJc,GAAhB;AAOA,SAAO,KAAKZ,SAAL,CAAee,OAAf,CAAuBA,OAAvB,EAAgCT,OAAhC,EAAyCC,QAAzC,CAAP;AACD,CA7BD;;AA+BAe,MAAM,CAACC,gBAAP,CAAwBxB,cAAc,CAACG,SAAvC,EAAkD;AAChDsB,EAAAA,yBAAyB,EAAE;AAAEC,IAAAA,GAAG,GAAI;AAAE,aAAO,KAAKtB,uBAAZ;AAAqC;;AAAhD,GADqB;AAEhDuB,EAAAA,wBAAwB,EAAE;AAAED,IAAAA,GAAG,GAAI;AAAE,aAAO,KAAKT,sBAAZ;AAAoC;;AAA/C,GAFsB;AAGhDW,EAAAA,sBAAsB,EAAE;AAAEF,IAAAA,GAAG,GAAI;AAAE,aAAO,KAAKP,oBAAZ;AAAkC;;AAA7C,GAHwB;AAIhDU,EAAAA,sBAAsB,EAAE;AAAEH,IAAAA,GAAG,GAAI;AAAE,aAAO,KAAKL,oBAAZ;AAAkC;;AAA7C;AAJwB,CAAlD;AAOAS,MAAM,CAACC,OAAP,GAAiB/B,cAAjB","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path']\r\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path' }\r\n\r\nfunction AutoscalingApi (transport, ConfigurationError) {\r\n  this.transport = transport\r\n  this[kConfigurationError] = ConfigurationError\r\n}\r\n\r\nAutoscalingApi.prototype.deleteAutoscalingPolicy = function autoscalingDeleteAutoscalingPolicyApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_autoscaling' + '/' + 'policy' + '/' + encodeURIComponent(name)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nAutoscalingApi.prototype.getAutoscalingCapacity = function autoscalingGetAutoscalingCapacityApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_autoscaling' + '/' + 'capacity'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nAutoscalingApi.prototype.getAutoscalingPolicy = function autoscalingGetAutoscalingPolicyApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_autoscaling' + '/' + 'policy' + '/' + encodeURIComponent(name)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nAutoscalingApi.prototype.putAutoscalingPolicy = function autoscalingPutAutoscalingPolicyApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_autoscaling' + '/' + 'policy' + '/' + encodeURIComponent(name)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nObject.defineProperties(AutoscalingApi.prototype, {\r\n  delete_autoscaling_policy: { get () { return this.deleteAutoscalingPolicy } },\r\n  get_autoscaling_capacity: { get () { return this.getAutoscalingCapacity } },\r\n  get_autoscaling_policy: { get () { return this.getAutoscalingPolicy } },\r\n  put_autoscaling_policy: { get () { return this.putAutoscalingPolicy } }\r\n})\r\n\r\nmodule.exports = AutoscalingApi\r\n"]},"metadata":{},"sourceType":"module"}