{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['nodes', 'actions', 'parent_task_id', 'wait_for_completion', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'timeout', 'detailed', 'group_by'];\nconst snakeCase = {\n  parentTaskId: 'parent_task_id',\n  waitForCompletion: 'wait_for_completion',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n  groupBy: 'group_by'\n};\n\nfunction TasksApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n_c = TasksApi;\n\nTasksApi.prototype.cancel = function tasksCancelApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    taskId,\n    task_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if ((task_id || taskId) != null) {\n    if (method == null) method = 'POST';\n    path = '/' + '_tasks' + '/' + encodeURIComponent(task_id || taskId) + '/' + '_cancel';\n  } else {\n    if (method == null) method = 'POST';\n    path = '/' + '_tasks' + '/' + '_cancel';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nTasksApi.prototype.get = function tasksGetApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.task_id == null && params.taskId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: task_id or taskId');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    taskId,\n    task_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_tasks' + '/' + encodeURIComponent(task_id || taskId); // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nTasksApi.prototype.list = function tasksListApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_tasks'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nmodule.exports = TasksApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"TasksApi\");","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/tasks.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","parentTaskId","waitForCompletion","errorTrace","filterPath","groupBy","TasksApi","transport","ConfigurationError","prototype","cancel","tasksCancelApi","params","options","callback","method","body","taskId","task_id","querystring","path","encodeURIComponent","request","get","tasksGetApi","err","list","tasksListApi","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['nodes', 'actions', 'parent_task_id', 'wait_for_completion', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'timeout', 'detailed', 'group_by']\r\nconst snakeCase = { parentTaskId: 'parent_task_id', waitForCompletion: 'wait_for_completion', errorTrace: 'error_trace', filterPath: 'filter_path', groupBy: 'group_by' }\r\n\r\nfunction TasksApi (transport, ConfigurationError) {\r\n  this.transport = transport\r\n  this[kConfigurationError] = ConfigurationError\r\n}\r\n\r\nTasksApi.prototype.cancel = function tasksCancelApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, taskId, task_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((task_id || taskId) != null) {\r\n    if (method == null) method = 'POST'\r\n    path = '/' + '_tasks' + '/' + encodeURIComponent(task_id || taskId) + '/' + '_cancel'\r\n  } else {\r\n    if (method == null) method = 'POST'\r\n    path = '/' + '_tasks' + '/' + '_cancel'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nTasksApi.prototype.get = function tasksGetApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.task_id == null && params.taskId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: task_id or taskId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, taskId, task_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_tasks' + '/' + encodeURIComponent(task_id || taskId)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nTasksApi.prototype.list = function tasksListApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_tasks'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nmodule.exports = TasksApi\r\n"]},"metadata":{},"sourceType":"module"}