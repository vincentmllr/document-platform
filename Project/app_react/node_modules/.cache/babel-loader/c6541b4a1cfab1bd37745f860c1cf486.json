{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['timeout', 'master_timeout', 'context', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  masterTimeout: 'master_timeout',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\nfunction putScriptApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if (params.context != null && params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: id');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    id,\n    context,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (id != null && context != null) {\n    if (method == null) method = 'PUT';\n    path = '/' + '_scripts' + '/' + encodeURIComponent(id) + '/' + encodeURIComponent(context);\n  } else {\n    if (method == null) method = 'PUT';\n    path = '/' + '_scripts' + '/' + encodeURIComponent(id);\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n}\n\nmodule.exports = putScriptApi;","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/put_script.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","masterTimeout","errorTrace","filterPath","putScriptApi","params","options","callback","id","err","body","context","method","querystring","path","encodeURIComponent","request","transport","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;AAEA,MAAM;AAAEA,EAAAA,WAAF;AAAeC,EAAAA,aAAf;AAA8BC,EAAAA,kBAA9B;AAAkDC,EAAAA;AAAlD,IAA0EC,OAAO,CAAC,UAAD,CAAvF;;AACA,MAAMC,mBAAmB,GAAG,CAAC,SAAD,EAAY,gBAAZ,EAA8B,SAA9B,EAAyC,QAAzC,EAAmD,OAAnD,EAA4D,aAA5D,EAA2E,QAA3E,EAAqF,aAArF,CAA5B;AACA,MAAMC,SAAS,GAAG;AAAEC,EAAAA,aAAa,EAAE,gBAAjB;AAAmCC,EAAAA,UAAU,EAAE,aAA/C;AAA8DC,EAAAA,UAAU,EAAE;AAA1E,CAAlB;;AAEA,SAASC,YAAT,CAAuBC,MAAvB,EAA+BC,OAA/B,EAAwCC,QAAxC,EAAkD;AAChD;AAAC,GAACF,MAAD,EAASC,OAAT,EAAkBC,QAAlB,IAA8BX,kBAAkB,CAACS,MAAD,EAASC,OAAT,EAAkBC,QAAlB,CAAhD,CAD+C,CAGhD;;AACA,MAAIF,MAAM,CAACG,EAAP,IAAa,IAAjB,EAAuB;AACrB,UAAMC,GAAG,GAAG,IAAI,KAAKZ,mBAAL,CAAJ,CAA8B,gCAA9B,CAAZ;AACA,WAAOH,WAAW,CAACe,GAAD,EAAMF,QAAN,CAAlB;AACD;;AACD,MAAIF,MAAM,CAACK,IAAP,IAAe,IAAnB,EAAyB;AACvB,UAAMD,GAAG,GAAG,IAAI,KAAKZ,mBAAL,CAAJ,CAA8B,kCAA9B,CAAZ;AACA,WAAOH,WAAW,CAACe,GAAD,EAAMF,QAAN,CAAlB;AACD,GAX+C,CAahD;;;AACA,MAAIF,MAAM,CAACM,OAAP,IAAkB,IAAlB,IAA2BN,MAAM,CAACG,EAAP,IAAa,IAA5C,EAAmD;AACjD,UAAMC,GAAG,GAAG,IAAI,KAAKZ,mBAAL,CAAJ,CAA8B,2CAA9B,CAAZ;AACA,WAAOH,WAAW,CAACe,GAAD,EAAMF,QAAN,CAAlB;AACD;;AAED,MAAI;AAAEK,IAAAA,MAAF;AAAUF,IAAAA,IAAV;AAAgBF,IAAAA,EAAhB;AAAoBG,IAAAA,OAApB;AAA6B,OAAGE;AAAhC,MAAgDR,MAApD;AACAQ,EAAAA,WAAW,GAAGlB,aAAa,CAACI,mBAAD,EAAsBC,SAAtB,EAAiCa,WAAjC,CAA3B;AAEA,MAAIC,IAAI,GAAG,EAAX;;AACA,MAAKN,EAAD,IAAQ,IAAR,IAAiBG,OAAD,IAAa,IAAjC,EAAuC;AACrC,QAAIC,MAAM,IAAI,IAAd,EAAoBA,MAAM,GAAG,KAAT;AACpBE,IAAAA,IAAI,GAAG,MAAM,UAAN,GAAmB,GAAnB,GAAyBC,kBAAkB,CAACP,EAAD,CAA3C,GAAkD,GAAlD,GAAwDO,kBAAkB,CAACJ,OAAD,CAAjF;AACD,GAHD,MAGO;AACL,QAAIC,MAAM,IAAI,IAAd,EAAoBA,MAAM,GAAG,KAAT;AACpBE,IAAAA,IAAI,GAAG,MAAM,UAAN,GAAmB,GAAnB,GAAyBC,kBAAkB,CAACP,EAAD,CAAlD;AACD,GA7B+C,CA+BhD;;;AACA,QAAMQ,OAAO,GAAG;AACdJ,IAAAA,MADc;AAEdE,IAAAA,IAFc;AAGdJ,IAAAA,IAAI,EAAEA,IAAI,IAAI,EAHA;AAIdG,IAAAA;AAJc,GAAhB;AAOA,SAAO,KAAKI,SAAL,CAAeD,OAAf,CAAuBA,OAAvB,EAAgCV,OAAhC,EAAyCC,QAAzC,CAAP;AACD;;AAEDW,MAAM,CAACC,OAAP,GAAiBf,YAAjB","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['timeout', 'master_timeout', 'context', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\r\nconst snakeCase = { masterTimeout: 'master_timeout', errorTrace: 'error_trace', filterPath: 'filter_path' }\r\n\r\nfunction putScriptApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.id == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: id')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if (params.context != null && (params.id == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: id')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, id, context, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((id) != null && (context) != null) {\r\n    if (method == null) method = 'PUT'\r\n    path = '/' + '_scripts' + '/' + encodeURIComponent(id) + '/' + encodeURIComponent(context)\r\n  } else {\r\n    if (method == null) method = 'PUT'\r\n    path = '/' + '_scripts' + '/' + encodeURIComponent(id)\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nmodule.exports = putScriptApi\r\n"]},"metadata":{},"sourceType":"module"}