{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path', 'wait_for_active_shards'];\nconst snakeCase = {\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n  waitForActiveShards: 'wait_for_active_shards'\n};\n\nfunction CcrApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n_c = CcrApi;\n\nCcrApi.prototype.deleteAutoFollowPattern = function ccrDeleteAutoFollowPatternApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_ccr' + '/' + 'auto_follow' + '/' + encodeURIComponent(name); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nCcrApi.prototype.follow = function ccrFollowApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + encodeURIComponent(index) + '/' + '_ccr' + '/' + 'follow'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nCcrApi.prototype.followInfo = function ccrFollowInfoApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + encodeURIComponent(index) + '/' + '_ccr' + '/' + 'info'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nCcrApi.prototype.followStats = function ccrFollowStatsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + encodeURIComponent(index) + '/' + '_ccr' + '/' + 'stats'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nCcrApi.prototype.forgetFollower = function ccrForgetFollowerApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + encodeURIComponent(index) + '/' + '_ccr' + '/' + 'forget_follower'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nCcrApi.prototype.getAutoFollowPattern = function ccrGetAutoFollowPatternApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (name != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_ccr' + '/' + 'auto_follow' + '/' + encodeURIComponent(name);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_ccr' + '/' + 'auto_follow';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nCcrApi.prototype.pauseAutoFollowPattern = function ccrPauseAutoFollowPatternApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ccr' + '/' + 'auto_follow' + '/' + encodeURIComponent(name) + '/' + 'pause'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nCcrApi.prototype.pauseFollow = function ccrPauseFollowApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + encodeURIComponent(index) + '/' + '_ccr' + '/' + 'pause_follow'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nCcrApi.prototype.putAutoFollowPattern = function ccrPutAutoFollowPatternApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_ccr' + '/' + 'auto_follow' + '/' + encodeURIComponent(name); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nCcrApi.prototype.resumeAutoFollowPattern = function ccrResumeAutoFollowPatternApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.name == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: name');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    name,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ccr' + '/' + 'auto_follow' + '/' + encodeURIComponent(name) + '/' + 'resume'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nCcrApi.prototype.resumeFollow = function ccrResumeFollowApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + encodeURIComponent(index) + '/' + '_ccr' + '/' + 'resume_follow'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nCcrApi.prototype.stats = function ccrStatsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_ccr' + '/' + 'stats'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nCcrApi.prototype.unfollow = function ccrUnfollowApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + encodeURIComponent(index) + '/' + '_ccr' + '/' + 'unfollow'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nObject.defineProperties(CcrApi.prototype, {\n  delete_auto_follow_pattern: {\n    get() {\n      return this.deleteAutoFollowPattern;\n    }\n\n  },\n  follow_info: {\n    get() {\n      return this.followInfo;\n    }\n\n  },\n  follow_stats: {\n    get() {\n      return this.followStats;\n    }\n\n  },\n  forget_follower: {\n    get() {\n      return this.forgetFollower;\n    }\n\n  },\n  get_auto_follow_pattern: {\n    get() {\n      return this.getAutoFollowPattern;\n    }\n\n  },\n  pause_auto_follow_pattern: {\n    get() {\n      return this.pauseAutoFollowPattern;\n    }\n\n  },\n  pause_follow: {\n    get() {\n      return this.pauseFollow;\n    }\n\n  },\n  put_auto_follow_pattern: {\n    get() {\n      return this.putAutoFollowPattern;\n    }\n\n  },\n  resume_auto_follow_pattern: {\n    get() {\n      return this.resumeAutoFollowPattern;\n    }\n\n  },\n  resume_follow: {\n    get() {\n      return this.resumeFollow;\n    }\n\n  }\n});\nmodule.exports = CcrApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"CcrApi\");","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/ccr.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","errorTrace","filterPath","waitForActiveShards","CcrApi","transport","ConfigurationError","prototype","deleteAutoFollowPattern","ccrDeleteAutoFollowPatternApi","params","options","callback","name","err","method","body","querystring","path","encodeURIComponent","request","follow","ccrFollowApi","index","followInfo","ccrFollowInfoApi","followStats","ccrFollowStatsApi","forgetFollower","ccrForgetFollowerApi","getAutoFollowPattern","ccrGetAutoFollowPatternApi","pauseAutoFollowPattern","ccrPauseAutoFollowPatternApi","pauseFollow","ccrPauseFollowApi","putAutoFollowPattern","ccrPutAutoFollowPatternApi","resumeAutoFollowPattern","ccrResumeAutoFollowPatternApi","resumeFollow","ccrResumeFollowApi","stats","ccrStatsApi","unfollow","ccrUnfollowApi","Object","defineProperties","delete_auto_follow_pattern","get","follow_info","follow_stats","forget_follower","get_auto_follow_pattern","pause_auto_follow_pattern","pause_follow","put_auto_follow_pattern","resume_auto_follow_pattern","resume_follow","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path', 'wait_for_active_shards']\r\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path', waitForActiveShards: 'wait_for_active_shards' }\r\n\r\nfunction CcrApi (transport, ConfigurationError) {\r\n  this.transport = transport\r\n  this[kConfigurationError] = ConfigurationError\r\n}\r\n\r\nCcrApi.prototype.deleteAutoFollowPattern = function ccrDeleteAutoFollowPatternApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_ccr' + '/' + 'auto_follow' + '/' + encodeURIComponent(name)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nCcrApi.prototype.follow = function ccrFollowApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + encodeURIComponent(index) + '/' + '_ccr' + '/' + 'follow'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nCcrApi.prototype.followInfo = function ccrFollowInfoApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + encodeURIComponent(index) + '/' + '_ccr' + '/' + 'info'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nCcrApi.prototype.followStats = function ccrFollowStatsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + encodeURIComponent(index) + '/' + '_ccr' + '/' + 'stats'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nCcrApi.prototype.forgetFollower = function ccrForgetFollowerApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + encodeURIComponent(index) + '/' + '_ccr' + '/' + 'forget_follower'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nCcrApi.prototype.getAutoFollowPattern = function ccrGetAutoFollowPatternApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((name) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_ccr' + '/' + 'auto_follow' + '/' + encodeURIComponent(name)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_ccr' + '/' + 'auto_follow'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nCcrApi.prototype.pauseAutoFollowPattern = function ccrPauseAutoFollowPatternApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ccr' + '/' + 'auto_follow' + '/' + encodeURIComponent(name) + '/' + 'pause'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nCcrApi.prototype.pauseFollow = function ccrPauseFollowApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + encodeURIComponent(index) + '/' + '_ccr' + '/' + 'pause_follow'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nCcrApi.prototype.putAutoFollowPattern = function ccrPutAutoFollowPatternApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_ccr' + '/' + 'auto_follow' + '/' + encodeURIComponent(name)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nCcrApi.prototype.resumeAutoFollowPattern = function ccrResumeAutoFollowPatternApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.name == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: name')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, name, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ccr' + '/' + 'auto_follow' + '/' + encodeURIComponent(name) + '/' + 'resume'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nCcrApi.prototype.resumeFollow = function ccrResumeFollowApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + encodeURIComponent(index) + '/' + '_ccr' + '/' + 'resume_follow'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nCcrApi.prototype.stats = function ccrStatsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_ccr' + '/' + 'stats'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nCcrApi.prototype.unfollow = function ccrUnfollowApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + encodeURIComponent(index) + '/' + '_ccr' + '/' + 'unfollow'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nObject.defineProperties(CcrApi.prototype, {\r\n  delete_auto_follow_pattern: { get () { return this.deleteAutoFollowPattern } },\r\n  follow_info: { get () { return this.followInfo } },\r\n  follow_stats: { get () { return this.followStats } },\r\n  forget_follower: { get () { return this.forgetFollower } },\r\n  get_auto_follow_pattern: { get () { return this.getAutoFollowPattern } },\r\n  pause_auto_follow_pattern: { get () { return this.pauseAutoFollowPattern } },\r\n  pause_follow: { get () { return this.pauseFollow } },\r\n  put_auto_follow_pattern: { get () { return this.putAutoFollowPattern } },\r\n  resume_auto_follow_pattern: { get () { return this.resumeAutoFollowPattern } },\r\n  resume_follow: { get () { return this.resumeFollow } }\r\n})\r\n\r\nmodule.exports = CcrApi\r\n"]},"metadata":{},"sourceType":"module"}