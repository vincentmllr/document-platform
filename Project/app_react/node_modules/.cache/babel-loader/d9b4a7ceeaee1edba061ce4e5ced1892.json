{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['accept_data_loss', 'timeout', 'master_timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  acceptDataLoss: 'accept_data_loss',\n  masterTimeout: 'master_timeout',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\nfunction DanglingIndicesApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n_c = DanglingIndicesApi;\n\nDanglingIndicesApi.prototype.deleteDanglingIndex = function danglingIndicesDeleteDanglingIndexApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index_uuid == null && params.indexUuid == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index_uuid or indexUuid');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    indexUuid,\n    index_uuid,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_dangling' + '/' + encodeURIComponent(index_uuid || indexUuid); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nDanglingIndicesApi.prototype.importDanglingIndex = function danglingIndicesImportDanglingIndexApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index_uuid == null && params.indexUuid == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index_uuid or indexUuid');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    indexUuid,\n    index_uuid,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_dangling' + '/' + encodeURIComponent(index_uuid || indexUuid); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nDanglingIndicesApi.prototype.listDanglingIndices = function danglingIndicesListDanglingIndicesApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_dangling'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nObject.defineProperties(DanglingIndicesApi.prototype, {\n  delete_dangling_index: {\n    get() {\n      return this.deleteDanglingIndex;\n    }\n\n  },\n  import_dangling_index: {\n    get() {\n      return this.importDanglingIndex;\n    }\n\n  },\n  list_dangling_indices: {\n    get() {\n      return this.listDanglingIndices;\n    }\n\n  }\n});\nmodule.exports = DanglingIndicesApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"DanglingIndicesApi\");","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/dangling_indices.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","acceptDataLoss","masterTimeout","errorTrace","filterPath","DanglingIndicesApi","transport","ConfigurationError","prototype","deleteDanglingIndex","danglingIndicesDeleteDanglingIndexApi","params","options","callback","index_uuid","indexUuid","err","method","body","querystring","path","encodeURIComponent","request","importDanglingIndex","danglingIndicesImportDanglingIndexApi","listDanglingIndices","danglingIndicesListDanglingIndicesApi","Object","defineProperties","delete_dangling_index","get","import_dangling_index","list_dangling_indices","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['accept_data_loss', 'timeout', 'master_timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\r\nconst snakeCase = { acceptDataLoss: 'accept_data_loss', masterTimeout: 'master_timeout', errorTrace: 'error_trace', filterPath: 'filter_path' }\r\n\r\nfunction DanglingIndicesApi (transport, ConfigurationError) {\r\n  this.transport = transport\r\n  this[kConfigurationError] = ConfigurationError\r\n}\r\n\r\nDanglingIndicesApi.prototype.deleteDanglingIndex = function danglingIndicesDeleteDanglingIndexApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index_uuid == null && params.indexUuid == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index_uuid or indexUuid')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, indexUuid, index_uuid, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_dangling' + '/' + encodeURIComponent(index_uuid || indexUuid)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nDanglingIndicesApi.prototype.importDanglingIndex = function danglingIndicesImportDanglingIndexApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index_uuid == null && params.indexUuid == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index_uuid or indexUuid')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, indexUuid, index_uuid, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_dangling' + '/' + encodeURIComponent(index_uuid || indexUuid)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nDanglingIndicesApi.prototype.listDanglingIndices = function danglingIndicesListDanglingIndicesApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_dangling'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nObject.defineProperties(DanglingIndicesApi.prototype, {\r\n  delete_dangling_index: { get () { return this.deleteDanglingIndex } },\r\n  import_dangling_index: { get () { return this.importDanglingIndex } },\r\n  list_dangling_indices: { get () { return this.listDanglingIndices } }\r\n})\r\n\r\nmodule.exports = DanglingIndicesApi\r\n"]},"metadata":{},"sourceType":"module"}