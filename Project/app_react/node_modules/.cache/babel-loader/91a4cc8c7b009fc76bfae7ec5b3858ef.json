{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path', 'wait_for_completion_timeout', 'keep_alive', 'keep_on_completion'];\nconst snakeCase = {\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n  waitForCompletionTimeout: 'wait_for_completion_timeout',\n  keepAlive: 'keep_alive',\n  keepOnCompletion: 'keep_on_completion'\n};\n\nfunction EqlApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n_c = EqlApi;\n\nEqlApi.prototype.delete = function eqlDeleteApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_eql' + '/' + 'search' + '/' + encodeURIComponent(id); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nEqlApi.prototype.get = function eqlGetApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_eql' + '/' + 'search' + '/' + encodeURIComponent(id); // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nEqlApi.prototype.getStatus = function eqlGetStatusApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.id == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: id');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_eql' + '/' + 'search' + '/' + 'status' + '/' + encodeURIComponent(id); // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nEqlApi.prototype.search = function eqlSearchApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = body == null ? 'GET' : 'POST';\n  path = '/' + encodeURIComponent(index) + '/' + '_eql' + '/' + 'search'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nObject.defineProperties(EqlApi.prototype, {\n  get_status: {\n    get() {\n      return this.getStatus;\n    }\n\n  }\n});\nmodule.exports = EqlApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"EqlApi\");","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/eql.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","errorTrace","filterPath","waitForCompletionTimeout","keepAlive","keepOnCompletion","EqlApi","transport","ConfigurationError","prototype","delete","eqlDeleteApi","params","options","callback","id","err","method","body","querystring","path","encodeURIComponent","request","get","eqlGetApi","getStatus","eqlGetStatusApi","search","eqlSearchApi","index","Object","defineProperties","get_status","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path', 'wait_for_completion_timeout', 'keep_alive', 'keep_on_completion']\r\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path', waitForCompletionTimeout: 'wait_for_completion_timeout', keepAlive: 'keep_alive', keepOnCompletion: 'keep_on_completion' }\r\n\r\nfunction EqlApi (transport, ConfigurationError) {\r\n  this.transport = transport\r\n  this[kConfigurationError] = ConfigurationError\r\n}\r\n\r\nEqlApi.prototype.delete = function eqlDeleteApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.id == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: id')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_eql' + '/' + 'search' + '/' + encodeURIComponent(id)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nEqlApi.prototype.get = function eqlGetApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.id == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: id')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_eql' + '/' + 'search' + '/' + encodeURIComponent(id)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nEqlApi.prototype.getStatus = function eqlGetStatusApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.id == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: id')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_eql' + '/' + 'search' + '/' + 'status' + '/' + encodeURIComponent(id)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nEqlApi.prototype.search = function eqlSearchApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = body == null ? 'GET' : 'POST'\r\n  path = '/' + encodeURIComponent(index) + '/' + '_eql' + '/' + 'search'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nObject.defineProperties(EqlApi.prototype, {\r\n  get_status: { get () { return this.getStatus } }\r\n})\r\n\r\nmodule.exports = EqlApi\r\n"]},"metadata":{},"sourceType":"module"}