{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['interval', 'snapshots', 'threads', 'ignore_idle_threads', 'type', 'timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'flat_settings', 'completion_fields', 'fielddata_fields', 'fields', 'groups', 'level', 'types', 'include_segment_file_sizes', 'include_unloaded_segments'];\nconst snakeCase = {\n  ignoreIdleThreads: 'ignore_idle_threads',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n  flatSettings: 'flat_settings',\n  completionFields: 'completion_fields',\n  fielddataFields: 'fielddata_fields',\n  includeSegmentFileSizes: 'include_segment_file_sizes',\n  includeUnloadedSegments: 'include_unloaded_segments'\n};\n\nfunction NodesApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n_c = NodesApi;\n\nNodesApi.prototype.hotThreads = function nodesHotThreadsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    nodeId,\n    node_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if ((node_id || nodeId) != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'hot_threads';\n  } else if ((node_id || nodeId) != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cluster' + '/' + 'nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'hotthreads';\n  } else if ((node_id || nodeId) != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'hotthreads';\n  } else if ((node_id || nodeId) != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_cluster' + '/' + 'nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'hot_threads';\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_nodes' + '/' + 'hot_threads';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nNodesApi.prototype.info = function nodesInfoApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    nodeId,\n    node_id,\n    metric,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if ((node_id || nodeId) != null && metric != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + encodeURIComponent(metric);\n  } else if ((node_id || nodeId) != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId);\n  } else if (metric != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_nodes' + '/' + encodeURIComponent(metric);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_nodes';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nNodesApi.prototype.reloadSecureSettings = function nodesReloadSecureSettingsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    nodeId,\n    node_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if ((node_id || nodeId) != null) {\n    if (method == null) method = 'POST';\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'reload_secure_settings';\n  } else {\n    if (method == null) method = 'POST';\n    path = '/' + '_nodes' + '/' + 'reload_secure_settings';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nNodesApi.prototype.stats = function nodesStatsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    nodeId,\n    node_id,\n    metric,\n    indexMetric,\n    index_metric,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if ((node_id || nodeId) != null && metric != null && (index_metric || indexMetric) != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'stats' + '/' + encodeURIComponent(metric) + '/' + encodeURIComponent(index_metric || indexMetric);\n  } else if ((node_id || nodeId) != null && metric != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'stats' + '/' + encodeURIComponent(metric);\n  } else if (metric != null && (index_metric || indexMetric) != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_nodes' + '/' + 'stats' + '/' + encodeURIComponent(metric) + '/' + encodeURIComponent(index_metric || indexMetric);\n  } else if ((node_id || nodeId) != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'stats';\n  } else if (metric != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_nodes' + '/' + 'stats' + '/' + encodeURIComponent(metric);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_nodes' + '/' + 'stats';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nNodesApi.prototype.usage = function nodesUsageApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    nodeId,\n    node_id,\n    metric,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if ((node_id || nodeId) != null && metric != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'usage' + '/' + encodeURIComponent(metric);\n  } else if ((node_id || nodeId) != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'usage';\n  } else if (metric != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_nodes' + '/' + 'usage' + '/' + encodeURIComponent(metric);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_nodes' + '/' + 'usage';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nObject.defineProperties(NodesApi.prototype, {\n  hot_threads: {\n    get() {\n      return this.hotThreads;\n    }\n\n  },\n  reload_secure_settings: {\n    get() {\n      return this.reloadSecureSettings;\n    }\n\n  }\n});\nmodule.exports = NodesApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"NodesApi\");","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/nodes.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","ignoreIdleThreads","errorTrace","filterPath","flatSettings","completionFields","fielddataFields","includeSegmentFileSizes","includeUnloadedSegments","NodesApi","transport","ConfigurationError","prototype","hotThreads","nodesHotThreadsApi","params","options","callback","method","body","nodeId","node_id","querystring","path","encodeURIComponent","request","info","nodesInfoApi","metric","reloadSecureSettings","nodesReloadSecureSettingsApi","stats","nodesStatsApi","indexMetric","index_metric","usage","nodesUsageApi","Object","defineProperties","hot_threads","get","reload_secure_settings","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['interval', 'snapshots', 'threads', 'ignore_idle_threads', 'type', 'timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'flat_settings', 'completion_fields', 'fielddata_fields', 'fields', 'groups', 'level', 'types', 'include_segment_file_sizes', 'include_unloaded_segments']\r\nconst snakeCase = { ignoreIdleThreads: 'ignore_idle_threads', errorTrace: 'error_trace', filterPath: 'filter_path', flatSettings: 'flat_settings', completionFields: 'completion_fields', fielddataFields: 'fielddata_fields', includeSegmentFileSizes: 'include_segment_file_sizes', includeUnloadedSegments: 'include_unloaded_segments' }\r\n\r\nfunction NodesApi (transport, ConfigurationError) {\r\n  this.transport = transport\r\n  this[kConfigurationError] = ConfigurationError\r\n}\r\n\r\nNodesApi.prototype.hotThreads = function nodesHotThreadsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, nodeId, node_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((node_id || nodeId) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'hot_threads'\r\n  } else if ((node_id || nodeId) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_cluster' + '/' + 'nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'hotthreads'\r\n  } else if ((node_id || nodeId) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'hotthreads'\r\n  } else if ((node_id || nodeId) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_cluster' + '/' + 'nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'hot_threads'\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_nodes' + '/' + 'hot_threads'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nNodesApi.prototype.info = function nodesInfoApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, nodeId, node_id, metric, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((node_id || nodeId) != null && (metric) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + encodeURIComponent(metric)\r\n  } else if ((node_id || nodeId) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId)\r\n  } else if ((metric) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_nodes' + '/' + encodeURIComponent(metric)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_nodes'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nNodesApi.prototype.reloadSecureSettings = function nodesReloadSecureSettingsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, nodeId, node_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((node_id || nodeId) != null) {\r\n    if (method == null) method = 'POST'\r\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'reload_secure_settings'\r\n  } else {\r\n    if (method == null) method = 'POST'\r\n    path = '/' + '_nodes' + '/' + 'reload_secure_settings'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nNodesApi.prototype.stats = function nodesStatsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, nodeId, node_id, metric, indexMetric, index_metric, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((node_id || nodeId) != null && (metric) != null && (index_metric || indexMetric) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'stats' + '/' + encodeURIComponent(metric) + '/' + encodeURIComponent(index_metric || indexMetric)\r\n  } else if ((node_id || nodeId) != null && (metric) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'stats' + '/' + encodeURIComponent(metric)\r\n  } else if ((metric) != null && (index_metric || indexMetric) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_nodes' + '/' + 'stats' + '/' + encodeURIComponent(metric) + '/' + encodeURIComponent(index_metric || indexMetric)\r\n  } else if ((node_id || nodeId) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'stats'\r\n  } else if ((metric) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_nodes' + '/' + 'stats' + '/' + encodeURIComponent(metric)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_nodes' + '/' + 'stats'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nNodesApi.prototype.usage = function nodesUsageApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, nodeId, node_id, metric, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((node_id || nodeId) != null && (metric) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'usage' + '/' + encodeURIComponent(metric)\r\n  } else if ((node_id || nodeId) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_nodes' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'usage'\r\n  } else if ((metric) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_nodes' + '/' + 'usage' + '/' + encodeURIComponent(metric)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_nodes' + '/' + 'usage'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nObject.defineProperties(NodesApi.prototype, {\r\n  hot_threads: { get () { return this.hotThreads } },\r\n  reload_secure_settings: { get () { return this.reloadSecureSettings } }\r\n})\r\n\r\nmodule.exports = NodesApi\r\n"]},"metadata":{},"sourceType":"module"}