{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n\nconst result = {\n  body: null,\n  statusCode: null,\n  headers: null,\n  warnings: null\n};\nconst kConfigurationError = Symbol('configuration error');\n\nfunction handleError(err, callback) {\n  if (callback) {\n    process.nextTick(callback, err, result);\n    return {\n      then: noop,\n      catch: noop,\n      abort: noop\n    };\n  }\n\n  return Promise.reject(err);\n}\n\nfunction snakeCaseKeys(acceptedQuerystring, snakeCase, querystring) {\n  const target = {};\n  const keys = Object.keys(querystring);\n\n  for (let i = 0, len = keys.length; i < len; i++) {\n    const key = keys[i];\n    target[snakeCase[key] || key] = querystring[key];\n  }\n\n  return target;\n}\n\nfunction normalizeArguments(params, options, callback) {\n  if (typeof options === 'function') {\n    callback = options;\n    options = {};\n  }\n\n  if (typeof params === 'function' || params == null) {\n    callback = params;\n    params = {};\n    options = {};\n  }\n\n  return [params, options, callback];\n}\n\nfunction noop() {}\n\nmodule.exports = {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  noop,\n  kConfigurationError\n};","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/utils.js"],"names":["result","body","statusCode","headers","warnings","kConfigurationError","Symbol","handleError","err","callback","process","nextTick","then","noop","catch","abort","Promise","reject","snakeCaseKeys","acceptedQuerystring","snakeCase","querystring","target","keys","Object","i","len","length","key","normalizeArguments","params","options","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA,MAAMA,MAAM,GAAG;AAAEC,EAAAA,IAAI,EAAE,IAAR;AAAcC,EAAAA,UAAU,EAAE,IAA1B;AAAgCC,EAAAA,OAAO,EAAE,IAAzC;AAA+CC,EAAAA,QAAQ,EAAE;AAAzD,CAAf;AACA,MAAMC,mBAAmB,GAAGC,MAAM,CAAC,qBAAD,CAAlC;;AAEA,SAASC,WAAT,CAAsBC,GAAtB,EAA2BC,QAA3B,EAAqC;AACnC,MAAIA,QAAJ,EAAc;AACZC,IAAAA,OAAO,CAACC,QAAR,CAAiBF,QAAjB,EAA2BD,GAA3B,EAAgCR,MAAhC;AACA,WAAO;AAAEY,MAAAA,IAAI,EAAEC,IAAR;AAAcC,MAAAA,KAAK,EAAED,IAArB;AAA2BE,MAAAA,KAAK,EAAEF;AAAlC,KAAP;AACD;;AACD,SAAOG,OAAO,CAACC,MAAR,CAAeT,GAAf,CAAP;AACD;;AAED,SAASU,aAAT,CAAwBC,mBAAxB,EAA6CC,SAA7C,EAAwDC,WAAxD,EAAqE;AACnE,QAAMC,MAAM,GAAG,EAAf;AACA,QAAMC,IAAI,GAAGC,MAAM,CAACD,IAAP,CAAYF,WAAZ,CAAb;;AACA,OAAK,IAAII,CAAC,GAAG,CAAR,EAAWC,GAAG,GAAGH,IAAI,CAACI,MAA3B,EAAmCF,CAAC,GAAGC,GAAvC,EAA4CD,CAAC,EAA7C,EAAiD;AAC/C,UAAMG,GAAG,GAAGL,IAAI,CAACE,CAAD,CAAhB;AACAH,IAAAA,MAAM,CAACF,SAAS,CAACQ,GAAD,CAAT,IAAkBA,GAAnB,CAAN,GAAgCP,WAAW,CAACO,GAAD,CAA3C;AACD;;AACD,SAAON,MAAP;AACD;;AAED,SAASO,kBAAT,CAA6BC,MAA7B,EAAqCC,OAArC,EAA8CtB,QAA9C,EAAwD;AACtD,MAAI,OAAOsB,OAAP,KAAmB,UAAvB,EAAmC;AACjCtB,IAAAA,QAAQ,GAAGsB,OAAX;AACAA,IAAAA,OAAO,GAAG,EAAV;AACD;;AACD,MAAI,OAAOD,MAAP,KAAkB,UAAlB,IAAgCA,MAAM,IAAI,IAA9C,EAAoD;AAClDrB,IAAAA,QAAQ,GAAGqB,MAAX;AACAA,IAAAA,MAAM,GAAG,EAAT;AACAC,IAAAA,OAAO,GAAG,EAAV;AACD;;AACD,SAAO,CAACD,MAAD,EAASC,OAAT,EAAkBtB,QAAlB,CAAP;AACD;;AAED,SAASI,IAAT,GAAiB,CAAE;;AAEnBmB,MAAM,CAACC,OAAP,GAAiB;AAAE1B,EAAAA,WAAF;AAAeW,EAAAA,aAAf;AAA8BW,EAAAA,kBAA9B;AAAkDhB,EAAAA,IAAlD;AAAwDR,EAAAA;AAAxD,CAAjB","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\nconst result = { body: null, statusCode: null, headers: null, warnings: null }\r\nconst kConfigurationError = Symbol('configuration error')\r\n\r\nfunction handleError (err, callback) {\r\n  if (callback) {\r\n    process.nextTick(callback, err, result)\r\n    return { then: noop, catch: noop, abort: noop }\r\n  }\r\n  return Promise.reject(err)\r\n}\r\n\r\nfunction snakeCaseKeys (acceptedQuerystring, snakeCase, querystring) {\r\n  const target = {}\r\n  const keys = Object.keys(querystring)\r\n  for (let i = 0, len = keys.length; i < len; i++) {\r\n    const key = keys[i]\r\n    target[snakeCase[key] || key] = querystring[key]\r\n  }\r\n  return target\r\n}\r\n\r\nfunction normalizeArguments (params, options, callback) {\r\n  if (typeof options === 'function') {\r\n    callback = options\r\n    options = {}\r\n  }\r\n  if (typeof params === 'function' || params == null) {\r\n    callback = params\r\n    params = {}\r\n    options = {}\r\n  }\r\n  return [params, options, callback]\r\n}\r\n\r\nfunction noop () {}\r\n\r\nmodule.exports = { handleError, snakeCaseKeys, normalizeArguments, noop, kConfigurationError }\r\n"]},"metadata":{},"sourceType":"module"}