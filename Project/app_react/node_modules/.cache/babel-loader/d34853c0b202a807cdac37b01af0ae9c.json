{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['term_statistics', 'field_statistics', 'fields', 'offsets', 'positions', 'payloads', 'preference', 'routing', 'realtime', 'version', 'version_type', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  termStatistics: 'term_statistics',\n  fieldStatistics: 'field_statistics',\n  versionType: 'version_type',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\nfunction termvectorsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    id,\n    type,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null && type != null && id != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + encodeURIComponent(id) + '/' + '_termvectors';\n  } else if (index != null && id != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_termvectors' + '/' + encodeURIComponent(id);\n  } else if (index != null && type != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_termvectors';\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_termvectors';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n}\n\nmodule.exports = termvectorsApi;","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/termvectors.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","termStatistics","fieldStatistics","versionType","errorTrace","filterPath","termvectorsApi","params","options","callback","index","err","method","body","id","type","querystring","path","encodeURIComponent","request","transport","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['term_statistics', 'field_statistics', 'fields', 'offsets', 'positions', 'payloads', 'preference', 'routing', 'realtime', 'version', 'version_type', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\r\nconst snakeCase = { termStatistics: 'term_statistics', fieldStatistics: 'field_statistics', versionType: 'version_type', errorTrace: 'error_trace', filterPath: 'filter_path' }\r\n\r\nfunction termvectorsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, id, type, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null && (type) != null && (id) != null) {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + encodeURIComponent(id) + '/' + '_termvectors'\r\n  } else if ((index) != null && (id) != null) {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_termvectors' + '/' + encodeURIComponent(id)\r\n  } else if ((index) != null && (type) != null) {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_termvectors'\r\n  } else {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_termvectors'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nmodule.exports = termvectorsApi\r\n"]},"metadata":{},"sourceType":"module"}