{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['search_type', 'typed_keys', 'max_concurrent_searches', 'rest_total_hits_as_int', 'ccs_minimize_roundtrips', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  searchType: 'search_type',\n  typedKeys: 'typed_keys',\n  maxConcurrentSearches: 'max_concurrent_searches',\n  restTotalHitsAsInt: 'rest_total_hits_as_int',\n  ccsMinimizeRoundtrips: 'ccs_minimize_roundtrips',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\nfunction msearchTemplateApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if (params.type != null && params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    type,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null && type != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_msearch' + '/' + 'template';\n  } else if (index != null) {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_msearch' + '/' + 'template';\n  } else {\n    if (method == null) method = body == null ? 'GET' : 'POST';\n    path = '/' + '_msearch' + '/' + 'template';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    bulkBody: body,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n}\n\nmodule.exports = msearchTemplateApi;","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/msearch_template.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","searchType","typedKeys","maxConcurrentSearches","restTotalHitsAsInt","ccsMinimizeRoundtrips","errorTrace","filterPath","msearchTemplateApi","params","options","callback","body","err","type","index","method","querystring","path","encodeURIComponent","request","bulkBody","transport","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['search_type', 'typed_keys', 'max_concurrent_searches', 'rest_total_hits_as_int', 'ccs_minimize_roundtrips', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\r\nconst snakeCase = { searchType: 'search_type', typedKeys: 'typed_keys', maxConcurrentSearches: 'max_concurrent_searches', restTotalHitsAsInt: 'rest_total_hits_as_int', ccsMinimizeRoundtrips: 'ccs_minimize_roundtrips', errorTrace: 'error_trace', filterPath: 'filter_path' }\r\n\r\nfunction msearchTemplateApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if (params.type != null && (params.index == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, type, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null && (type) != null) {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + encodeURIComponent(index) + '/' + encodeURIComponent(type) + '/' + '_msearch' + '/' + 'template'\r\n  } else if ((index) != null) {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_msearch' + '/' + 'template'\r\n  } else {\r\n    if (method == null) method = body == null ? 'GET' : 'POST'\r\n    path = '/' + '_msearch' + '/' + 'template'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    bulkBody: body,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nmodule.exports = msearchTemplateApi\r\n"]},"metadata":{},"sourceType":"module"}