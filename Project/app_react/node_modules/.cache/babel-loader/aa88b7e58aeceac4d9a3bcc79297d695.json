{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['force', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'from', 'size', 'allow_no_match', 'exclude_generated', 'defer_validation', 'timeout', 'wait_for_completion', 'wait_for_checkpoint'];\nconst snakeCase = {\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n  allowNoMatch: 'allow_no_match',\n  excludeGenerated: 'exclude_generated',\n  deferValidation: 'defer_validation',\n  waitForCompletion: 'wait_for_completion',\n  waitForCheckpoint: 'wait_for_checkpoint'\n};\n\nfunction TransformApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n_c = TransformApi;\n\nTransformApi.prototype.deleteTransform = function transformDeleteTransformApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.transform_id == null && params.transformId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: transform_id or transformId');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    transformId,\n    transform_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_transform' + '/' + encodeURIComponent(transform_id || transformId); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nTransformApi.prototype.getTransform = function transformGetTransformApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    transformId,\n    transform_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if ((transform_id || transformId) != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_transform' + '/' + encodeURIComponent(transform_id || transformId);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_transform';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nTransformApi.prototype.getTransformStats = function transformGetTransformStatsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.transform_id == null && params.transformId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: transform_id or transformId');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    transformId,\n    transform_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_transform' + '/' + encodeURIComponent(transform_id || transformId) + '/' + '_stats'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nTransformApi.prototype.previewTransform = function transformPreviewTransformApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_transform' + '/' + '_preview'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nTransformApi.prototype.putTransform = function transformPutTransformApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.transform_id == null && params.transformId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: transform_id or transformId');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    transformId,\n    transform_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_transform' + '/' + encodeURIComponent(transform_id || transformId); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nTransformApi.prototype.startTransform = function transformStartTransformApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.transform_id == null && params.transformId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: transform_id or transformId');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    transformId,\n    transform_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_transform' + '/' + encodeURIComponent(transform_id || transformId) + '/' + '_start'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nTransformApi.prototype.stopTransform = function transformStopTransformApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.transform_id == null && params.transformId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: transform_id or transformId');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    transformId,\n    transform_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_transform' + '/' + encodeURIComponent(transform_id || transformId) + '/' + '_stop'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nTransformApi.prototype.updateTransform = function transformUpdateTransformApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.transform_id == null && params.transformId == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: transform_id or transformId');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    transformId,\n    transform_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_transform' + '/' + encodeURIComponent(transform_id || transformId) + '/' + '_update'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nObject.defineProperties(TransformApi.prototype, {\n  delete_transform: {\n    get() {\n      return this.deleteTransform;\n    }\n\n  },\n  get_transform: {\n    get() {\n      return this.getTransform;\n    }\n\n  },\n  get_transform_stats: {\n    get() {\n      return this.getTransformStats;\n    }\n\n  },\n  preview_transform: {\n    get() {\n      return this.previewTransform;\n    }\n\n  },\n  put_transform: {\n    get() {\n      return this.putTransform;\n    }\n\n  },\n  start_transform: {\n    get() {\n      return this.startTransform;\n    }\n\n  },\n  stop_transform: {\n    get() {\n      return this.stopTransform;\n    }\n\n  },\n  update_transform: {\n    get() {\n      return this.updateTransform;\n    }\n\n  }\n});\nmodule.exports = TransformApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"TransformApi\");","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/transform.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","errorTrace","filterPath","allowNoMatch","excludeGenerated","deferValidation","waitForCompletion","waitForCheckpoint","TransformApi","transport","ConfigurationError","prototype","deleteTransform","transformDeleteTransformApi","params","options","callback","transform_id","transformId","err","method","body","querystring","path","encodeURIComponent","request","getTransform","transformGetTransformApi","getTransformStats","transformGetTransformStatsApi","previewTransform","transformPreviewTransformApi","putTransform","transformPutTransformApi","startTransform","transformStartTransformApi","stopTransform","transformStopTransformApi","updateTransform","transformUpdateTransformApi","Object","defineProperties","delete_transform","get","get_transform","get_transform_stats","preview_transform","put_transform","start_transform","stop_transform","update_transform","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['force', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'from', 'size', 'allow_no_match', 'exclude_generated', 'defer_validation', 'timeout', 'wait_for_completion', 'wait_for_checkpoint']\r\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path', allowNoMatch: 'allow_no_match', excludeGenerated: 'exclude_generated', deferValidation: 'defer_validation', waitForCompletion: 'wait_for_completion', waitForCheckpoint: 'wait_for_checkpoint' }\r\n\r\nfunction TransformApi (transport, ConfigurationError) {\r\n  this.transport = transport\r\n  this[kConfigurationError] = ConfigurationError\r\n}\r\n\r\nTransformApi.prototype.deleteTransform = function transformDeleteTransformApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.transform_id == null && params.transformId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: transform_id or transformId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, transformId, transform_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_transform' + '/' + encodeURIComponent(transform_id || transformId)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nTransformApi.prototype.getTransform = function transformGetTransformApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, transformId, transform_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((transform_id || transformId) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_transform' + '/' + encodeURIComponent(transform_id || transformId)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_transform'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nTransformApi.prototype.getTransformStats = function transformGetTransformStatsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.transform_id == null && params.transformId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: transform_id or transformId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, transformId, transform_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_transform' + '/' + encodeURIComponent(transform_id || transformId) + '/' + '_stats'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nTransformApi.prototype.previewTransform = function transformPreviewTransformApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_transform' + '/' + '_preview'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nTransformApi.prototype.putTransform = function transformPutTransformApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.transform_id == null && params.transformId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: transform_id or transformId')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, transformId, transform_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_transform' + '/' + encodeURIComponent(transform_id || transformId)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nTransformApi.prototype.startTransform = function transformStartTransformApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.transform_id == null && params.transformId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: transform_id or transformId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, transformId, transform_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_transform' + '/' + encodeURIComponent(transform_id || transformId) + '/' + '_start'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nTransformApi.prototype.stopTransform = function transformStopTransformApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.transform_id == null && params.transformId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: transform_id or transformId')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, transformId, transform_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_transform' + '/' + encodeURIComponent(transform_id || transformId) + '/' + '_stop'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nTransformApi.prototype.updateTransform = function transformUpdateTransformApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.transform_id == null && params.transformId == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: transform_id or transformId')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, transformId, transform_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_transform' + '/' + encodeURIComponent(transform_id || transformId) + '/' + '_update'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nObject.defineProperties(TransformApi.prototype, {\r\n  delete_transform: { get () { return this.deleteTransform } },\r\n  get_transform: { get () { return this.getTransform } },\r\n  get_transform_stats: { get () { return this.getTransformStats } },\r\n  preview_transform: { get () { return this.previewTransform } },\r\n  put_transform: { get () { return this.putTransform } },\r\n  start_transform: { get () { return this.startTransform } },\r\n  stop_transform: { get () { return this.stopTransform } },\r\n  update_transform: { get () { return this.updateTransform } }\r\n})\r\n\r\nmodule.exports = TransformApi\r\n"]},"metadata":{},"sourceType":"module"}