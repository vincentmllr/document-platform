{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path', 'ignore_unavailable', 'allow_no_indices', 'expand_wildcards', 'index', 'master_timeout', 'wait_for_completion', 'storage', 'level'];\nconst snakeCase = {\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n  ignoreUnavailable: 'ignore_unavailable',\n  allowNoIndices: 'allow_no_indices',\n  expandWildcards: 'expand_wildcards',\n  masterTimeout: 'master_timeout',\n  waitForCompletion: 'wait_for_completion'\n};\n\nfunction SearchableSnapshotsApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n_c = SearchableSnapshotsApi;\n\nSearchableSnapshotsApi.prototype.cacheStats = function searchableSnapshotsCacheStatsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    nodeId,\n    node_id,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if ((node_id || nodeId) != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_searchable_snapshots' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'cache' + '/' + 'stats';\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_searchable_snapshots' + '/' + 'cache' + '/' + 'stats';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSearchableSnapshotsApi.prototype.clearCache = function searchableSnapshotsClearCacheApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null) {\n    if (method == null) method = 'POST';\n    path = '/' + encodeURIComponent(index) + '/' + '_searchable_snapshots' + '/' + 'cache' + '/' + 'clear';\n  } else {\n    if (method == null) method = 'POST';\n    path = '/' + '_searchable_snapshots' + '/' + 'cache' + '/' + 'clear';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSearchableSnapshotsApi.prototype.mount = function searchableSnapshotsMountApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n\n  if (params.snapshot == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if (params.snapshot != null && params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    repository,\n    snapshot,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot) + '/' + '_mount'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSearchableSnapshotsApi.prototype.repositoryStats = function searchableSnapshotsRepositoryStatsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    repository,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + '_stats'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSearchableSnapshotsApi.prototype.stats = function searchableSnapshotsStatsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (index != null) {\n    if (method == null) method = 'GET';\n    path = '/' + encodeURIComponent(index) + '/' + '_searchable_snapshots' + '/' + 'stats';\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_searchable_snapshots' + '/' + 'stats';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nObject.defineProperties(SearchableSnapshotsApi.prototype, {\n  cache_stats: {\n    get() {\n      return this.cacheStats;\n    }\n\n  },\n  clear_cache: {\n    get() {\n      return this.clearCache;\n    }\n\n  },\n  repository_stats: {\n    get() {\n      return this.repositoryStats;\n    }\n\n  }\n});\nmodule.exports = SearchableSnapshotsApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"SearchableSnapshotsApi\");","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/searchable_snapshots.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","errorTrace","filterPath","ignoreUnavailable","allowNoIndices","expandWildcards","masterTimeout","waitForCompletion","SearchableSnapshotsApi","transport","ConfigurationError","prototype","cacheStats","searchableSnapshotsCacheStatsApi","params","options","callback","method","body","nodeId","node_id","querystring","path","encodeURIComponent","request","clearCache","searchableSnapshotsClearCacheApi","index","mount","searchableSnapshotsMountApi","repository","err","snapshot","repositoryStats","searchableSnapshotsRepositoryStatsApi","stats","searchableSnapshotsStatsApi","Object","defineProperties","cache_stats","get","clear_cache","repository_stats","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path', 'ignore_unavailable', 'allow_no_indices', 'expand_wildcards', 'index', 'master_timeout', 'wait_for_completion', 'storage', 'level']\r\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path', ignoreUnavailable: 'ignore_unavailable', allowNoIndices: 'allow_no_indices', expandWildcards: 'expand_wildcards', masterTimeout: 'master_timeout', waitForCompletion: 'wait_for_completion' }\r\n\r\nfunction SearchableSnapshotsApi (transport, ConfigurationError) {\r\n  this.transport = transport\r\n  this[kConfigurationError] = ConfigurationError\r\n}\r\n\r\nSearchableSnapshotsApi.prototype.cacheStats = function searchableSnapshotsCacheStatsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, nodeId, node_id, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((node_id || nodeId) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_searchable_snapshots' + '/' + encodeURIComponent(node_id || nodeId) + '/' + 'cache' + '/' + 'stats'\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_searchable_snapshots' + '/' + 'cache' + '/' + 'stats'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSearchableSnapshotsApi.prototype.clearCache = function searchableSnapshotsClearCacheApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null) {\r\n    if (method == null) method = 'POST'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_searchable_snapshots' + '/' + 'cache' + '/' + 'clear'\r\n  } else {\r\n    if (method == null) method = 'POST'\r\n    path = '/' + '_searchable_snapshots' + '/' + 'cache' + '/' + 'clear'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSearchableSnapshotsApi.prototype.mount = function searchableSnapshotsMountApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.repository == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: repository')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.snapshot == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if (params.snapshot != null && (params.repository == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, repository, snapshot, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot) + '/' + '_mount'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSearchableSnapshotsApi.prototype.repositoryStats = function searchableSnapshotsRepositoryStatsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.repository == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: repository')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, repository, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + '_stats'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSearchableSnapshotsApi.prototype.stats = function searchableSnapshotsStatsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((index) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + encodeURIComponent(index) + '/' + '_searchable_snapshots' + '/' + 'stats'\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_searchable_snapshots' + '/' + 'stats'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nObject.defineProperties(SearchableSnapshotsApi.prototype, {\r\n  cache_stats: { get () { return this.cacheStats } },\r\n  clear_cache: { get () { return this.clearCache } },\r\n  repository_stats: { get () { return this.repositoryStats } }\r\n})\r\n\r\nmodule.exports = SearchableSnapshotsApi\r\n"]},"metadata":{},"sourceType":"module"}