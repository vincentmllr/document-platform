{"ast":null,"code":"/*\n* @Author: shubhambansal\n* @Date:   2018-10-27 06:30:04\n* @Last Modified by:   shubhambansal\n* @Last Modified time: 2018-10-27 06:59:59\n*/\n(function (escope) {\n  \"use strict\";\n\n  function validUrl(url) {\n    return /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/gi.test(url);\n  }\n\n  function validTypePdf(pdf) {\n    return /(\\.(pdf))/gi.test(pdf);\n  }\n\n  function base64ToBrowser(buffer) {\n    return window.btoa([].slice.call(new Uint8Array(buffer)).map(function (bin) {\n      return String.fromCharCode(bin);\n    }).join(\"\"));\n  }\n\n  function base64ToNode(buffer) {\n    return buffer.toString(\"base64\");\n  }\n\n  function readFileAndConvert(fileName) {\n    var fileSystem = require(\"fs\");\n\n    var path = require(\"path\");\n\n    if (fileSystem.statSync(fileName).isFile()) {\n      return base64ToNode(fileSystem.readFileSync(path.resolve(fileName)).toString(\"base64\"));\n    }\n\n    return null;\n  }\n\n  function isPdf(urlOrPdf) {\n    if (validTypePdf(urlOrPdf)) {\n      return Promise.resolve(readFileAndConvert(urlOrPdf));\n    } else {\n      return Promise.reject(\"[*] Occurent some error... [validTypePdf] == false\");\n    }\n  }\n\n  function isBrowser(urlOrPdf, param) {\n    if (!(\"fetch\" in window && \"Promise\" in window)) {\n      return Promise.reject(\"[*] It's pdf2base64 not compatible with your browser.\");\n    }\n\n    return fetch(urlOrPdf, param || {}).then(function (response) {\n      return response.arrayBuffer();\n    }).then(base64ToBrowser);\n  }\n\n  function isNodeJs(urlOrPdf) {\n    if (validUrl(urlOrPdf)) {\n      var fetch = require(\"node-fetch\");\n\n      return fetch(urlOrPdf).then(function (response) {\n        return response.buffer();\n      }).then(base64ToNode);\n    } else {\n      return isPdf(urlOrPdf);\n    }\n  }\n\n  function pdfToBase64(urlOrPdf, param) {\n    if (typeof window !== \"undefined\" && \"document\" in window && \"navigator\" in window) {\n      return isBrowser(urlOrPdf, param);\n    } else {\n      return isNodeJs(urlOrPdf);\n    }\n  }\n\n  if (typeof module !== \"undefined\") {\n    module.exports = pdfToBase64;\n  } else {\n    escope.pdfToBase64 = pdfToBase64;\n  }\n})(this);","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/pdf-to-base64/pdf-to-base64.js"],"names":["escope","validUrl","url","test","validTypePdf","pdf","base64ToBrowser","buffer","window","btoa","slice","call","Uint8Array","map","bin","String","fromCharCode","join","base64ToNode","toString","readFileAndConvert","fileName","fileSystem","require","path","statSync","isFile","readFileSync","resolve","isPdf","urlOrPdf","Promise","reject","isBrowser","param","fetch","then","response","arrayBuffer","isNodeJs","pdfToBase64","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC,UAASA,MAAT,EAAgB;AACb;;AAEA,WAASC,QAAT,CAAmBC,GAAnB,EAAwB;AACpB,WAAO,kFAAkFC,IAAlF,CAAuFD,GAAvF,CAAP;AACH;;AAED,WAASE,YAAT,CAAuBC,GAAvB,EAA4B;AACxB,WAAO,cAAcF,IAAd,CAAmBE,GAAnB,CAAP;AACH;;AAED,WAASC,eAAT,CAA0BC,MAA1B,EAAkC;AAC9B,WAAOC,MAAM,CAACC,IAAP,CAAY,GAAGC,KAAH,CAASC,IAAT,CAAc,IAAIC,UAAJ,CAAeL,MAAf,CAAd,EAAsCM,GAAtC,CAA0C,UAASC,GAAT,EAAc;AAAE,aAAOC,MAAM,CAACC,YAAP,CAAoBF,GAApB,CAAP;AAAiC,KAA3F,EAA6FG,IAA7F,CAAkG,EAAlG,CAAZ,CAAP;AACH;;AAED,WAASC,YAAT,CAAuBX,MAAvB,EAA+B;AAC3B,WAAOA,MAAM,CAACY,QAAP,CAAgB,QAAhB,CAAP;AACH;;AAED,WAASC,kBAAT,CAA6BC,QAA7B,EAAuC;AACnC,QAAIC,UAAU,GAAGC,OAAO,CAAC,IAAD,CAAxB;;AACA,QAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AAEA,QAAID,UAAU,CAACG,QAAX,CAAoBJ,QAApB,EAA8BK,MAA9B,EAAJ,EAA4C;AACxC,aAAOR,YAAY,CAACI,UAAU,CAACK,YAAX,CAAwBH,IAAI,CAACI,OAAL,CAAaP,QAAb,CAAxB,EAAgDF,QAAhD,CAAyD,QAAzD,CAAD,CAAnB;AACH;;AACD,WAAO,IAAP;AACH;;AAED,WAASU,KAAT,CAAgBC,QAAhB,EAA0B;AACtB,QAAI1B,YAAY,CAAC0B,QAAD,CAAhB,EAA4B;AACxB,aAAOC,OAAO,CAACH,OAAR,CAAgBR,kBAAkB,CAACU,QAAD,CAAlC,CAAP;AACH,KAFD,MAEO;AACH,aAAOC,OAAO,CAACC,MAAR,CAAe,oDAAf,CAAP;AACH;AACJ;;AAED,WAASC,SAAT,CAAoBH,QAApB,EAA8BI,KAA9B,EAAqC;AACjC,QAAI,EAAE,WAAW1B,MAAX,IAAqB,aAAaA,MAApC,CAAJ,EAAiD;AAC7C,aAAOuB,OAAO,CAACC,MAAR,CAAe,uDAAf,CAAP;AACH;;AACD,WAAOG,KAAK,CAACL,QAAD,EAAWI,KAAK,IAAI,EAApB,CAAL,CAA6BE,IAA7B,CAAkC,UAASC,QAAT,EAAkB;AACvD,aAAOA,QAAQ,CAACC,WAAT,EAAP;AACH,KAFM,EAEJF,IAFI,CAEC9B,eAFD,CAAP;AAGH;;AAED,WAASiC,QAAT,CAAmBT,QAAnB,EAA6B;AACzB,QAAI7B,QAAQ,CAAC6B,QAAD,CAAZ,EAAwB;AACpB,UAAIK,KAAK,GAAGZ,OAAO,CAAC,YAAD,CAAnB;;AACA,aAAOY,KAAK,CAACL,QAAD,CAAL,CAAgBM,IAAhB,CAAqB,UAASC,QAAT,EAAkB;AAC1C,eAAOA,QAAQ,CAAC9B,MAAT,EAAP;AACH,OAFM,EAEJ6B,IAFI,CAEClB,YAFD,CAAP;AAGH,KALD,MAKO;AACH,aAAOW,KAAK,CAACC,QAAD,CAAZ;AACH;AACJ;;AAED,WAASU,WAAT,CAAqBV,QAArB,EAA+BI,KAA/B,EAAsC;AAClC,QAAI,OAAO1B,MAAP,KAAkB,WAAlB,IAAkC,cAAcA,MAAd,IAAwB,eAAeA,MAA7E,EAAsF;AAClF,aAAOyB,SAAS,CAACH,QAAD,EAAWI,KAAX,CAAhB;AACH,KAFD,MAEO;AACH,aAAOK,QAAQ,CAACT,QAAD,CAAf;AACH;AACJ;;AAED,MAAI,OAAOW,MAAP,KAAkB,WAAtB,EAAmC;AAC/BA,IAAAA,MAAM,CAACC,OAAP,GAAiBF,WAAjB;AACH,GAFD,MAEO;AACHxC,IAAAA,MAAM,CAACwC,WAAP,GAAqBA,WAArB;AACH;AAEJ,CAvED,EAuEG,IAvEH","sourcesContent":["/*\n* @Author: shubhambansal\n* @Date:   2018-10-27 06:30:04\n* @Last Modified by:   shubhambansal\n* @Last Modified time: 2018-10-27 06:59:59\n*/\n(function(escope){\n    \"use strict\";\n\n    function validUrl (url) {\n        return /(http|https):\\/\\/(\\w+:{0,1}\\w*@)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%@!\\-\\/]))?/gi.test(url);\n    }\n\n    function validTypePdf (pdf) {\n        return /(\\.(pdf))/gi.test(pdf);\n    }\n\n    function base64ToBrowser (buffer) {\n        return window.btoa([].slice.call(new Uint8Array(buffer)).map(function(bin) { return String.fromCharCode(bin) }).join(\"\"));\n    }\n\n    function base64ToNode (buffer) {\n        return buffer.toString(\"base64\");\n    }\n\n    function readFileAndConvert (fileName) {\n        var fileSystem = require(\"fs\");\n        var path = require(\"path\");\n\n        if (fileSystem.statSync(fileName).isFile()) {\n            return base64ToNode(fileSystem.readFileSync(path.resolve(fileName)).toString(\"base64\"));\n        }\n        return null;\n    }\n\n    function isPdf (urlOrPdf) {\n        if (validTypePdf(urlOrPdf)) {\n            return Promise.resolve(readFileAndConvert(urlOrPdf));\n        } else {\n            return Promise.reject(\"[*] Occurent some error... [validTypePdf] == false\");\n        }\n    }\n\n    function isBrowser (urlOrPdf, param) {\n        if (!(\"fetch\" in window && \"Promise\" in window)) {\n            return Promise.reject(\"[*] It's pdf2base64 not compatible with your browser.\");\n        }\n        return fetch(urlOrPdf, param || {}).then(function(response){\n            return response.arrayBuffer();\n        }).then(base64ToBrowser);\n    }\n\n    function isNodeJs (urlOrPdf) {\n        if (validUrl(urlOrPdf)) {\n            var fetch = require(\"node-fetch\");\n            return fetch(urlOrPdf).then(function(response){\n                return response.buffer();\n            }).then(base64ToNode);\n        } else {\n            return isPdf(urlOrPdf);\n        }\n    }\n\n    function pdfToBase64(urlOrPdf, param) {\n        if (typeof window !== \"undefined\" && (\"document\" in window && \"navigator\" in window)) {\n            return isBrowser(urlOrPdf, param);\n        } else {\n            return isNodeJs(urlOrPdf);\n        }\n    }\n\n    if (typeof module !== \"undefined\") {\n        module.exports = pdfToBase64;\n    } else {\n        escope.pdfToBase64 = pdfToBase64;\n    }\n\n})(this);\n"]},"metadata":{},"sourceType":"module"}