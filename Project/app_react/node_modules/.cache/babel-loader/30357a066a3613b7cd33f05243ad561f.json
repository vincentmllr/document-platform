{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['master_timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  masterTimeout: 'master_timeout',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\nfunction FeaturesApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n_c = FeaturesApi;\n\nFeaturesApi.prototype.getFeatures = function featuresGetFeaturesApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_features'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nFeaturesApi.prototype.resetFeatures = function featuresResetFeaturesApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_features' + '/' + '_reset'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nObject.defineProperties(FeaturesApi.prototype, {\n  get_features: {\n    get() {\n      return this.getFeatures;\n    }\n\n  },\n  reset_features: {\n    get() {\n      return this.resetFeatures;\n    }\n\n  }\n});\nmodule.exports = FeaturesApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"FeaturesApi\");","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/features.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","masterTimeout","errorTrace","filterPath","FeaturesApi","transport","ConfigurationError","prototype","getFeatures","featuresGetFeaturesApi","params","options","callback","method","body","querystring","path","request","resetFeatures","featuresResetFeaturesApi","Object","defineProperties","get_features","get","reset_features","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['master_timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\r\nconst snakeCase = { masterTimeout: 'master_timeout', errorTrace: 'error_trace', filterPath: 'filter_path' }\r\n\r\nfunction FeaturesApi (transport, ConfigurationError) {\r\n  this.transport = transport\r\n  this[kConfigurationError] = ConfigurationError\r\n}\r\n\r\nFeaturesApi.prototype.getFeatures = function featuresGetFeaturesApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_features'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nFeaturesApi.prototype.resetFeatures = function featuresResetFeaturesApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_features' + '/' + '_reset'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nObject.defineProperties(FeaturesApi.prototype, {\r\n  get_features: { get () { return this.getFeatures } },\r\n  reset_features: { get () { return this.resetFeatures } }\r\n})\r\n\r\nmodule.exports = FeaturesApi\r\n"]},"metadata":{},"sourceType":"module"}