{"ast":null,"code":"'use strict';\n\nconst https = require('https');\n\nconst http = require('http');\n\nconst {\n  URL\n} = require('url');\n\nclass HttpProxyAgent extends http.Agent {\n  constructor(options) {\n    const {\n      proxy,\n      ...opts\n    } = options;\n    super(opts);\n    this.proxy = typeof proxy === 'string' ? new URL(proxy) : proxy;\n  }\n\n  createConnection(options, callback) {\n    const requestOptions = {\n      method: 'CONNECT',\n      host: this.proxy.hostname,\n      port: this.proxy.port,\n      path: `${options.host}:${options.port}`,\n      setHost: false,\n      headers: {\n        connection: this.keepAlive ? 'keep-alive' : 'close',\n        host: `${options.host}:${options.port}`\n      },\n      agent: false\n    };\n\n    if (this.proxy.username || this.proxy.password) {\n      const base64 = Buffer.from(`${this.proxy.username || ''}:${this.proxy.password || ''}`).toString('base64');\n      requestOptions.headers['proxy-authorization'] = `Basic ${base64}`;\n    }\n\n    const request = (this.proxy.protocol === 'http:' ? http : https).request(requestOptions);\n    request.once('connect', (response, socket, head) => {\n      request.removeAllListeners();\n      socket.removeAllListeners();\n\n      if (response.statusCode === 200) {\n        callback(null, socket);\n      } else {\n        callback(new Error(`Bad response: ${response.statusCode}`), null);\n      }\n    });\n    request.once('error', err => {\n      request.removeAllListeners();\n      callback(err, null);\n    });\n    request.end();\n  }\n\n}\n\nclass HttpsProxyAgent extends https.Agent {\n  constructor(options) {\n    const {\n      proxy,\n      ...opts\n    } = options;\n    super(opts);\n    this.proxy = typeof proxy === 'string' ? new URL(proxy) : proxy;\n  }\n\n  createConnection(options, callback) {\n    const requestOptions = {\n      method: 'CONNECT',\n      host: this.proxy.hostname,\n      port: this.proxy.port,\n      path: `${options.host}:${options.port}`,\n      setHost: false,\n      headers: {\n        connection: this.keepAlive ? 'keep-alive' : 'close',\n        host: `${options.host}:${options.port}`\n      },\n      agent: false\n    };\n\n    if (this.proxy.username || this.proxy.password) {\n      const base64 = Buffer.from(`${this.proxy.username || ''}:${this.proxy.password || ''}`).toString('base64');\n      requestOptions.headers['proxy-authorization'] = `Basic ${base64}`;\n    }\n\n    const request = (this.proxy.protocol === 'http:' ? http : https).request(requestOptions);\n    request.once('connect', (response, socket, head) => {\n      request.removeAllListeners();\n      socket.removeAllListeners();\n\n      if (response.statusCode === 200) {\n        const secureSocket = super.createConnection({ ...options,\n          socket\n        });\n        callback(null, secureSocket);\n      } else {\n        callback(new Error(`Bad response: ${response.statusCode}`), null);\n      }\n    });\n    request.once('error', err => {\n      request.removeAllListeners();\n      callback(err, null);\n    });\n    request.end();\n  }\n\n}\n\nmodule.exports = {\n  HttpProxyAgent,\n  HttpsProxyAgent\n};","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/node_modules/hpagent/index.js"],"names":["https","require","http","URL","HttpProxyAgent","Agent","constructor","options","proxy","opts","createConnection","callback","requestOptions","method","host","hostname","port","path","setHost","headers","connection","keepAlive","agent","username","password","base64","Buffer","from","toString","request","protocol","once","response","socket","head","removeAllListeners","statusCode","Error","err","end","HttpsProxyAgent","secureSocket","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\nconst https = require('https')\nconst http = require('http')\nconst { URL } = require('url')\n\nclass HttpProxyAgent extends http.Agent {\n  constructor (options) {\n    const { proxy, ...opts } = options\n    super(opts)\n    this.proxy = typeof proxy === 'string'\n      ? new URL(proxy)\n      : proxy\n  }\n\n  createConnection (options, callback) {\n    const requestOptions = {\n      method: 'CONNECT',\n      host: this.proxy.hostname,\n      port: this.proxy.port,\n      path: `${options.host}:${options.port}`,\n      setHost: false,\n      headers: { connection: this.keepAlive ? 'keep-alive' : 'close', host: `${options.host}:${options.port}` },\n      agent: false\n    }\n\n    if (this.proxy.username || this.proxy.password) {\n      const base64 = Buffer.from(`${this.proxy.username || ''}:${this.proxy.password || ''}`).toString('base64')\n      requestOptions.headers['proxy-authorization'] = `Basic ${base64}`\n    }\n\n    const request = (this.proxy.protocol === 'http:' ? http : https).request(requestOptions)\n    request.once('connect', (response, socket, head) => {\n      request.removeAllListeners()\n      socket.removeAllListeners()\n      if (response.statusCode === 200) {\n        callback(null, socket)\n      } else {\n        callback(new Error(`Bad response: ${response.statusCode}`), null)\n      }\n    })\n\n    request.once('error', err => {\n      request.removeAllListeners()\n      callback(err, null)\n    })\n\n    request.end()\n  }\n}\n\nclass HttpsProxyAgent extends https.Agent {\n  constructor (options) {\n    const { proxy, ...opts } = options\n    super(opts)\n    this.proxy = typeof proxy === 'string'\n      ? new URL(proxy)\n      : proxy\n  }\n\n  createConnection (options, callback) {\n    const requestOptions = {\n      method: 'CONNECT',\n      host: this.proxy.hostname,\n      port: this.proxy.port,\n      path: `${options.host}:${options.port}`,\n      setHost: false,\n      headers: { connection: this.keepAlive ? 'keep-alive' : 'close', host: `${options.host}:${options.port}` },\n      agent: false\n    }\n\n    if (this.proxy.username || this.proxy.password) {\n      const base64 = Buffer.from(`${this.proxy.username || ''}:${this.proxy.password || ''}`).toString('base64')\n      requestOptions.headers['proxy-authorization'] = `Basic ${base64}`\n    }\n\n    const request = (this.proxy.protocol === 'http:' ? http : https).request(requestOptions)\n    request.once('connect', (response, socket, head) => {\n      request.removeAllListeners()\n      socket.removeAllListeners()\n      if (response.statusCode === 200) {\n        const secureSocket = super.createConnection({ ...options, socket })\n        callback(null, secureSocket)\n      } else {\n        callback(new Error(`Bad response: ${response.statusCode}`), null)\n      }\n    })\n\n    request.once('error', err => {\n      request.removeAllListeners()\n      callback(err, null)\n    })\n\n    request.end()\n  }\n}\n\nmodule.exports = {\n  HttpProxyAgent,\n  HttpsProxyAgent\n}\n"]},"metadata":{},"sourceType":"module"}