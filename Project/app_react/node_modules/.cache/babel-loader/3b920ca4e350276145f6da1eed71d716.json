{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n\nconst {\n  stringify\n} = require('querystring');\n\nconst debug = require('debug')('elasticsearch');\n\nconst sjson = require('secure-json-parse');\n\nconst {\n  SerializationError,\n  DeserializationError\n} = require('./errors');\n\nconst kJsonOptions = Symbol('secure json parse options');\n\nclass Serializer {\n  constructor(opts = {}) {\n    const disable = opts.disablePrototypePoisoningProtection;\n    this[kJsonOptions] = {\n      protoAction: disable === true || disable === 'proto' ? 'ignore' : 'error',\n      constructorAction: disable === true || disable === 'constructor' ? 'ignore' : 'error'\n    };\n  }\n\n  serialize(object) {\n    debug('Serializing', object);\n    let json;\n\n    try {\n      json = JSON.stringify(object);\n    } catch (err) {\n      throw new SerializationError(err.message, object);\n    }\n\n    return json;\n  }\n\n  deserialize(json) {\n    debug('Deserializing', json);\n    let object;\n\n    try {\n      object = sjson.parse(json, this[kJsonOptions]);\n    } catch (err) {\n      throw new DeserializationError(err.message, json);\n    }\n\n    return object;\n  }\n\n  ndserialize(array) {\n    debug('ndserialize', array);\n\n    if (Array.isArray(array) === false) {\n      throw new SerializationError('The argument provided is not an array');\n    }\n\n    let ndjson = '';\n\n    for (let i = 0, len = array.length; i < len; i++) {\n      if (typeof array[i] === 'string') {\n        ndjson += array[i] + '\\n';\n      } else {\n        ndjson += this.serialize(array[i]) + '\\n';\n      }\n    }\n\n    return ndjson;\n  }\n\n  qserialize(object) {\n    debug('qserialize', object);\n    if (object == null) return '';\n    if (typeof object === 'string') return object; // arrays should be serialized as comma separated list\n\n    const keys = Object.keys(object);\n\n    for (let i = 0, len = keys.length; i < len; i++) {\n      const key = keys[i]; // elasticsearch will complain for keys without a value\n\n      if (object[key] === undefined) {\n        delete object[key];\n      } else if (Array.isArray(object[key]) === true) {\n        object[key] = object[key].join(',');\n      }\n    }\n\n    return stringify(object);\n  }\n\n}\n\nmodule.exports = Serializer;","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/lib/Serializer.js"],"names":["stringify","require","debug","sjson","SerializationError","DeserializationError","kJsonOptions","Symbol","Serializer","constructor","opts","disable","disablePrototypePoisoningProtection","protoAction","constructorAction","serialize","object","json","JSON","err","message","deserialize","parse","ndserialize","array","Array","isArray","ndjson","i","len","length","qserialize","keys","Object","key","undefined","join","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\nconst { stringify } = require('querystring')\r\nconst debug = require('debug')('elasticsearch')\r\nconst sjson = require('secure-json-parse')\r\nconst { SerializationError, DeserializationError } = require('./errors')\r\nconst kJsonOptions = Symbol('secure json parse options')\r\n\r\nclass Serializer {\r\n  constructor (opts = {}) {\r\n    const disable = opts.disablePrototypePoisoningProtection\r\n    this[kJsonOptions] = {\r\n      protoAction: disable === true || disable === 'proto' ? 'ignore' : 'error',\r\n      constructorAction: disable === true || disable === 'constructor' ? 'ignore' : 'error'\r\n    }\r\n  }\r\n\r\n  serialize (object) {\r\n    debug('Serializing', object)\r\n    let json\r\n    try {\r\n      json = JSON.stringify(object)\r\n    } catch (err) {\r\n      throw new SerializationError(err.message, object)\r\n    }\r\n    return json\r\n  }\r\n\r\n  deserialize (json) {\r\n    debug('Deserializing', json)\r\n    let object\r\n    try {\r\n      object = sjson.parse(json, this[kJsonOptions])\r\n    } catch (err) {\r\n      throw new DeserializationError(err.message, json)\r\n    }\r\n    return object\r\n  }\r\n\r\n  ndserialize (array) {\r\n    debug('ndserialize', array)\r\n    if (Array.isArray(array) === false) {\r\n      throw new SerializationError('The argument provided is not an array')\r\n    }\r\n    let ndjson = ''\r\n    for (let i = 0, len = array.length; i < len; i++) {\r\n      if (typeof array[i] === 'string') {\r\n        ndjson += array[i] + '\\n'\r\n      } else {\r\n        ndjson += this.serialize(array[i]) + '\\n'\r\n      }\r\n    }\r\n    return ndjson\r\n  }\r\n\r\n  qserialize (object) {\r\n    debug('qserialize', object)\r\n    if (object == null) return ''\r\n    if (typeof object === 'string') return object\r\n    // arrays should be serialized as comma separated list\r\n    const keys = Object.keys(object)\r\n    for (let i = 0, len = keys.length; i < len; i++) {\r\n      const key = keys[i]\r\n      // elasticsearch will complain for keys without a value\r\n      if (object[key] === undefined) {\r\n        delete object[key]\r\n      } else if (Array.isArray(object[key]) === true) {\r\n        object[key] = object[key].join(',')\r\n      }\r\n    }\r\n    return stringify(object)\r\n  }\r\n}\r\n\r\nmodule.exports = Serializer\r\n"]},"metadata":{},"sourceType":"module"}