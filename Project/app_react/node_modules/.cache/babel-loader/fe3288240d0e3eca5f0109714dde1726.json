{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['wait_for_advance', 'wait_for_index', 'checkpoints', 'timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path'];\nconst snakeCase = {\n  waitForAdvance: 'wait_for_advance',\n  waitForIndex: 'wait_for_index',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path'\n};\n\nfunction FleetApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n_c = FleetApi;\n\nFleetApi.prototype.globalCheckpoints = function fleetGlobalCheckpointsApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + encodeURIComponent(index) + '/' + '_fleet' + '/' + 'global_checkpoints'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nObject.defineProperties(FleetApi.prototype, {\n  global_checkpoints: {\n    get() {\n      return this.globalCheckpoints;\n    }\n\n  }\n});\nmodule.exports = FleetApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"FleetApi\");","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/fleet.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","waitForAdvance","waitForIndex","errorTrace","filterPath","FleetApi","transport","ConfigurationError","prototype","globalCheckpoints","fleetGlobalCheckpointsApi","params","options","callback","index","err","method","body","querystring","path","encodeURIComponent","request","Object","defineProperties","global_checkpoints","get","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;;AACA;;AAEA,MAAM;AAAEA,EAAAA,WAAF;AAAeC,EAAAA,aAAf;AAA8BC,EAAAA,kBAA9B;AAAkDC,EAAAA;AAAlD,IAA0EC,OAAO,CAAC,UAAD,CAAvF;;AACA,MAAMC,mBAAmB,GAAG,CAAC,kBAAD,EAAqB,gBAArB,EAAuC,aAAvC,EAAsD,SAAtD,EAAiE,QAAjE,EAA2E,OAA3E,EAAoF,aAApF,EAAmG,QAAnG,EAA6G,aAA7G,CAA5B;AACA,MAAMC,SAAS,GAAG;AAAEC,EAAAA,cAAc,EAAE,kBAAlB;AAAsCC,EAAAA,YAAY,EAAE,gBAApD;AAAsEC,EAAAA,UAAU,EAAE,aAAlF;AAAiGC,EAAAA,UAAU,EAAE;AAA7G,CAAlB;;AAEA,SAASC,QAAT,CAAmBC,SAAnB,EAA8BC,kBAA9B,EAAkD;AAChD,OAAKD,SAAL,GAAiBA,SAAjB;AACA,OAAKT,mBAAL,IAA4BU,kBAA5B;AACD;;KAHQF,Q;;AAKTA,QAAQ,CAACG,SAAT,CAAmBC,iBAAnB,GAAuC,SAASC,yBAAT,CAAoCC,MAApC,EAA4CC,OAA5C,EAAqDC,QAArD,EAA+D;AACpG;AAAC,GAACF,MAAD,EAASC,OAAT,EAAkBC,QAAlB,IAA8BjB,kBAAkB,CAACe,MAAD,EAASC,OAAT,EAAkBC,QAAlB,CAAhD,CADmG,CAGpG;;AACA,MAAIF,MAAM,CAACG,KAAP,IAAgB,IAApB,EAA0B;AACxB,UAAMC,GAAG,GAAG,IAAI,KAAKlB,mBAAL,CAAJ,CAA8B,mCAA9B,CAAZ;AACA,WAAOH,WAAW,CAACqB,GAAD,EAAMF,QAAN,CAAlB;AACD;;AAED,MAAI;AAAEG,IAAAA,MAAF;AAAUC,IAAAA,IAAV;AAAgBH,IAAAA,KAAhB;AAAuB,OAAGI;AAA1B,MAA0CP,MAA9C;AACAO,EAAAA,WAAW,GAAGvB,aAAa,CAACI,mBAAD,EAAsBC,SAAtB,EAAiCkB,WAAjC,CAA3B;AAEA,MAAIC,IAAI,GAAG,EAAX;AACA,MAAIH,MAAM,IAAI,IAAd,EAAoBA,MAAM,GAAG,KAAT;AACpBG,EAAAA,IAAI,GAAG,MAAMC,kBAAkB,CAACN,KAAD,CAAxB,GAAkC,GAAlC,GAAwC,QAAxC,GAAmD,GAAnD,GAAyD,oBAAhE,CAdoG,CAgBpG;;AACA,QAAMO,OAAO,GAAG;AACdL,IAAAA,MADc;AAEdG,IAAAA,IAFc;AAGdF,IAAAA,IAAI,EAAE,IAHQ;AAIdC,IAAAA;AAJc,GAAhB;AAOA,SAAO,KAAKZ,SAAL,CAAee,OAAf,CAAuBA,OAAvB,EAAgCT,OAAhC,EAAyCC,QAAzC,CAAP;AACD,CAzBD;;AA2BAS,MAAM,CAACC,gBAAP,CAAwBlB,QAAQ,CAACG,SAAjC,EAA4C;AAC1CgB,EAAAA,kBAAkB,EAAE;AAAEC,IAAAA,GAAG,GAAI;AAAE,aAAO,KAAKhB,iBAAZ;AAA+B;;AAA1C;AADsB,CAA5C;AAIAiB,MAAM,CAACC,OAAP,GAAiBtB,QAAjB","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['wait_for_advance', 'wait_for_index', 'checkpoints', 'timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path']\r\nconst snakeCase = { waitForAdvance: 'wait_for_advance', waitForIndex: 'wait_for_index', errorTrace: 'error_trace', filterPath: 'filter_path' }\r\n\r\nfunction FleetApi (transport, ConfigurationError) {\r\n  this.transport = transport\r\n  this[kConfigurationError] = ConfigurationError\r\n}\r\n\r\nFleetApi.prototype.globalCheckpoints = function fleetGlobalCheckpointsApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + encodeURIComponent(index) + '/' + '_fleet' + '/' + 'global_checkpoints'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nObject.defineProperties(FleetApi.prototype, {\r\n  global_checkpoints: { get () { return this.globalCheckpoints } }\r\n})\r\n\r\nmodule.exports = FleetApi\r\n"]},"metadata":{},"sourceType":"module"}