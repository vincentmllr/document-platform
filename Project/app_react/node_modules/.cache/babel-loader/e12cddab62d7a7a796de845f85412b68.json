{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['master_timeout', 'timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'wait_for_completion', 'verify', 'ignore_unavailable', 'index_details', 'verbose', 'local'];\nconst snakeCase = {\n  masterTimeout: 'master_timeout',\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n  waitForCompletion: 'wait_for_completion',\n  ignoreUnavailable: 'ignore_unavailable',\n  indexDetails: 'index_details'\n};\n\nfunction SnapshotApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n_c = SnapshotApi;\n\nSnapshotApi.prototype.cleanupRepository = function snapshotCleanupRepositoryApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    repository,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + '_cleanup'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSnapshotApi.prototype.clone = function snapshotCloneApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n\n  if (params.snapshot == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot');\n    return handleError(err, callback);\n  }\n\n  if (params.target_snapshot == null && params.targetSnapshot == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: target_snapshot or targetSnapshot');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if ((params.target_snapshot != null || params.targetSnapshot != null) && (params.snapshot == null || params.repository == null)) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: snapshot, repository');\n    return handleError(err, callback);\n  } else if (params.snapshot != null && params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    repository,\n    snapshot,\n    targetSnapshot,\n    target_snapshot,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot) + '/' + '_clone' + '/' + encodeURIComponent(target_snapshot || targetSnapshot); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSnapshotApi.prototype.create = function snapshotCreateApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n\n  if (params.snapshot == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if (params.snapshot != null && params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    repository,\n    snapshot,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSnapshotApi.prototype.createRepository = function snapshotCreateRepositoryApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n\n  if (params.body == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: body');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    repository,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSnapshotApi.prototype.delete = function snapshotDeleteApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n\n  if (params.snapshot == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if (params.snapshot != null && params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    repository,\n    snapshot,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSnapshotApi.prototype.deleteRepository = function snapshotDeleteRepositoryApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    repository,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSnapshotApi.prototype.get = function snapshotGetApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n\n  if (params.snapshot == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if (params.snapshot != null && params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    repository,\n    snapshot,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot); // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSnapshotApi.prototype.getRepository = function snapshotGetRepositoryApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    repository,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (repository != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_snapshot' + '/' + encodeURIComponent(repository);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_snapshot';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSnapshotApi.prototype.restore = function snapshotRestoreApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n\n  if (params.snapshot == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot');\n    return handleError(err, callback);\n  } // check required url components\n\n\n  if (params.snapshot != null && params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    repository,\n    snapshot,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot) + '/' + '_restore'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSnapshotApi.prototype.status = function snapshotStatusApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required url components\n\n  if (params.snapshot != null && params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    repository,\n    snapshot,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (repository != null && snapshot != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot) + '/' + '_status';\n  } else if (repository != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + '_status';\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_snapshot' + '/' + '_status';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nSnapshotApi.prototype.verifyRepository = function snapshotVerifyRepositoryApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.repository == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: repository');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    repository,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + '_verify'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nObject.defineProperties(SnapshotApi.prototype, {\n  cleanup_repository: {\n    get() {\n      return this.cleanupRepository;\n    }\n\n  },\n  create_repository: {\n    get() {\n      return this.createRepository;\n    }\n\n  },\n  delete_repository: {\n    get() {\n      return this.deleteRepository;\n    }\n\n  },\n  get_repository: {\n    get() {\n      return this.getRepository;\n    }\n\n  },\n  verify_repository: {\n    get() {\n      return this.verifyRepository;\n    }\n\n  }\n});\nmodule.exports = SnapshotApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"SnapshotApi\");","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/snapshot.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","masterTimeout","errorTrace","filterPath","waitForCompletion","ignoreUnavailable","indexDetails","SnapshotApi","transport","ConfigurationError","prototype","cleanupRepository","snapshotCleanupRepositoryApi","params","options","callback","repository","err","method","body","querystring","path","encodeURIComponent","request","clone","snapshotCloneApi","snapshot","target_snapshot","targetSnapshot","create","snapshotCreateApi","createRepository","snapshotCreateRepositoryApi","delete","snapshotDeleteApi","deleteRepository","snapshotDeleteRepositoryApi","get","snapshotGetApi","getRepository","snapshotGetRepositoryApi","restore","snapshotRestoreApi","status","snapshotStatusApi","verifyRepository","snapshotVerifyRepositoryApi","Object","defineProperties","cleanup_repository","create_repository","delete_repository","get_repository","verify_repository","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['master_timeout', 'timeout', 'pretty', 'human', 'error_trace', 'source', 'filter_path', 'wait_for_completion', 'verify', 'ignore_unavailable', 'index_details', 'verbose', 'local']\r\nconst snakeCase = { masterTimeout: 'master_timeout', errorTrace: 'error_trace', filterPath: 'filter_path', waitForCompletion: 'wait_for_completion', ignoreUnavailable: 'ignore_unavailable', indexDetails: 'index_details' }\r\n\r\nfunction SnapshotApi (transport, ConfigurationError) {\r\n  this.transport = transport\r\n  this[kConfigurationError] = ConfigurationError\r\n}\r\n\r\nSnapshotApi.prototype.cleanupRepository = function snapshotCleanupRepositoryApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.repository == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: repository')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, repository, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + '_cleanup'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSnapshotApi.prototype.clone = function snapshotCloneApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.repository == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: repository')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.snapshot == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.target_snapshot == null && params.targetSnapshot == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: target_snapshot or targetSnapshot')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if ((params.target_snapshot != null || params.targetSnapshot != null) && (params.snapshot == null || params.repository == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: snapshot, repository')\r\n    return handleError(err, callback)\r\n  } else if (params.snapshot != null && (params.repository == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, repository, snapshot, targetSnapshot, target_snapshot, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot) + '/' + '_clone' + '/' + encodeURIComponent(target_snapshot || targetSnapshot)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSnapshotApi.prototype.create = function snapshotCreateApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.repository == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: repository')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.snapshot == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if (params.snapshot != null && (params.repository == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, repository, snapshot, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSnapshotApi.prototype.createRepository = function snapshotCreateRepositoryApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.repository == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: repository')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.body == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: body')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, repository, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSnapshotApi.prototype.delete = function snapshotDeleteApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.repository == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: repository')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.snapshot == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if (params.snapshot != null && (params.repository == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, repository, snapshot, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSnapshotApi.prototype.deleteRepository = function snapshotDeleteRepositoryApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.repository == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: repository')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, repository, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSnapshotApi.prototype.get = function snapshotGetApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.repository == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: repository')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.snapshot == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if (params.snapshot != null && (params.repository == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, repository, snapshot, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSnapshotApi.prototype.getRepository = function snapshotGetRepositoryApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, repository, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((repository) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_snapshot' + '/' + encodeURIComponent(repository)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_snapshot'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSnapshotApi.prototype.restore = function snapshotRestoreApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.repository == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: repository')\r\n    return handleError(err, callback)\r\n  }\r\n  if (params.snapshot == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: snapshot')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  // check required url components\r\n  if (params.snapshot != null && (params.repository == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, repository, snapshot, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot) + '/' + '_restore'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSnapshotApi.prototype.status = function snapshotStatusApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required url components\r\n  if (params.snapshot != null && (params.repository == null)) {\r\n    const err = new this[kConfigurationError]('Missing required parameter of the url: repository')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, repository, snapshot, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((repository) != null && (snapshot) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + encodeURIComponent(snapshot) + '/' + '_status'\r\n  } else if ((repository) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + '_status'\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_snapshot' + '/' + '_status'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nSnapshotApi.prototype.verifyRepository = function snapshotVerifyRepositoryApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.repository == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: repository')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, repository, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_snapshot' + '/' + encodeURIComponent(repository) + '/' + '_verify'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nObject.defineProperties(SnapshotApi.prototype, {\r\n  cleanup_repository: { get () { return this.cleanupRepository } },\r\n  create_repository: { get () { return this.createRepository } },\r\n  delete_repository: { get () { return this.deleteRepository } },\r\n  get_repository: { get () { return this.getRepository } },\r\n  verify_repository: { get () { return this.verifyRepository } }\r\n})\r\n\r\nmodule.exports = SnapshotApi\r\n"]},"metadata":{},"sourceType":"module"}