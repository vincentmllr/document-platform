{"ast":null,"code":"/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\n'use strict';\n/* eslint camelcase: 0 */\n\n/* eslint no-unused-vars: 0 */\n\nconst {\n  handleError,\n  snakeCaseKeys,\n  normalizeArguments,\n  kConfigurationError\n} = require('../utils');\n\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path', 'only_managed', 'only_errors'];\nconst snakeCase = {\n  errorTrace: 'error_trace',\n  filterPath: 'filter_path',\n  onlyManaged: 'only_managed',\n  onlyErrors: 'only_errors'\n};\n\nfunction IlmApi(transport, ConfigurationError) {\n  this.transport = transport;\n  this[kConfigurationError] = ConfigurationError;\n}\n\n_c = IlmApi;\n\nIlmApi.prototype.deleteLifecycle = function ilmDeleteLifecycleApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.policy == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: policy');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    policy,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'DELETE';\n  path = '/' + '_ilm' + '/' + 'policy' + '/' + encodeURIComponent(policy); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIlmApi.prototype.explainLifecycle = function ilmExplainLifecycleApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + encodeURIComponent(index) + '/' + '_ilm' + '/' + 'explain'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIlmApi.prototype.getLifecycle = function ilmGetLifecycleApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    policy,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n\n  if (policy != null) {\n    if (method == null) method = 'GET';\n    path = '/' + '_ilm' + '/' + 'policy' + '/' + encodeURIComponent(policy);\n  } else {\n    if (method == null) method = 'GET';\n    path = '/' + '_ilm' + '/' + 'policy';\n  } // build request object\n\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIlmApi.prototype.getStatus = function ilmGetStatusApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'GET';\n  path = '/' + '_ilm' + '/' + 'status'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: null,\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIlmApi.prototype.moveToStep = function ilmMoveToStepApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ilm' + '/' + 'move' + '/' + encodeURIComponent(index); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIlmApi.prototype.putLifecycle = function ilmPutLifecycleApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.policy == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: policy');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    policy,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'PUT';\n  path = '/' + '_ilm' + '/' + 'policy' + '/' + encodeURIComponent(policy); // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIlmApi.prototype.removePolicy = function ilmRemovePolicyApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + encodeURIComponent(index) + '/' + '_ilm' + '/' + 'remove'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIlmApi.prototype.retry = function ilmRetryApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback); // check required parameters\n\n  if (params.index == null) {\n    const err = new this[kConfigurationError]('Missing required parameter: index');\n    return handleError(err, callback);\n  }\n\n  let {\n    method,\n    body,\n    index,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + encodeURIComponent(index) + '/' + '_ilm' + '/' + 'retry'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIlmApi.prototype.start = function ilmStartApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ilm' + '/' + 'start'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nIlmApi.prototype.stop = function ilmStopApi(params, options, callback) {\n  ;\n  [params, options, callback] = normalizeArguments(params, options, callback);\n  let {\n    method,\n    body,\n    ...querystring\n  } = params;\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring);\n  let path = '';\n  if (method == null) method = 'POST';\n  path = '/' + '_ilm' + '/' + 'stop'; // build request object\n\n  const request = {\n    method,\n    path,\n    body: body || '',\n    querystring\n  };\n  return this.transport.request(request, options, callback);\n};\n\nObject.defineProperties(IlmApi.prototype, {\n  delete_lifecycle: {\n    get() {\n      return this.deleteLifecycle;\n    }\n\n  },\n  explain_lifecycle: {\n    get() {\n      return this.explainLifecycle;\n    }\n\n  },\n  get_lifecycle: {\n    get() {\n      return this.getLifecycle;\n    }\n\n  },\n  get_status: {\n    get() {\n      return this.getStatus;\n    }\n\n  },\n  move_to_step: {\n    get() {\n      return this.moveToStep;\n    }\n\n  },\n  put_lifecycle: {\n    get() {\n      return this.putLifecycle;\n    }\n\n  },\n  remove_policy: {\n    get() {\n      return this.removePolicy;\n    }\n\n  }\n});\nmodule.exports = IlmApi;\n\nvar _c;\n\n$RefreshReg$(_c, \"IlmApi\");","map":{"version":3,"sources":["C:/Users/vince/peer/project/app_react/src/node_modules/@elastic/elasticsearch/api/api/ilm.js"],"names":["handleError","snakeCaseKeys","normalizeArguments","kConfigurationError","require","acceptedQuerystring","snakeCase","errorTrace","filterPath","onlyManaged","onlyErrors","IlmApi","transport","ConfigurationError","prototype","deleteLifecycle","ilmDeleteLifecycleApi","params","options","callback","policy","err","method","body","querystring","path","encodeURIComponent","request","explainLifecycle","ilmExplainLifecycleApi","index","getLifecycle","ilmGetLifecycleApi","getStatus","ilmGetStatusApi","moveToStep","ilmMoveToStepApi","putLifecycle","ilmPutLifecycleApi","removePolicy","ilmRemovePolicyApi","retry","ilmRetryApi","start","ilmStartApi","stop","ilmStopApi","Object","defineProperties","delete_lifecycle","get","explain_lifecycle","get_lifecycle","get_status","move_to_step","put_lifecycle","remove_policy","module","exports"],"mappings":"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","sourcesContent":["/*\r\n * Licensed to Elasticsearch B.V. under one or more contributor\r\n * license agreements. See the NOTICE file distributed with\r\n * this work for additional information regarding copyright\r\n * ownership. Elasticsearch B.V. licenses this file to you under\r\n * the Apache License, Version 2.0 (the \"License\"); you may\r\n * not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *    http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing,\r\n * software distributed under the License is distributed on an\r\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n * KIND, either express or implied.  See the License for the\r\n * specific language governing permissions and limitations\r\n * under the License.\r\n */\r\n\r\n'use strict'\r\n\r\n/* eslint camelcase: 0 */\r\n/* eslint no-unused-vars: 0 */\r\n\r\nconst { handleError, snakeCaseKeys, normalizeArguments, kConfigurationError } = require('../utils')\r\nconst acceptedQuerystring = ['pretty', 'human', 'error_trace', 'source', 'filter_path', 'only_managed', 'only_errors']\r\nconst snakeCase = { errorTrace: 'error_trace', filterPath: 'filter_path', onlyManaged: 'only_managed', onlyErrors: 'only_errors' }\r\n\r\nfunction IlmApi (transport, ConfigurationError) {\r\n  this.transport = transport\r\n  this[kConfigurationError] = ConfigurationError\r\n}\r\n\r\nIlmApi.prototype.deleteLifecycle = function ilmDeleteLifecycleApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.policy == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: policy')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, policy, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'DELETE'\r\n  path = '/' + '_ilm' + '/' + 'policy' + '/' + encodeURIComponent(policy)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIlmApi.prototype.explainLifecycle = function ilmExplainLifecycleApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + encodeURIComponent(index) + '/' + '_ilm' + '/' + 'explain'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIlmApi.prototype.getLifecycle = function ilmGetLifecycleApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, policy, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if ((policy) != null) {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_ilm' + '/' + 'policy' + '/' + encodeURIComponent(policy)\r\n  } else {\r\n    if (method == null) method = 'GET'\r\n    path = '/' + '_ilm' + '/' + 'policy'\r\n  }\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIlmApi.prototype.getStatus = function ilmGetStatusApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'GET'\r\n  path = '/' + '_ilm' + '/' + 'status'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: null,\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIlmApi.prototype.moveToStep = function ilmMoveToStepApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ilm' + '/' + 'move' + '/' + encodeURIComponent(index)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIlmApi.prototype.putLifecycle = function ilmPutLifecycleApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.policy == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: policy')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, policy, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'PUT'\r\n  path = '/' + '_ilm' + '/' + 'policy' + '/' + encodeURIComponent(policy)\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIlmApi.prototype.removePolicy = function ilmRemovePolicyApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + encodeURIComponent(index) + '/' + '_ilm' + '/' + 'remove'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIlmApi.prototype.retry = function ilmRetryApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  // check required parameters\r\n  if (params.index == null) {\r\n    const err = new this[kConfigurationError]('Missing required parameter: index')\r\n    return handleError(err, callback)\r\n  }\r\n\r\n  let { method, body, index, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + encodeURIComponent(index) + '/' + '_ilm' + '/' + 'retry'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIlmApi.prototype.start = function ilmStartApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ilm' + '/' + 'start'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nIlmApi.prototype.stop = function ilmStopApi (params, options, callback) {\r\n  ;[params, options, callback] = normalizeArguments(params, options, callback)\r\n\r\n  let { method, body, ...querystring } = params\r\n  querystring = snakeCaseKeys(acceptedQuerystring, snakeCase, querystring)\r\n\r\n  let path = ''\r\n  if (method == null) method = 'POST'\r\n  path = '/' + '_ilm' + '/' + 'stop'\r\n\r\n  // build request object\r\n  const request = {\r\n    method,\r\n    path,\r\n    body: body || '',\r\n    querystring\r\n  }\r\n\r\n  return this.transport.request(request, options, callback)\r\n}\r\n\r\nObject.defineProperties(IlmApi.prototype, {\r\n  delete_lifecycle: { get () { return this.deleteLifecycle } },\r\n  explain_lifecycle: { get () { return this.explainLifecycle } },\r\n  get_lifecycle: { get () { return this.getLifecycle } },\r\n  get_status: { get () { return this.getStatus } },\r\n  move_to_step: { get () { return this.moveToStep } },\r\n  put_lifecycle: { get () { return this.putLifecycle } },\r\n  remove_policy: { get () { return this.removePolicy } }\r\n})\r\n\r\nmodule.exports = IlmApi\r\n"]},"metadata":{},"sourceType":"module"}